/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 1729.0, "series": [{"data": [[0.0, 54.0], [0.1, 56.0], [0.2, 60.0], [0.3, 60.0], [0.4, 68.0], [0.5, 69.0], [0.6, 70.0], [0.7, 71.0], [0.8, 73.0], [0.9, 73.0], [1.0, 74.0], [1.1, 76.0], [1.2, 76.0], [1.3, 77.0], [1.4, 77.0], [1.5, 78.0], [1.6, 84.0], [1.7, 87.0], [1.8, 88.0], [1.9, 89.0], [2.0, 89.0], [2.1, 90.0], [2.2, 91.0], [2.3, 91.0], [2.4, 92.0], [2.5, 93.0], [2.6, 93.0], [2.7, 93.0], [2.8, 94.0], [2.9, 96.0], [3.0, 97.0], [3.1, 97.0], [3.2, 99.0], [3.3, 100.0], [3.4, 101.0], [3.5, 102.0], [3.6, 103.0], [3.7, 104.0], [3.8, 106.0], [3.9, 107.0], [4.0, 107.0], [4.1, 109.0], [4.2, 112.0], [4.3, 114.0], [4.4, 116.0], [4.5, 116.0], [4.6, 117.0], [4.7, 117.0], [4.8, 120.0], [4.9, 125.0], [5.0, 126.0], [5.1, 127.0], [5.2, 127.0], [5.3, 129.0], [5.4, 134.0], [5.5, 134.0], [5.6, 135.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 138.0], [6.1, 139.0], [6.2, 141.0], [6.3, 142.0], [6.4, 145.0], [6.5, 146.0], [6.6, 146.0], [6.7, 148.0], [6.8, 149.0], [6.9, 158.0], [7.0, 158.0], [7.1, 161.0], [7.2, 162.0], [7.3, 164.0], [7.4, 164.0], [7.5, 166.0], [7.6, 167.0], [7.7, 169.0], [7.8, 171.0], [7.9, 171.0], [8.0, 172.0], [8.1, 175.0], [8.2, 176.0], [8.3, 177.0], [8.4, 178.0], [8.5, 181.0], [8.6, 183.0], [8.7, 183.0], [8.8, 183.0], [8.9, 185.0], [9.0, 187.0], [9.1, 187.0], [9.2, 188.0], [9.3, 188.0], [9.4, 189.0], [9.5, 189.0], [9.6, 192.0], [9.7, 193.0], [9.8, 194.0], [9.9, 196.0], [10.0, 197.0], [10.1, 198.0], [10.2, 198.0], [10.3, 199.0], [10.4, 199.0], [10.5, 199.0], [10.6, 199.0], [10.7, 203.0], [10.8, 204.0], [10.9, 207.0], [11.0, 208.0], [11.1, 208.0], [11.2, 211.0], [11.3, 212.0], [11.4, 216.0], [11.5, 217.0], [11.6, 217.0], [11.7, 217.0], [11.8, 218.0], [11.9, 219.0], [12.0, 219.0], [12.1, 219.0], [12.2, 219.0], [12.3, 221.0], [12.4, 224.0], [12.5, 226.0], [12.6, 228.0], [12.7, 229.0], [12.8, 232.0], [12.9, 233.0], [13.0, 234.0], [13.1, 236.0], [13.2, 237.0], [13.3, 238.0], [13.4, 240.0], [13.5, 241.0], [13.6, 242.0], [13.7, 244.0], [13.8, 244.0], [13.9, 248.0], [14.0, 249.0], [14.1, 251.0], [14.2, 252.0], [14.3, 253.0], [14.4, 254.0], [14.5, 254.0], [14.6, 254.0], [14.7, 255.0], [14.8, 255.0], [14.9, 255.0], [15.0, 256.0], [15.1, 259.0], [15.2, 259.0], [15.3, 260.0], [15.4, 261.0], [15.5, 261.0], [15.6, 262.0], [15.7, 262.0], [15.8, 263.0], [15.9, 263.0], [16.0, 264.0], [16.1, 265.0], [16.2, 266.0], [16.3, 266.0], [16.4, 270.0], [16.5, 271.0], [16.6, 272.0], [16.7, 273.0], [16.8, 276.0], [16.9, 278.0], [17.0, 278.0], [17.1, 278.0], [17.2, 279.0], [17.3, 280.0], [17.4, 283.0], [17.5, 283.0], [17.6, 284.0], [17.7, 284.0], [17.8, 287.0], [17.9, 287.0], [18.0, 287.0], [18.1, 288.0], [18.2, 288.0], [18.3, 291.0], [18.4, 291.0], [18.5, 293.0], [18.6, 294.0], [18.7, 296.0], [18.8, 297.0], [18.9, 298.0], [19.0, 300.0], [19.1, 301.0], [19.2, 302.0], [19.3, 302.0], [19.4, 304.0], [19.5, 304.0], [19.6, 306.0], [19.7, 307.0], [19.8, 309.0], [19.9, 309.0], [20.0, 310.0], [20.1, 311.0], [20.2, 311.0], [20.3, 312.0], [20.4, 312.0], [20.5, 316.0], [20.6, 317.0], [20.7, 317.0], [20.8, 318.0], [20.9, 318.0], [21.0, 318.0], [21.1, 319.0], [21.2, 320.0], [21.3, 321.0], [21.4, 322.0], [21.5, 323.0], [21.6, 326.0], [21.7, 326.0], [21.8, 326.0], [21.9, 328.0], [22.0, 328.0], [22.1, 330.0], [22.2, 330.0], [22.3, 331.0], [22.4, 334.0], [22.5, 335.0], [22.6, 335.0], [22.7, 336.0], [22.8, 338.0], [22.9, 341.0], [23.0, 341.0], [23.1, 342.0], [23.2, 343.0], [23.3, 344.0], [23.4, 346.0], [23.5, 346.0], [23.6, 346.0], [23.7, 349.0], [23.8, 350.0], [23.9, 351.0], [24.0, 352.0], [24.1, 353.0], [24.2, 354.0], [24.3, 355.0], [24.4, 355.0], [24.5, 357.0], [24.6, 359.0], [24.7, 359.0], [24.8, 360.0], [24.9, 360.0], [25.0, 362.0], [25.1, 363.0], [25.2, 363.0], [25.3, 365.0], [25.4, 365.0], [25.5, 366.0], [25.6, 367.0], [25.7, 368.0], [25.8, 373.0], [25.9, 377.0], [26.0, 378.0], [26.1, 379.0], [26.2, 382.0], [26.3, 382.0], [26.4, 382.0], [26.5, 383.0], [26.6, 383.0], [26.7, 384.0], [26.8, 384.0], [26.9, 385.0], [27.0, 387.0], [27.1, 389.0], [27.2, 391.0], [27.3, 393.0], [27.4, 394.0], [27.5, 395.0], [27.6, 396.0], [27.7, 396.0], [27.8, 397.0], [27.9, 397.0], [28.0, 397.0], [28.1, 398.0], [28.2, 399.0], [28.3, 401.0], [28.4, 402.0], [28.5, 402.0], [28.6, 402.0], [28.7, 403.0], [28.8, 403.0], [28.9, 404.0], [29.0, 404.0], [29.1, 405.0], [29.2, 405.0], [29.3, 410.0], [29.4, 412.0], [29.5, 413.0], [29.6, 414.0], [29.7, 416.0], [29.8, 417.0], [29.9, 417.0], [30.0, 418.0], [30.1, 419.0], [30.2, 420.0], [30.3, 421.0], [30.4, 423.0], [30.5, 423.0], [30.6, 424.0], [30.7, 425.0], [30.8, 425.0], [30.9, 425.0], [31.0, 426.0], [31.1, 427.0], [31.2, 427.0], [31.3, 427.0], [31.4, 431.0], [31.5, 432.0], [31.6, 434.0], [31.7, 435.0], [31.8, 436.0], [31.9, 437.0], [32.0, 437.0], [32.1, 439.0], [32.2, 439.0], [32.3, 445.0], [32.4, 445.0], [32.5, 446.0], [32.6, 446.0], [32.7, 446.0], [32.8, 447.0], [32.9, 449.0], [33.0, 458.0], [33.1, 459.0], [33.2, 461.0], [33.3, 463.0], [33.4, 464.0], [33.5, 464.0], [33.6, 465.0], [33.7, 465.0], [33.8, 466.0], [33.9, 466.0], [34.0, 467.0], [34.1, 470.0], [34.2, 471.0], [34.3, 472.0], [34.4, 472.0], [34.5, 473.0], [34.6, 473.0], [34.7, 474.0], [34.8, 474.0], [34.9, 474.0], [35.0, 475.0], [35.1, 478.0], [35.2, 478.0], [35.3, 479.0], [35.4, 480.0], [35.5, 480.0], [35.6, 480.0], [35.7, 481.0], [35.8, 481.0], [35.9, 483.0], [36.0, 483.0], [36.1, 484.0], [36.2, 486.0], [36.3, 486.0], [36.4, 487.0], [36.5, 488.0], [36.6, 489.0], [36.7, 491.0], [36.8, 492.0], [36.9, 493.0], [37.0, 494.0], [37.1, 497.0], [37.2, 497.0], [37.3, 498.0], [37.4, 498.0], [37.5, 499.0], [37.6, 505.0], [37.7, 505.0], [37.8, 508.0], [37.9, 511.0], [38.0, 512.0], [38.1, 513.0], [38.2, 513.0], [38.3, 514.0], [38.4, 515.0], [38.5, 515.0], [38.6, 518.0], [38.7, 519.0], [38.8, 519.0], [38.9, 519.0], [39.0, 523.0], [39.1, 524.0], [39.2, 524.0], [39.3, 525.0], [39.4, 526.0], [39.5, 527.0], [39.6, 527.0], [39.7, 527.0], [39.8, 527.0], [39.9, 528.0], [40.0, 528.0], [40.1, 529.0], [40.2, 531.0], [40.3, 531.0], [40.4, 533.0], [40.5, 533.0], [40.6, 533.0], [40.7, 534.0], [40.8, 535.0], [40.9, 536.0], [41.0, 536.0], [41.1, 536.0], [41.2, 537.0], [41.3, 537.0], [41.4, 537.0], [41.5, 538.0], [41.6, 540.0], [41.7, 541.0], [41.8, 542.0], [41.9, 542.0], [42.0, 542.0], [42.1, 543.0], [42.2, 544.0], [42.3, 545.0], [42.4, 547.0], [42.5, 549.0], [42.6, 550.0], [42.7, 551.0], [42.8, 551.0], [42.9, 552.0], [43.0, 552.0], [43.1, 554.0], [43.2, 557.0], [43.3, 558.0], [43.4, 558.0], [43.5, 558.0], [43.6, 558.0], [43.7, 564.0], [43.8, 564.0], [43.9, 564.0], [44.0, 564.0], [44.1, 565.0], [44.2, 565.0], [44.3, 566.0], [44.4, 566.0], [44.5, 567.0], [44.6, 567.0], [44.7, 568.0], [44.8, 568.0], [44.9, 569.0], [45.0, 569.0], [45.1, 570.0], [45.2, 571.0], [45.3, 571.0], [45.4, 572.0], [45.5, 572.0], [45.6, 573.0], [45.7, 574.0], [45.8, 574.0], [45.9, 575.0], [46.0, 575.0], [46.1, 575.0], [46.2, 575.0], [46.3, 575.0], [46.4, 576.0], [46.5, 576.0], [46.6, 577.0], [46.7, 578.0], [46.8, 578.0], [46.9, 578.0], [47.0, 578.0], [47.1, 579.0], [47.2, 580.0], [47.3, 580.0], [47.4, 582.0], [47.5, 582.0], [47.6, 582.0], [47.7, 584.0], [47.8, 584.0], [47.9, 584.0], [48.0, 584.0], [48.1, 585.0], [48.2, 586.0], [48.3, 589.0], [48.4, 590.0], [48.5, 593.0], [48.6, 593.0], [48.7, 593.0], [48.8, 593.0], [48.9, 593.0], [49.0, 595.0], [49.1, 596.0], [49.2, 596.0], [49.3, 598.0], [49.4, 599.0], [49.5, 599.0], [49.6, 600.0], [49.7, 601.0], [49.8, 601.0], [49.9, 602.0], [50.0, 602.0], [50.1, 603.0], [50.2, 603.0], [50.3, 604.0], [50.4, 604.0], [50.5, 604.0], [50.6, 604.0], [50.7, 605.0], [50.8, 606.0], [50.9, 607.0], [51.0, 608.0], [51.1, 608.0], [51.2, 609.0], [51.3, 610.0], [51.4, 611.0], [51.5, 611.0], [51.6, 611.0], [51.7, 612.0], [51.8, 613.0], [51.9, 613.0], [52.0, 614.0], [52.1, 616.0], [52.2, 617.0], [52.3, 617.0], [52.4, 619.0], [52.5, 619.0], [52.6, 619.0], [52.7, 619.0], [52.8, 620.0], [52.9, 620.0], [53.0, 620.0], [53.1, 621.0], [53.2, 622.0], [53.3, 623.0], [53.4, 624.0], [53.5, 624.0], [53.6, 625.0], [53.7, 625.0], [53.8, 625.0], [53.9, 625.0], [54.0, 625.0], [54.1, 626.0], [54.2, 628.0], [54.3, 628.0], [54.4, 628.0], [54.5, 629.0], [54.6, 629.0], [54.7, 632.0], [54.8, 632.0], [54.9, 633.0], [55.0, 634.0], [55.1, 635.0], [55.2, 636.0], [55.3, 636.0], [55.4, 637.0], [55.5, 638.0], [55.6, 639.0], [55.7, 639.0], [55.8, 639.0], [55.9, 639.0], [56.0, 639.0], [56.1, 640.0], [56.2, 641.0], [56.3, 641.0], [56.4, 641.0], [56.5, 642.0], [56.6, 642.0], [56.7, 644.0], [56.8, 644.0], [56.9, 644.0], [57.0, 644.0], [57.1, 645.0], [57.2, 645.0], [57.3, 645.0], [57.4, 646.0], [57.5, 646.0], [57.6, 646.0], [57.7, 647.0], [57.8, 648.0], [57.9, 649.0], [58.0, 650.0], [58.1, 650.0], [58.2, 650.0], [58.3, 650.0], [58.4, 650.0], [58.5, 651.0], [58.6, 651.0], [58.7, 655.0], [58.8, 656.0], [58.9, 657.0], [59.0, 657.0], [59.1, 657.0], [59.2, 658.0], [59.3, 658.0], [59.4, 659.0], [59.5, 659.0], [59.6, 659.0], [59.7, 660.0], [59.8, 661.0], [59.9, 662.0], [60.0, 662.0], [60.1, 662.0], [60.2, 663.0], [60.3, 663.0], [60.4, 663.0], [60.5, 663.0], [60.6, 665.0], [60.7, 666.0], [60.8, 666.0], [60.9, 668.0], [61.0, 669.0], [61.1, 669.0], [61.2, 670.0], [61.3, 671.0], [61.4, 671.0], [61.5, 672.0], [61.6, 672.0], [61.7, 672.0], [61.8, 673.0], [61.9, 673.0], [62.0, 674.0], [62.1, 674.0], [62.2, 675.0], [62.3, 675.0], [62.4, 675.0], [62.5, 675.0], [62.6, 675.0], [62.7, 675.0], [62.8, 675.0], [62.9, 677.0], [63.0, 677.0], [63.1, 677.0], [63.2, 678.0], [63.3, 679.0], [63.4, 679.0], [63.5, 681.0], [63.6, 681.0], [63.7, 681.0], [63.8, 682.0], [63.9, 682.0], [64.0, 683.0], [64.1, 683.0], [64.2, 684.0], [64.3, 685.0], [64.4, 685.0], [64.5, 686.0], [64.6, 686.0], [64.7, 686.0], [64.8, 687.0], [64.9, 688.0], [65.0, 689.0], [65.1, 689.0], [65.2, 689.0], [65.3, 690.0], [65.4, 691.0], [65.5, 691.0], [65.6, 691.0], [65.7, 692.0], [65.8, 693.0], [65.9, 694.0], [66.0, 694.0], [66.1, 695.0], [66.2, 696.0], [66.3, 697.0], [66.4, 697.0], [66.5, 698.0], [66.6, 698.0], [66.7, 699.0], [66.8, 699.0], [66.9, 701.0], [67.0, 701.0], [67.1, 701.0], [67.2, 702.0], [67.3, 703.0], [67.4, 703.0], [67.5, 704.0], [67.6, 704.0], [67.7, 705.0], [67.8, 705.0], [67.9, 705.0], [68.0, 705.0], [68.1, 705.0], [68.2, 706.0], [68.3, 707.0], [68.4, 708.0], [68.5, 708.0], [68.6, 708.0], [68.7, 709.0], [68.8, 709.0], [68.9, 710.0], [69.0, 711.0], [69.1, 711.0], [69.2, 711.0], [69.3, 713.0], [69.4, 714.0], [69.5, 715.0], [69.6, 716.0], [69.7, 717.0], [69.8, 717.0], [69.9, 719.0], [70.0, 719.0], [70.1, 720.0], [70.2, 722.0], [70.3, 722.0], [70.4, 723.0], [70.5, 723.0], [70.6, 723.0], [70.7, 724.0], [70.8, 724.0], [70.9, 725.0], [71.0, 725.0], [71.1, 725.0], [71.2, 726.0], [71.3, 726.0], [71.4, 726.0], [71.5, 727.0], [71.6, 728.0], [71.7, 728.0], [71.8, 728.0], [71.9, 729.0], [72.0, 731.0], [72.1, 731.0], [72.2, 731.0], [72.3, 734.0], [72.4, 735.0], [72.5, 737.0], [72.6, 737.0], [72.7, 738.0], [72.8, 738.0], [72.9, 739.0], [73.0, 740.0], [73.1, 742.0], [73.2, 743.0], [73.3, 743.0], [73.4, 743.0], [73.5, 744.0], [73.6, 744.0], [73.7, 745.0], [73.8, 745.0], [73.9, 745.0], [74.0, 746.0], [74.1, 746.0], [74.2, 746.0], [74.3, 747.0], [74.4, 748.0], [74.5, 748.0], [74.6, 749.0], [74.7, 749.0], [74.8, 751.0], [74.9, 751.0], [75.0, 752.0], [75.1, 752.0], [75.2, 753.0], [75.3, 756.0], [75.4, 757.0], [75.5, 759.0], [75.6, 759.0], [75.7, 759.0], [75.8, 759.0], [75.9, 760.0], [76.0, 765.0], [76.1, 765.0], [76.2, 766.0], [76.3, 766.0], [76.4, 766.0], [76.5, 771.0], [76.6, 771.0], [76.7, 772.0], [76.8, 773.0], [76.9, 773.0], [77.0, 774.0], [77.1, 777.0], [77.2, 777.0], [77.3, 777.0], [77.4, 779.0], [77.5, 781.0], [77.6, 781.0], [77.7, 783.0], [77.8, 785.0], [77.9, 786.0], [78.0, 786.0], [78.1, 787.0], [78.2, 788.0], [78.3, 789.0], [78.4, 791.0], [78.5, 792.0], [78.6, 792.0], [78.7, 793.0], [78.8, 794.0], [78.9, 797.0], [79.0, 799.0], [79.1, 799.0], [79.2, 800.0], [79.3, 800.0], [79.4, 800.0], [79.5, 801.0], [79.6, 803.0], [79.7, 804.0], [79.8, 805.0], [79.9, 806.0], [80.0, 807.0], [80.1, 808.0], [80.2, 808.0], [80.3, 808.0], [80.4, 810.0], [80.5, 811.0], [80.6, 811.0], [80.7, 812.0], [80.8, 813.0], [80.9, 814.0], [81.0, 814.0], [81.1, 815.0], [81.2, 815.0], [81.3, 815.0], [81.4, 816.0], [81.5, 816.0], [81.6, 819.0], [81.7, 819.0], [81.8, 819.0], [81.9, 821.0], [82.0, 822.0], [82.1, 823.0], [82.2, 825.0], [82.3, 825.0], [82.4, 826.0], [82.5, 827.0], [82.6, 827.0], [82.7, 830.0], [82.8, 830.0], [82.9, 830.0], [83.0, 830.0], [83.1, 832.0], [83.2, 833.0], [83.3, 834.0], [83.4, 834.0], [83.5, 834.0], [83.6, 835.0], [83.7, 836.0], [83.8, 837.0], [83.9, 837.0], [84.0, 840.0], [84.1, 841.0], [84.2, 841.0], [84.3, 841.0], [84.4, 842.0], [84.5, 843.0], [84.6, 843.0], [84.7, 844.0], [84.8, 844.0], [84.9, 845.0], [85.0, 845.0], [85.1, 848.0], [85.2, 848.0], [85.3, 849.0], [85.4, 850.0], [85.5, 852.0], [85.6, 852.0], [85.7, 853.0], [85.8, 857.0], [85.9, 857.0], [86.0, 857.0], [86.1, 857.0], [86.2, 859.0], [86.3, 859.0], [86.4, 859.0], [86.5, 860.0], [86.6, 862.0], [86.7, 864.0], [86.8, 864.0], [86.9, 865.0], [87.0, 866.0], [87.1, 866.0], [87.2, 866.0], [87.3, 866.0], [87.4, 868.0], [87.5, 868.0], [87.6, 871.0], [87.7, 871.0], [87.8, 871.0], [87.9, 871.0], [88.0, 873.0], [88.1, 873.0], [88.2, 873.0], [88.3, 874.0], [88.4, 874.0], [88.5, 875.0], [88.6, 876.0], [88.7, 876.0], [88.8, 876.0], [88.9, 876.0], [89.0, 879.0], [89.1, 881.0], [89.2, 881.0], [89.3, 881.0], [89.4, 882.0], [89.5, 883.0], [89.6, 883.0], [89.7, 884.0], [89.8, 885.0], [89.9, 886.0], [90.0, 886.0], [90.1, 889.0], [90.2, 891.0], [90.3, 895.0], [90.4, 897.0], [90.5, 898.0], [90.6, 898.0], [90.7, 898.0], [90.8, 899.0], [90.9, 899.0], [91.0, 904.0], [91.1, 904.0], [91.2, 904.0], [91.3, 905.0], [91.4, 906.0], [91.5, 906.0], [91.6, 911.0], [91.7, 914.0], [91.8, 915.0], [91.9, 917.0], [92.0, 918.0], [92.1, 919.0], [92.2, 921.0], [92.3, 925.0], [92.4, 929.0], [92.5, 931.0], [92.6, 932.0], [92.7, 933.0], [92.8, 938.0], [92.9, 939.0], [93.0, 943.0], [93.1, 943.0], [93.2, 943.0], [93.3, 945.0], [93.4, 947.0], [93.5, 951.0], [93.6, 951.0], [93.7, 957.0], [93.8, 959.0], [93.9, 961.0], [94.0, 961.0], [94.1, 963.0], [94.2, 963.0], [94.3, 965.0], [94.4, 969.0], [94.5, 971.0], [94.6, 974.0], [94.7, 977.0], [94.8, 980.0], [94.9, 982.0], [95.0, 984.0], [95.1, 988.0], [95.2, 991.0], [95.3, 991.0], [95.4, 993.0], [95.5, 995.0], [95.6, 996.0], [95.7, 1002.0], [95.8, 1002.0], [95.9, 1004.0], [96.0, 1008.0], [96.1, 1013.0], [96.2, 1014.0], [96.3, 1015.0], [96.4, 1018.0], [96.5, 1019.0], [96.6, 1021.0], [96.7, 1022.0], [96.8, 1026.0], [96.9, 1028.0], [97.0, 1031.0], [97.1, 1032.0], [97.2, 1040.0], [97.3, 1045.0], [97.4, 1052.0], [97.5, 1058.0], [97.6, 1058.0], [97.7, 1058.0], [97.8, 1060.0], [97.9, 1060.0], [98.0, 1063.0], [98.1, 1070.0], [98.2, 1073.0], [98.3, 1078.0], [98.4, 1079.0], [98.5, 1089.0], [98.6, 1095.0], [98.7, 1109.0], [98.8, 1119.0], [98.9, 1145.0], [99.0, 1155.0], [99.1, 1158.0], [99.2, 1164.0], [99.3, 1164.0], [99.4, 1167.0], [99.5, 1181.0], [99.6, 1189.0], [99.7, 1196.0], [99.8, 1214.0], [99.9, 1220.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 36.0], [0.1, 37.0], [0.2, 38.0], [0.3, 38.0], [0.4, 40.0], [0.5, 41.0], [0.6, 42.0], [0.7, 43.0], [0.8, 43.0], [0.9, 46.0], [1.0, 49.0], [1.1, 51.0], [1.2, 53.0], [1.3, 61.0], [1.4, 61.0], [1.5, 63.0], [1.6, 65.0], [1.7, 65.0], [1.8, 77.0], [1.9, 77.0], [2.0, 79.0], [2.1, 80.0], [2.2, 82.0], [2.3, 82.0], [2.4, 82.0], [2.5, 87.0], [2.6, 89.0], [2.7, 93.0], [2.8, 93.0], [2.9, 94.0], [3.0, 94.0], [3.1, 95.0], [3.2, 96.0], [3.3, 97.0], [3.4, 99.0], [3.5, 100.0], [3.6, 100.0], [3.7, 101.0], [3.8, 101.0], [3.9, 102.0], [4.0, 106.0], [4.1, 107.0], [4.2, 108.0], [4.3, 109.0], [4.4, 109.0], [4.5, 109.0], [4.6, 115.0], [4.7, 117.0], [4.8, 117.0], [4.9, 121.0], [5.0, 121.0], [5.1, 121.0], [5.2, 124.0], [5.3, 126.0], [5.4, 126.0], [5.5, 131.0], [5.6, 132.0], [5.7, 135.0], [5.8, 135.0], [5.9, 136.0], [6.0, 136.0], [6.1, 137.0], [6.2, 137.0], [6.3, 140.0], [6.4, 140.0], [6.5, 141.0], [6.6, 142.0], [6.7, 145.0], [6.8, 149.0], [6.9, 150.0], [7.0, 150.0], [7.1, 152.0], [7.2, 152.0], [7.3, 154.0], [7.4, 158.0], [7.5, 158.0], [7.6, 161.0], [7.7, 169.0], [7.8, 173.0], [7.9, 174.0], [8.0, 174.0], [8.1, 175.0], [8.2, 176.0], [8.3, 177.0], [8.4, 181.0], [8.5, 181.0], [8.6, 183.0], [8.7, 184.0], [8.8, 188.0], [8.9, 188.0], [9.0, 189.0], [9.1, 195.0], [9.2, 197.0], [9.3, 198.0], [9.4, 199.0], [9.5, 200.0], [9.6, 201.0], [9.7, 201.0], [9.8, 202.0], [9.9, 205.0], [10.0, 206.0], [10.1, 208.0], [10.2, 210.0], [10.3, 211.0], [10.4, 212.0], [10.5, 213.0], [10.6, 215.0], [10.7, 221.0], [10.8, 221.0], [10.9, 222.0], [11.0, 223.0], [11.1, 224.0], [11.2, 224.0], [11.3, 225.0], [11.4, 228.0], [11.5, 229.0], [11.6, 231.0], [11.7, 231.0], [11.8, 232.0], [11.9, 236.0], [12.0, 238.0], [12.1, 241.0], [12.2, 243.0], [12.3, 245.0], [12.4, 245.0], [12.5, 245.0], [12.6, 246.0], [12.7, 247.0], [12.8, 247.0], [12.9, 250.0], [13.0, 251.0], [13.1, 255.0], [13.2, 257.0], [13.3, 257.0], [13.4, 257.0], [13.5, 260.0], [13.6, 261.0], [13.7, 261.0], [13.8, 263.0], [13.9, 264.0], [14.0, 266.0], [14.1, 269.0], [14.2, 271.0], [14.3, 272.0], [14.4, 275.0], [14.5, 275.0], [14.6, 276.0], [14.7, 278.0], [14.8, 280.0], [14.9, 283.0], [15.0, 285.0], [15.1, 285.0], [15.2, 287.0], [15.3, 292.0], [15.4, 294.0], [15.5, 294.0], [15.6, 294.0], [15.7, 296.0], [15.8, 297.0], [15.9, 300.0], [16.0, 301.0], [16.1, 302.0], [16.2, 302.0], [16.3, 305.0], [16.4, 306.0], [16.5, 307.0], [16.6, 307.0], [16.7, 309.0], [16.8, 309.0], [16.9, 310.0], [17.0, 311.0], [17.1, 312.0], [17.2, 316.0], [17.3, 317.0], [17.4, 317.0], [17.5, 319.0], [17.6, 319.0], [17.7, 320.0], [17.8, 322.0], [17.9, 325.0], [18.0, 325.0], [18.1, 327.0], [18.2, 327.0], [18.3, 327.0], [18.4, 327.0], [18.5, 328.0], [18.6, 331.0], [18.7, 331.0], [18.8, 333.0], [18.9, 335.0], [19.0, 336.0], [19.1, 337.0], [19.2, 338.0], [19.3, 338.0], [19.4, 342.0], [19.5, 342.0], [19.6, 343.0], [19.7, 343.0], [19.8, 344.0], [19.9, 345.0], [20.0, 347.0], [20.1, 348.0], [20.2, 350.0], [20.3, 350.0], [20.4, 350.0], [20.5, 351.0], [20.6, 352.0], [20.7, 352.0], [20.8, 354.0], [20.9, 354.0], [21.0, 354.0], [21.1, 355.0], [21.2, 360.0], [21.3, 361.0], [21.4, 361.0], [21.5, 363.0], [21.6, 364.0], [21.7, 365.0], [21.8, 365.0], [21.9, 366.0], [22.0, 366.0], [22.1, 366.0], [22.2, 370.0], [22.3, 371.0], [22.4, 371.0], [22.5, 372.0], [22.6, 373.0], [22.7, 373.0], [22.8, 374.0], [22.9, 376.0], [23.0, 378.0], [23.1, 379.0], [23.2, 380.0], [23.3, 381.0], [23.4, 382.0], [23.5, 383.0], [23.6, 383.0], [23.7, 383.0], [23.8, 384.0], [23.9, 385.0], [24.0, 386.0], [24.1, 387.0], [24.2, 389.0], [24.3, 392.0], [24.4, 392.0], [24.5, 396.0], [24.6, 396.0], [24.7, 398.0], [24.8, 399.0], [24.9, 402.0], [25.0, 403.0], [25.1, 405.0], [25.2, 406.0], [25.3, 407.0], [25.4, 410.0], [25.5, 412.0], [25.6, 412.0], [25.7, 415.0], [25.8, 415.0], [25.9, 415.0], [26.0, 422.0], [26.1, 422.0], [26.2, 422.0], [26.3, 422.0], [26.4, 424.0], [26.5, 430.0], [26.6, 436.0], [26.7, 438.0], [26.8, 438.0], [26.9, 438.0], [27.0, 440.0], [27.1, 441.0], [27.2, 444.0], [27.3, 446.0], [27.4, 446.0], [27.5, 449.0], [27.6, 449.0], [27.7, 449.0], [27.8, 450.0], [27.9, 450.0], [28.0, 451.0], [28.1, 451.0], [28.2, 452.0], [28.3, 454.0], [28.4, 454.0], [28.5, 457.0], [28.6, 460.0], [28.7, 462.0], [28.8, 466.0], [28.9, 466.0], [29.0, 466.0], [29.1, 466.0], [29.2, 467.0], [29.3, 467.0], [29.4, 473.0], [29.5, 476.0], [29.6, 477.0], [29.7, 480.0], [29.8, 482.0], [29.9, 482.0], [30.0, 484.0], [30.1, 487.0], [30.2, 489.0], [30.3, 491.0], [30.4, 492.0], [30.5, 496.0], [30.6, 500.0], [30.7, 502.0], [30.8, 503.0], [30.9, 506.0], [31.0, 507.0], [31.1, 510.0], [31.2, 517.0], [31.3, 517.0], [31.4, 518.0], [31.5, 519.0], [31.6, 519.0], [31.7, 520.0], [31.8, 522.0], [31.9, 524.0], [32.0, 527.0], [32.1, 529.0], [32.2, 535.0], [32.3, 537.0], [32.4, 537.0], [32.5, 541.0], [32.6, 541.0], [32.7, 541.0], [32.8, 545.0], [32.9, 545.0], [33.0, 550.0], [33.1, 551.0], [33.2, 553.0], [33.3, 555.0], [33.4, 559.0], [33.5, 559.0], [33.6, 564.0], [33.7, 564.0], [33.8, 567.0], [33.9, 568.0], [34.0, 569.0], [34.1, 570.0], [34.2, 573.0], [34.3, 574.0], [34.4, 575.0], [34.5, 580.0], [34.6, 586.0], [34.7, 586.0], [34.8, 587.0], [34.9, 589.0], [35.0, 591.0], [35.1, 592.0], [35.2, 593.0], [35.3, 595.0], [35.4, 595.0], [35.5, 599.0], [35.6, 599.0], [35.7, 599.0], [35.8, 601.0], [35.9, 602.0], [36.0, 606.0], [36.1, 609.0], [36.2, 609.0], [36.3, 610.0], [36.4, 611.0], [36.5, 614.0], [36.6, 617.0], [36.7, 617.0], [36.8, 617.0], [36.9, 623.0], [37.0, 624.0], [37.1, 627.0], [37.2, 629.0], [37.3, 631.0], [37.4, 633.0], [37.5, 634.0], [37.6, 634.0], [37.7, 635.0], [37.8, 638.0], [37.9, 639.0], [38.0, 643.0], [38.1, 643.0], [38.2, 644.0], [38.3, 645.0], [38.4, 646.0], [38.5, 646.0], [38.6, 647.0], [38.7, 648.0], [38.8, 650.0], [38.9, 654.0], [39.0, 656.0], [39.1, 660.0], [39.2, 660.0], [39.3, 660.0], [39.4, 663.0], [39.5, 669.0], [39.6, 670.0], [39.7, 670.0], [39.8, 670.0], [39.9, 672.0], [40.0, 674.0], [40.1, 675.0], [40.2, 676.0], [40.3, 679.0], [40.4, 680.0], [40.5, 683.0], [40.6, 684.0], [40.7, 684.0], [40.8, 685.0], [40.9, 685.0], [41.0, 685.0], [41.1, 689.0], [41.2, 691.0], [41.3, 692.0], [41.4, 694.0], [41.5, 694.0], [41.6, 697.0], [41.7, 698.0], [41.8, 699.0], [41.9, 699.0], [42.0, 700.0], [42.1, 701.0], [42.2, 706.0], [42.3, 707.0], [42.4, 708.0], [42.5, 711.0], [42.6, 713.0], [42.7, 713.0], [42.8, 716.0], [42.9, 717.0], [43.0, 719.0], [43.1, 719.0], [43.2, 721.0], [43.3, 721.0], [43.4, 721.0], [43.5, 722.0], [43.6, 724.0], [43.7, 725.0], [43.8, 725.0], [43.9, 726.0], [44.0, 728.0], [44.1, 730.0], [44.2, 733.0], [44.3, 734.0], [44.4, 736.0], [44.5, 737.0], [44.6, 741.0], [44.7, 743.0], [44.8, 745.0], [44.9, 745.0], [45.0, 745.0], [45.1, 746.0], [45.2, 748.0], [45.3, 748.0], [45.4, 748.0], [45.5, 754.0], [45.6, 755.0], [45.7, 756.0], [45.8, 758.0], [45.9, 759.0], [46.0, 761.0], [46.1, 762.0], [46.2, 764.0], [46.3, 767.0], [46.4, 769.0], [46.5, 770.0], [46.6, 770.0], [46.7, 771.0], [46.8, 771.0], [46.9, 773.0], [47.0, 773.0], [47.1, 773.0], [47.2, 775.0], [47.3, 780.0], [47.4, 783.0], [47.5, 783.0], [47.6, 785.0], [47.7, 790.0], [47.8, 791.0], [47.9, 795.0], [48.0, 797.0], [48.1, 798.0], [48.2, 798.0], [48.3, 798.0], [48.4, 800.0], [48.5, 800.0], [48.6, 802.0], [48.7, 802.0], [48.8, 803.0], [48.9, 811.0], [49.0, 812.0], [49.1, 814.0], [49.2, 820.0], [49.3, 821.0], [49.4, 822.0], [49.5, 822.0], [49.6, 826.0], [49.7, 830.0], [49.8, 832.0], [49.9, 835.0], [50.0, 839.0], [50.1, 839.0], [50.2, 842.0], [50.3, 844.0], [50.4, 845.0], [50.5, 847.0], [50.6, 848.0], [50.7, 852.0], [50.8, 852.0], [50.9, 854.0], [51.0, 855.0], [51.1, 856.0], [51.2, 857.0], [51.3, 857.0], [51.4, 858.0], [51.5, 859.0], [51.6, 863.0], [51.7, 863.0], [51.8, 865.0], [51.9, 867.0], [52.0, 868.0], [52.1, 868.0], [52.2, 869.0], [52.3, 872.0], [52.4, 873.0], [52.5, 876.0], [52.6, 877.0], [52.7, 877.0], [52.8, 878.0], [52.9, 878.0], [53.0, 881.0], [53.1, 886.0], [53.2, 888.0], [53.3, 889.0], [53.4, 889.0], [53.5, 889.0], [53.6, 891.0], [53.7, 898.0], [53.8, 899.0], [53.9, 899.0], [54.0, 905.0], [54.1, 905.0], [54.2, 905.0], [54.3, 907.0], [54.4, 908.0], [54.5, 909.0], [54.6, 914.0], [54.7, 914.0], [54.8, 914.0], [54.9, 915.0], [55.0, 915.0], [55.1, 919.0], [55.2, 921.0], [55.3, 921.0], [55.4, 923.0], [55.5, 927.0], [55.6, 927.0], [55.7, 929.0], [55.8, 930.0], [55.9, 930.0], [56.0, 931.0], [56.1, 931.0], [56.2, 933.0], [56.3, 938.0], [56.4, 938.0], [56.5, 938.0], [56.6, 940.0], [56.7, 942.0], [56.8, 944.0], [56.9, 945.0], [57.0, 946.0], [57.1, 947.0], [57.2, 947.0], [57.3, 947.0], [57.4, 948.0], [57.5, 948.0], [57.6, 949.0], [57.7, 954.0], [57.8, 956.0], [57.9, 958.0], [58.0, 959.0], [58.1, 960.0], [58.2, 961.0], [58.3, 961.0], [58.4, 964.0], [58.5, 965.0], [58.6, 967.0], [58.7, 968.0], [58.8, 973.0], [58.9, 977.0], [59.0, 977.0], [59.1, 979.0], [59.2, 981.0], [59.3, 981.0], [59.4, 983.0], [59.5, 984.0], [59.6, 986.0], [59.7, 986.0], [59.8, 987.0], [59.9, 987.0], [60.0, 988.0], [60.1, 990.0], [60.2, 992.0], [60.3, 992.0], [60.4, 993.0], [60.5, 993.0], [60.6, 994.0], [60.7, 994.0], [60.8, 994.0], [60.9, 996.0], [61.0, 997.0], [61.1, 998.0], [61.2, 1000.0], [61.3, 1000.0], [61.4, 1001.0], [61.5, 1001.0], [61.6, 1001.0], [61.7, 1003.0], [61.8, 1003.0], [61.9, 1005.0], [62.0, 1005.0], [62.1, 1007.0], [62.2, 1011.0], [62.3, 1011.0], [62.4, 1011.0], [62.5, 1012.0], [62.6, 1013.0], [62.7, 1014.0], [62.8, 1016.0], [62.9, 1017.0], [63.0, 1017.0], [63.1, 1018.0], [63.2, 1018.0], [63.3, 1018.0], [63.4, 1020.0], [63.5, 1021.0], [63.6, 1023.0], [63.7, 1023.0], [63.8, 1026.0], [63.9, 1028.0], [64.0, 1028.0], [64.1, 1029.0], [64.2, 1030.0], [64.3, 1031.0], [64.4, 1031.0], [64.5, 1034.0], [64.6, 1034.0], [64.7, 1034.0], [64.8, 1036.0], [64.9, 1039.0], [65.0, 1042.0], [65.1, 1043.0], [65.2, 1044.0], [65.3, 1044.0], [65.4, 1047.0], [65.5, 1048.0], [65.6, 1049.0], [65.7, 1050.0], [65.8, 1051.0], [65.9, 1051.0], [66.0, 1052.0], [66.1, 1053.0], [66.2, 1053.0], [66.3, 1056.0], [66.4, 1057.0], [66.5, 1057.0], [66.6, 1059.0], [66.7, 1059.0], [66.8, 1059.0], [66.9, 1061.0], [67.0, 1062.0], [67.1, 1063.0], [67.2, 1064.0], [67.3, 1067.0], [67.4, 1067.0], [67.5, 1068.0], [67.6, 1068.0], [67.7, 1069.0], [67.8, 1069.0], [67.9, 1069.0], [68.0, 1070.0], [68.1, 1071.0], [68.2, 1073.0], [68.3, 1075.0], [68.4, 1076.0], [68.5, 1077.0], [68.6, 1077.0], [68.7, 1078.0], [68.8, 1078.0], [68.9, 1078.0], [69.0, 1081.0], [69.1, 1082.0], [69.2, 1083.0], [69.3, 1084.0], [69.4, 1084.0], [69.5, 1085.0], [69.6, 1085.0], [69.7, 1086.0], [69.8, 1087.0], [69.9, 1088.0], [70.0, 1088.0], [70.1, 1089.0], [70.2, 1089.0], [70.3, 1089.0], [70.4, 1090.0], [70.5, 1091.0], [70.6, 1091.0], [70.7, 1093.0], [70.8, 1093.0], [70.9, 1096.0], [71.0, 1099.0], [71.1, 1099.0], [71.2, 1099.0], [71.3, 1100.0], [71.4, 1100.0], [71.5, 1101.0], [71.6, 1104.0], [71.7, 1104.0], [71.8, 1104.0], [71.9, 1105.0], [72.0, 1106.0], [72.1, 1108.0], [72.2, 1111.0], [72.3, 1112.0], [72.4, 1114.0], [72.5, 1116.0], [72.6, 1119.0], [72.7, 1119.0], [72.8, 1120.0], [72.9, 1122.0], [73.0, 1126.0], [73.1, 1127.0], [73.2, 1128.0], [73.3, 1128.0], [73.4, 1129.0], [73.5, 1129.0], [73.6, 1129.0], [73.7, 1130.0], [73.8, 1132.0], [73.9, 1133.0], [74.0, 1135.0], [74.1, 1135.0], [74.2, 1138.0], [74.3, 1138.0], [74.4, 1138.0], [74.5, 1139.0], [74.6, 1139.0], [74.7, 1140.0], [74.8, 1140.0], [74.9, 1141.0], [75.0, 1141.0], [75.1, 1143.0], [75.2, 1143.0], [75.3, 1143.0], [75.4, 1145.0], [75.5, 1145.0], [75.6, 1146.0], [75.7, 1148.0], [75.8, 1151.0], [75.9, 1151.0], [76.0, 1151.0], [76.1, 1151.0], [76.2, 1151.0], [76.3, 1154.0], [76.4, 1155.0], [76.5, 1156.0], [76.6, 1157.0], [76.7, 1160.0], [76.8, 1161.0], [76.9, 1161.0], [77.0, 1163.0], [77.1, 1163.0], [77.2, 1164.0], [77.3, 1165.0], [77.4, 1165.0], [77.5, 1166.0], [77.6, 1167.0], [77.7, 1169.0], [77.8, 1171.0], [77.9, 1173.0], [78.0, 1175.0], [78.1, 1175.0], [78.2, 1175.0], [78.3, 1177.0], [78.4, 1177.0], [78.5, 1178.0], [78.6, 1179.0], [78.7, 1181.0], [78.8, 1181.0], [78.9, 1182.0], [79.0, 1183.0], [79.1, 1183.0], [79.2, 1184.0], [79.3, 1185.0], [79.4, 1186.0], [79.5, 1186.0], [79.6, 1187.0], [79.7, 1187.0], [79.8, 1188.0], [79.9, 1190.0], [80.0, 1193.0], [80.1, 1194.0], [80.2, 1195.0], [80.3, 1195.0], [80.4, 1196.0], [80.5, 1197.0], [80.6, 1197.0], [80.7, 1197.0], [80.8, 1198.0], [80.9, 1199.0], [81.0, 1199.0], [81.1, 1202.0], [81.2, 1202.0], [81.3, 1203.0], [81.4, 1204.0], [81.5, 1205.0], [81.6, 1205.0], [81.7, 1208.0], [81.8, 1210.0], [81.9, 1210.0], [82.0, 1213.0], [82.1, 1213.0], [82.2, 1215.0], [82.3, 1217.0], [82.4, 1218.0], [82.5, 1220.0], [82.6, 1220.0], [82.7, 1221.0], [82.8, 1222.0], [82.9, 1222.0], [83.0, 1224.0], [83.1, 1225.0], [83.2, 1231.0], [83.3, 1233.0], [83.4, 1234.0], [83.5, 1234.0], [83.6, 1234.0], [83.7, 1236.0], [83.8, 1238.0], [83.9, 1239.0], [84.0, 1239.0], [84.1, 1239.0], [84.2, 1241.0], [84.3, 1243.0], [84.4, 1243.0], [84.5, 1244.0], [84.6, 1245.0], [84.7, 1246.0], [84.8, 1247.0], [84.9, 1247.0], [85.0, 1248.0], [85.1, 1248.0], [85.2, 1253.0], [85.3, 1254.0], [85.4, 1254.0], [85.5, 1256.0], [85.6, 1259.0], [85.7, 1260.0], [85.8, 1263.0], [85.9, 1263.0], [86.0, 1264.0], [86.1, 1267.0], [86.2, 1270.0], [86.3, 1271.0], [86.4, 1271.0], [86.5, 1273.0], [86.6, 1274.0], [86.7, 1275.0], [86.8, 1276.0], [86.9, 1280.0], [87.0, 1280.0], [87.1, 1283.0], [87.2, 1285.0], [87.3, 1285.0], [87.4, 1286.0], [87.5, 1287.0], [87.6, 1288.0], [87.7, 1288.0], [87.8, 1289.0], [87.9, 1290.0], [88.0, 1290.0], [88.1, 1291.0], [88.2, 1292.0], [88.3, 1295.0], [88.4, 1295.0], [88.5, 1298.0], [88.6, 1303.0], [88.7, 1305.0], [88.8, 1306.0], [88.9, 1306.0], [89.0, 1310.0], [89.1, 1316.0], [89.2, 1317.0], [89.3, 1319.0], [89.4, 1319.0], [89.5, 1319.0], [89.6, 1320.0], [89.7, 1321.0], [89.8, 1323.0], [89.9, 1324.0], [90.0, 1324.0], [90.1, 1327.0], [90.2, 1328.0], [90.3, 1329.0], [90.4, 1330.0], [90.5, 1332.0], [90.6, 1333.0], [90.7, 1333.0], [90.8, 1333.0], [90.9, 1333.0], [91.0, 1334.0], [91.1, 1334.0], [91.2, 1335.0], [91.3, 1337.0], [91.4, 1338.0], [91.5, 1340.0], [91.6, 1343.0], [91.7, 1344.0], [91.8, 1345.0], [91.9, 1345.0], [92.0, 1349.0], [92.1, 1350.0], [92.2, 1350.0], [92.3, 1352.0], [92.4, 1352.0], [92.5, 1353.0], [92.6, 1354.0], [92.7, 1354.0], [92.8, 1358.0], [92.9, 1359.0], [93.0, 1360.0], [93.1, 1361.0], [93.2, 1361.0], [93.3, 1364.0], [93.4, 1376.0], [93.5, 1385.0], [93.6, 1388.0], [93.7, 1389.0], [93.8, 1390.0], [93.9, 1391.0], [94.0, 1395.0], [94.1, 1397.0], [94.2, 1399.0], [94.3, 1399.0], [94.4, 1401.0], [94.5, 1401.0], [94.6, 1407.0], [94.7, 1410.0], [94.8, 1412.0], [94.9, 1419.0], [95.0, 1422.0], [95.1, 1423.0], [95.2, 1423.0], [95.3, 1423.0], [95.4, 1426.0], [95.5, 1430.0], [95.6, 1436.0], [95.7, 1437.0], [95.8, 1440.0], [95.9, 1441.0], [96.0, 1441.0], [96.1, 1447.0], [96.2, 1454.0], [96.3, 1455.0], [96.4, 1456.0], [96.5, 1457.0], [96.6, 1458.0], [96.7, 1463.0], [96.8, 1465.0], [96.9, 1467.0], [97.0, 1467.0], [97.1, 1473.0], [97.2, 1480.0], [97.3, 1483.0], [97.4, 1484.0], [97.5, 1486.0], [97.6, 1490.0], [97.7, 1491.0], [97.8, 1496.0], [97.9, 1504.0], [98.0, 1510.0], [98.1, 1511.0], [98.2, 1514.0], [98.3, 1519.0], [98.4, 1520.0], [98.5, 1534.0], [98.6, 1553.0], [98.7, 1553.0], [98.8, 1555.0], [98.9, 1559.0], [99.0, 1564.0], [99.1, 1572.0], [99.2, 1573.0], [99.3, 1581.0], [99.4, 1588.0], [99.5, 1604.0], [99.6, 1637.0], [99.7, 1688.0], [99.8, 1699.0], [99.9, 1729.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 173.0, "series": [{"data": [[0.0, 32.0], [600.0, 173.0], [700.0, 123.0], [200.0, 83.0], [800.0, 119.0], [900.0, 47.0], [1000.0, 30.0], [1100.0, 11.0], [300.0, 92.0], [1200.0, 2.0], [100.0, 75.0], [400.0, 93.0], [500.0, 120.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 34.0], [600.0, 62.0], [700.0, 64.0], [200.0, 64.0], [800.0, 56.0], [900.0, 72.0], [1000.0, 101.0], [1100.0, 98.0], [300.0, 89.0], [1200.0, 76.0], [1300.0, 58.0], [1400.0, 35.0], [1500.0, 16.0], [100.0, 61.0], [400.0, 57.0], [1600.0, 4.0], [1700.0, 1.0], [500.0, 52.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1298.0, "series": [{"data": [[0.0, 681.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1298.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 21.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 237.52450000000013, "minX": 1.71673506E12, "maxY": 237.52450000000013, "series": [{"data": [[1.71673506E12, 237.52450000000013]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673506E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 1573.0, "series": [{"data": [[2.0, 362.0], [3.0, 461.0], [4.0, 480.0], [5.0, 533.0], [6.0, 193.0], [7.0, 197.0], [8.0, 89.0], [9.0, 219.0], [10.0, 359.0], [11.0, 208.0], [13.0, 354.0], [14.0, 435.0], [15.0, 311.0], [16.0, 232.0], [17.0, 261.0], [19.0, 411.5], [20.0, 467.0], [22.0, 542.0], [23.0, 382.0], [24.0, 819.0], [25.0, 437.0], [26.0, 341.0], [27.0, 558.0], [28.0, 115.33333333333334], [29.0, 77.0], [30.0, 225.33333333333334], [31.0, 137.2], [33.0, 92.11111111111111], [32.0, 505.0], [35.0, 287.0], [34.0, 412.0], [37.0, 564.0], [36.0, 564.0], [39.0, 529.0], [38.0, 402.0], [40.0, 182.0], [41.0, 294.0], [43.0, 404.0], [42.0, 316.0], [45.0, 251.33333333333334], [44.0, 241.66666666666666], [47.0, 218.0], [46.0, 166.25], [49.0, 169.8], [48.0, 155.5], [50.0, 272.0], [51.0, 385.0], [53.0, 174.5], [52.0, 280.5], [55.0, 383.0], [54.0, 431.0], [56.0, 293.0], [57.0, 300.33333333333337], [58.0, 161.0], [59.0, 412.0], [61.0, 261.0], [63.0, 685.0], [62.0, 352.0], [65.0, 233.625], [66.0, 227.0], [69.0, 249.33333333333331], [71.0, 302.5], [70.0, 240.4], [68.0, 478.5], [73.0, 450.0], [75.0, 268.0], [74.0, 471.0], [72.0, 424.0], [79.0, 271.0], [78.0, 286.25], [77.0, 883.0], [76.0, 394.0], [80.0, 418.5], [83.0, 250.25], [82.0, 437.0], [81.0, 497.0], [84.0, 391.0], [86.0, 235.0], [87.0, 365.0], [85.0, 645.0], [88.0, 302.0], [90.0, 540.3333333333334], [91.0, 531.0], [95.0, 342.5], [94.0, 508.0], [93.0, 423.0], [92.0, 474.0], [96.0, 307.5], [98.0, 166.66666666666666], [97.0, 248.0], [99.0, 520.3333333333334], [101.0, 262.5714285714286], [102.0, 259.0], [103.0, 238.0], [100.0, 427.0], [104.0, 296.6], [105.0, 279.2857142857143], [107.0, 392.5], [106.0, 486.0], [108.0, 265.0], [110.0, 359.0], [109.0, 513.6666666666666], [111.0, 327.3333333333333], [112.0, 274.0], [114.0, 339.1666666666667], [113.0, 203.0], [116.0, 427.6666666666667], [118.0, 425.6666666666667], [119.0, 425.0], [120.0, 516.5], [123.0, 417.0], [122.0, 531.0], [121.0, 425.0], [125.0, 462.0], [127.0, 499.5], [126.0, 415.33333333333337], [124.0, 608.0], [129.0, 201.0], [130.0, 338.625], [128.0, 289.6666666666667], [132.0, 394.0], [131.0, 369.5], [133.0, 360.0], [134.0, 510.5], [135.0, 319.25], [136.0, 441.66666666666663], [138.0, 465.0], [140.0, 546.5], [139.0, 509.0], [141.0, 305.4], [143.0, 364.5], [142.0, 346.6666666666667], [137.0, 723.0], [147.0, 363.8333333333333], [146.0, 431.33333333333337], [148.0, 351.6666666666667], [149.0, 384.5], [150.0, 477.0], [151.0, 593.0], [145.0, 574.0], [144.0, 704.0], [159.0, 336.1666666666667], [158.0, 269.6666666666667], [157.0, 428.0], [155.0, 383.25], [156.0, 431.5], [154.0, 582.0], [153.0, 628.0], [152.0, 519.0], [160.0, 318.2], [161.0, 315.6666666666667], [162.0, 298.5], [164.0, 359.0], [165.0, 331.0], [166.0, 270.0], [167.0, 435.0], [168.0, 266.0], [170.0, 453.0], [175.0, 585.5], [173.0, 646.0], [172.0, 596.0], [171.0, 701.0], [169.0, 612.7500000000001], [176.0, 415.7142857142857], [178.0, 341.0], [177.0, 407.7142857142857], [181.0, 506.5], [182.0, 422.6666666666667], [183.0, 671.0], [180.0, 641.0], [179.0, 665.0], [185.0, 463.0], [186.0, 396.25], [187.0, 513.25], [188.0, 360.5], [191.0, 495.25], [190.0, 605.0], [189.0, 586.0], [184.0, 786.0], [192.0, 441.1666666666667], [194.0, 439.5], [199.0, 698.0], [198.0, 628.0], [197.0, 739.0], [196.0, 603.0], [195.0, 533.0], [193.0, 616.0], [207.0, 675.0], [206.0, 740.0], [205.0, 582.0], [204.0, 819.0], [203.0, 589.0], [202.0, 567.0], [201.0, 637.0], [200.0, 617.0], [211.0, 532.5], [215.0, 482.8], [214.0, 510.5], [213.0, 723.0], [212.0, 698.0], [210.0, 657.0], [209.0, 805.0], [208.0, 727.0], [217.0, 444.6666666666667], [219.0, 493.0], [220.0, 578.0], [221.0, 530.5], [222.0, 417.5], [223.0, 713.5], [218.0, 668.0], [216.0, 623.0], [227.0, 487.0], [229.0, 594.8], [228.0, 637.0], [231.0, 583.0], [230.0, 686.5], [226.0, 607.0], [224.0, 862.0], [233.0, 521.6], [234.0, 505.3333333333333], [232.0, 562.0], [239.0, 539.6666666666666], [238.0, 525.0], [237.0, 697.0], [236.0, 584.0], [235.0, 610.0], [240.0, 574.0], [241.0, 511.3333333333333], [243.0, 523.0], [244.0, 589.6666666666666], [245.0, 504.8], [247.0, 592.6666666666666], [246.0, 705.5], [242.0, 745.0], [249.0, 621.5], [252.0, 634.0], [251.0, 536.5], [250.0, 739.5], [255.0, 626.0], [254.0, 673.0], [253.0, 717.5], [248.0, 871.0], [270.0, 625.0], [257.0, 632.5], [256.0, 617.0], [258.0, 564.0], [259.0, 591.5], [265.0, 802.0], [267.0, 706.5], [263.0, 781.0], [262.0, 681.0], [261.0, 639.0], [260.0, 1109.0], [264.0, 611.0], [271.0, 619.0], [269.0, 640.0], [268.0, 543.0], [275.0, 693.6666666666666], [279.0, 677.4], [278.0, 703.0909090909091], [280.0, 748.0], [281.0, 841.0], [283.0, 629.0], [282.0, 1008.0], [277.0, 588.75], [276.0, 713.3333333333334], [274.0, 730.0], [273.0, 542.0], [272.0, 682.0], [287.0, 668.5714285714286], [286.0, 632.5555555555555], [285.0, 669.0], [284.0, 815.0], [300.0, 609.5], [288.0, 685.0], [289.0, 898.0], [292.0, 575.0], [294.0, 514.0], [299.0, 624.6666666666666], [298.0, 613.0], [302.0, 537.0], [301.0, 605.0], [291.0, 575.0], [290.0, 745.0], [318.0, 860.0], [305.0, 619.0], [307.0, 773.0], [306.0, 796.0], [304.0, 766.6875000000001], [311.0, 721.5], [310.0, 689.0], [309.0, 696.0], [308.0, 883.0], [314.0, 659.0], [315.0, 710.0], [319.0, 648.5], [313.0, 719.0], [312.0, 886.0], [317.0, 897.0], [316.0, 641.0], [323.0, 735.0], [321.0, 651.2857142857143], [320.0, 684.6666666666666], [322.0, 795.3333333333334], [326.0, 722.6666666666666], [324.0, 881.0], [327.0, 765.0], [333.0, 670.5], [332.0, 666.75], [335.0, 675.0], [331.0, 743.0], [330.0, 857.0], [329.0, 843.0], [328.0, 866.0], [334.0, 918.0], [350.0, 708.0], [337.0, 910.5], [339.0, 779.5], [338.0, 898.0], [342.0, 895.5], [340.0, 708.0], [343.0, 669.8000000000001], [336.0, 564.0], [344.0, 667.5], [346.0, 724.5], [345.0, 743.0], [347.0, 783.0], [351.0, 813.0], [349.0, 848.0], [348.0, 866.0], [365.0, 715.5], [354.0, 748.3333333333334], [353.0, 746.6666666666666], [359.0, 1155.0], [352.0, 709.0], [355.0, 755.3333333333334], [361.0, 718.3333333333334], [363.0, 757.0], [362.0, 703.6], [358.0, 772.5], [357.0, 801.0], [356.0, 834.0], [364.0, 833.7142857142857], [366.0, 759.7500000000001], [367.0, 737.0], [360.0, 917.0], [381.0, 820.6666666666667], [372.0, 808.0], [373.0, 859.0], [375.0, 969.0], [369.0, 957.0], [368.0, 1045.0], [374.0, 921.0], [371.0, 766.5], [370.0, 761.0], [378.0, 875.0], [382.0, 923.6666666666666], [380.0, 845.0], [379.0, 824.3333333333334], [383.0, 982.0], [377.0, 746.0], [376.0, 1004.0], [391.0, 803.0], [388.0, 920.75], [390.0, 872.5714285714287], [389.0, 951.5], [393.0, 860.5000000000001], [392.0, 826.5714285714287], [394.0, 819.0], [395.0, 711.0], [396.0, 786.3333333333334], [386.0, 822.0], [385.0, 889.0], [384.0, 876.0], [397.0, 832.0], [399.0, 883.0], [398.0, 884.6666666666666], [412.0, 959.5], [401.0, 884.5], [400.0, 749.0], [407.0, 938.0], [406.0, 901.0], [403.0, 914.5], [402.0, 824.3333333333333], [414.0, 938.0], [415.0, 776.5], [409.0, 1058.0], [408.0, 850.0], [413.0, 905.0], [411.0, 984.0], [410.0, 904.0], [428.0, 801.0], [416.0, 816.5], [420.0, 874.0], [425.0, 953.9999999999999], [424.0, 1079.3333333333333], [426.0, 970.5714285714286], [427.0, 1085.5], [419.0, 1058.0], [418.0, 1018.0], [417.0, 786.0], [423.0, 875.5], [421.0, 940.7142857142857], [1.0, 499.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[226.9750000000001, 571.3769999999995]], "isOverall": false, "label": "Create pharmacy-Aggregated", "isController": false}, {"data": [[21.0, 45.8], [22.0, 62.0], [23.0, 52.6], [24.0, 37.0], [25.0, 65.66666666666667], [27.0, 42.0], [29.0, 75.4], [30.0, 97.5], [32.0, 94.0], [33.0, 105.5], [34.0, 87.0], [35.0, 82.0], [37.0, 93.0], [38.0, 84.5], [39.0, 94.0], [41.0, 100.0], [43.0, 93.0], [44.0, 111.0], [45.0, 130.5], [47.0, 126.66666666666667], [46.0, 148.66666666666666], [48.0, 117.0], [49.0, 149.0], [50.0, 116.0], [51.0, 97.0], [52.0, 145.5], [53.0, 145.33333333333334], [55.0, 147.0], [54.0, 1436.0], [57.0, 133.0], [61.0, 179.5], [62.0, 116.0], [63.0, 174.0], [64.0, 171.33333333333334], [65.0, 181.0], [66.0, 150.0], [67.0, 221.0], [68.0, 170.0], [69.0, 145.25], [70.0, 135.0], [73.0, 236.0], [74.0, 229.0], [75.0, 188.0], [76.0, 188.0], [78.0, 192.5], [79.0, 195.0], [77.0, 213.33333333333334], [80.0, 169.5], [82.0, 230.0], [83.0, 198.5], [84.0, 231.0], [85.0, 228.0], [87.0, 200.0], [91.0, 255.0], [93.0, 247.0], [95.0, 232.25], [94.0, 1401.0], [96.0, 472.75], [97.0, 256.6], [98.0, 254.33333333333334], [100.0, 893.5], [101.0, 253.66666666666666], [103.0, 862.25], [102.0, 198.0], [104.0, 285.2857142857143], [105.0, 286.25], [106.0, 247.0], [107.0, 285.0], [108.0, 276.0], [109.0, 847.5], [110.0, 327.0], [111.0, 285.0], [114.0, 481.625], [113.0, 253.0], [116.0, 361.0], [117.0, 325.0], [118.0, 343.0], [123.0, 322.5], [124.0, 993.6666666666666], [126.0, 309.25], [127.0, 304.2], [128.0, 349.3333333333333], [129.0, 365.25], [130.0, 358.0], [131.0, 298.0], [132.0, 370.0], [134.0, 327.0], [133.0, 337.0], [135.0, 351.6666666666667], [136.0, 351.0], [138.0, 394.0], [139.0, 723.6666666666667], [141.0, 368.3333333333333], [142.0, 383.75], [143.0, 1352.0], [146.0, 391.4], [145.0, 673.6666666666667], [147.0, 381.4], [148.0, 406.25], [150.0, 462.0], [151.0, 348.0], [149.0, 1128.0], [158.0, 396.5], [155.0, 465.0], [154.0, 451.0], [157.0, 652.3333333333333], [159.0, 430.8], [161.0, 349.3333333333333], [162.0, 404.5], [163.0, 351.0], [164.0, 335.0], [165.0, 422.0], [167.0, 438.0], [169.0, 1074.5], [170.0, 915.25], [171.0, 365.0], [172.0, 580.0], [174.0, 573.0], [175.0, 432.75], [176.0, 482.66666666666663], [177.0, 410.7142857142857], [178.0, 506.5], [179.0, 517.0], [181.0, 860.0], [182.0, 739.0], [180.0, 1310.0], [185.0, 788.5714285714286], [184.0, 607.0], [186.0, 681.2], [187.0, 1005.0], [188.0, 527.0], [191.0, 530.0], [190.0, 561.0], [189.0, 849.0], [192.0, 492.83333333333337], [193.0, 460.0], [194.0, 430.0], [198.0, 705.0], [199.0, 631.0], [196.0, 1170.3333333333333], [195.0, 1240.5], [205.0, 446.0], [203.0, 609.0], [207.0, 482.0], [206.0, 1243.0], [204.0, 1100.0], [202.0, 1573.0], [201.0, 1270.0], [200.0, 1369.0], [208.0, 1040.6666666666667], [210.0, 705.3333333333334], [211.0, 595.0], [212.0, 559.0], [213.0, 869.0], [215.0, 942.4], [214.0, 491.0], [217.0, 821.0], [219.0, 565.75], [221.0, 1026.0], [220.0, 799.0], [222.0, 482.3333333333333], [223.0, 670.0], [216.0, 1220.0], [224.0, 838.5], [228.0, 498.5], [231.0, 1138.4], [230.0, 1282.5], [232.0, 854.6666666666666], [233.0, 510.0], [234.0, 937.0], [235.0, 790.5], [239.0, 634.0], [238.0, 845.6666666666666], [236.0, 1224.0], [240.0, 592.0], [241.0, 1008.0], [243.0, 780.25], [242.0, 974.0], [244.0, 629.0], [245.0, 625.0], [246.0, 1015.0], [247.0, 776.75], [248.0, 759.0], [250.0, 851.0], [252.0, 580.5], [251.0, 884.25], [255.0, 915.0], [254.0, 1195.5], [249.0, 1127.0], [258.0, 629.0], [257.0, 724.0], [256.0, 1457.0], [265.0, 937.5], [268.0, 1215.0], [259.0, 1553.0], [270.0, 699.0], [271.0, 1209.5], [264.0, 1178.0], [263.0, 1128.3333333333333], [262.0, 1028.0], [261.0, 1342.6666666666667], [274.0, 751.5], [279.0, 798.9], [278.0, 853.4], [277.0, 769.2], [276.0, 1174.4], [275.0, 905.0], [280.0, 869.0], [282.0, 611.0], [281.0, 1422.0], [283.0, 1332.0], [284.0, 918.0], [287.0, 817.5], [285.0, 781.2], [286.0, 1125.25], [290.0, 689.0], [288.0, 1008.4], [291.0, 1117.0], [300.0, 739.0], [301.0, 829.2222222222222], [302.0, 852.0], [292.0, 737.0], [293.0, 858.0], [294.0, 966.0], [295.0, 537.0], [296.0, 844.0], [297.0, 1030.0], [298.0, 1080.0], [299.0, 805.5], [307.0, 861.6666666666666], [308.0, 822.0], [304.0, 965.25], [306.0, 1115.5], [311.0, 1058.4285714285713], [312.0, 1071.0], [319.0, 1018.2], [313.0, 995.4], [314.0, 834.6666666666666], [315.0, 1165.0], [316.0, 859.5], [318.0, 941.0], [323.0, 1088.3333333333333], [320.0, 925.5555555555555], [321.0, 958.6666666666666], [322.0, 1141.1666666666665], [326.0, 1397.0], [324.0, 1097.25], [327.0, 1165.0], [332.0, 827.3333333333334], [333.0, 1121.6], [334.0, 918.0], [335.0, 1147.2], [330.0, 1327.625], [329.0, 1140.0], [328.0, 1321.0], [337.0, 1242.75], [336.0, 1002.5], [339.0, 931.5], [338.0, 1239.75], [348.0, 1238.0], [349.0, 957.5], [350.0, 1148.6666666666667], [340.0, 973.5], [341.0, 727.5], [342.0, 1014.9090909090909], [343.0, 1003.2222222222223], [344.0, 1044.1999999999998], [346.0, 1251.5], [345.0, 1211.25], [354.0, 1158.0], [352.0, 1056.2], [355.0, 721.0], [364.0, 890.2500000000001], [365.0, 987.1666666666666], [366.0, 1132.7142857142856], [367.0, 1294.5], [362.0, 831.6666666666666], [361.0, 956.0], [360.0, 1118.25], [359.0, 988.0], [358.0, 945.0], [357.0, 921.0], [356.0, 1127.0], [363.0, 1051.6], [380.0, 1009.3333333333334], [370.0, 1202.0], [371.0, 1139.25], [374.0, 1231.0], [372.0, 1267.5], [375.0, 1267.0], [378.0, 1175.0], [379.0, 1070.8333333333335], [381.0, 1148.75], [377.0, 1019.6666666666666], [383.0, 942.0], [376.0, 1308.5], [382.0, 822.0], [385.0, 1234.3333333333333], [384.0, 1217.0], [387.0, 1029.5], [396.0, 1240.5], [397.0, 1141.0], [398.0, 1197.25], [399.0, 1130.0], [388.0, 796.5], [389.0, 990.1111111111111], [390.0, 1098.75], [391.0, 1062.8571428571427], [393.0, 1083.75], [395.0, 1214.3076923076922], [394.0, 1273.8], [403.0, 1182.0], [400.0, 1065.4], [401.0, 1058.1000000000001], [402.0, 1202.5], [406.0, 1185.2222222222224], [407.0, 1288.3333333333333], [410.0, 1437.0], [411.0, 1407.0], [412.0, 1164.3333333333333], [415.0, 1266.5], [414.0, 1028.0], [418.0, 1045.6666666666667], [417.0, 1197.0], [419.0, 1184.0], [420.0, 1225.7499999999998], [421.0, 1013.0], [423.0, 1080.0], [424.0, 1094.4], [425.0, 1199.75], [426.0, 1135.8], [427.0, 1276.5]], "isOverall": false, "label": "Get drug suggestions", "isController": false}, {"data": [[248.07399999999978, 792.8639999999991]], "isOverall": false, "label": "Get drug suggestions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 428.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 23996.833333333332, "minX": 1.71673506E12, "maxY": 74416.66666666667, "series": [{"data": [[1.71673506E12, 23996.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71673506E12, 74416.66666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673506E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 571.3769999999995, "minX": 1.71673506E12, "maxY": 792.8639999999991, "series": [{"data": [[1.71673506E12, 571.3769999999995]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673506E12, 792.8639999999991]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673506E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 565.7389999999994, "minX": 1.71673506E12, "maxY": 779.051000000001, "series": [{"data": [[1.71673506E12, 565.7389999999994]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673506E12, 779.051000000001]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673506E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.71673506E12, "maxY": 0.5840000000000004, "series": [{"data": [[1.71673506E12, 0.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673506E12, 0.5840000000000004]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673506E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.71673506E12, "maxY": 1729.0, "series": [{"data": [[1.71673506E12, 1729.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71673506E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71673506E12, 1195.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71673506E12, 1509.94]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71673506E12, 665.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71673506E12, 1324.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673506E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 378.0, "minX": 299.0, "maxY": 1031.0, "series": [{"data": [[299.0, 388.0], [317.0, 857.0], [325.0, 378.0], [354.0, 662.5], [406.0, 1031.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 406.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 368.0, "minX": 299.0, "maxY": 1020.5, "series": [{"data": [[299.0, 384.0], [317.0, 850.0], [325.0, 368.0], [354.0, 658.0], [406.0, 1020.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 406.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.71673506E12, "maxY": 33.333333333333336, "series": [{"data": [[1.71673506E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673506E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.71673506E12, "maxY": 33.333333333333336, "series": [{"data": [[1.71673506E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673506E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.71673506E12, "maxY": 16.666666666666668, "series": [{"data": [[1.71673506E12, 16.666666666666668]], "isOverall": false, "label": "Create pharmacy-success", "isController": false}, {"data": [[1.71673506E12, 16.666666666666668]], "isOverall": false, "label": "Get drug suggestions-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673506E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.71673506E12, "maxY": 33.333333333333336, "series": [{"data": [[1.71673506E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673506E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

