/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4227.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 1.0], [6.9, 2.0], [7.0, 2.0], [7.1, 2.0], [7.2, 8.0], [7.3, 51.0], [7.4, 59.0], [7.5, 62.0], [7.6, 67.0], [7.7, 69.0], [7.8, 72.0], [7.9, 74.0], [8.0, 77.0], [8.1, 79.0], [8.2, 79.0], [8.3, 82.0], [8.4, 88.0], [8.5, 90.0], [8.6, 92.0], [8.7, 94.0], [8.8, 96.0], [8.9, 103.0], [9.0, 104.0], [9.1, 106.0], [9.2, 110.0], [9.3, 112.0], [9.4, 120.0], [9.5, 122.0], [9.6, 125.0], [9.7, 127.0], [9.8, 134.0], [9.9, 141.0], [10.0, 146.0], [10.1, 148.0], [10.2, 157.0], [10.3, 160.0], [10.4, 162.0], [10.5, 167.0], [10.6, 167.0], [10.7, 170.0], [10.8, 177.0], [10.9, 180.0], [11.0, 184.0], [11.1, 185.0], [11.2, 188.0], [11.3, 190.0], [11.4, 195.0], [11.5, 196.0], [11.6, 201.0], [11.7, 203.0], [11.8, 204.0], [11.9, 206.0], [12.0, 209.0], [12.1, 212.0], [12.2, 214.0], [12.3, 217.0], [12.4, 224.0], [12.5, 233.0], [12.6, 236.0], [12.7, 242.0], [12.8, 245.0], [12.9, 248.0], [13.0, 254.0], [13.1, 255.0], [13.2, 259.0], [13.3, 261.0], [13.4, 263.0], [13.5, 269.0], [13.6, 271.0], [13.7, 275.0], [13.8, 276.0], [13.9, 278.0], [14.0, 280.0], [14.1, 283.0], [14.2, 286.0], [14.3, 290.0], [14.4, 294.0], [14.5, 302.0], [14.6, 309.0], [14.7, 311.0], [14.8, 315.0], [14.9, 318.0], [15.0, 322.0], [15.1, 323.0], [15.2, 326.0], [15.3, 331.0], [15.4, 333.0], [15.5, 338.0], [15.6, 346.0], [15.7, 359.0], [15.8, 363.0], [15.9, 365.0], [16.0, 367.0], [16.1, 369.0], [16.2, 371.0], [16.3, 373.0], [16.4, 377.0], [16.5, 379.0], [16.6, 387.0], [16.7, 390.0], [16.8, 393.0], [16.9, 396.0], [17.0, 398.0], [17.1, 401.0], [17.2, 409.0], [17.3, 411.0], [17.4, 413.0], [17.5, 415.0], [17.6, 420.0], [17.7, 422.0], [17.8, 425.0], [17.9, 429.0], [18.0, 434.0], [18.1, 436.0], [18.2, 437.0], [18.3, 439.0], [18.4, 442.0], [18.5, 445.0], [18.6, 448.0], [18.7, 450.0], [18.8, 455.0], [18.9, 459.0], [19.0, 462.0], [19.1, 466.0], [19.2, 470.0], [19.3, 474.0], [19.4, 476.0], [19.5, 476.0], [19.6, 480.0], [19.7, 483.0], [19.8, 486.0], [19.9, 488.0], [20.0, 497.0], [20.1, 500.0], [20.2, 506.0], [20.3, 509.0], [20.4, 511.0], [20.5, 514.0], [20.6, 516.0], [20.7, 519.0], [20.8, 524.0], [20.9, 527.0], [21.0, 528.0], [21.1, 536.0], [21.2, 542.0], [21.3, 547.0], [21.4, 549.0], [21.5, 557.0], [21.6, 562.0], [21.7, 565.0], [21.8, 567.0], [21.9, 569.0], [22.0, 570.0], [22.1, 573.0], [22.2, 576.0], [22.3, 578.0], [22.4, 580.0], [22.5, 583.0], [22.6, 586.0], [22.7, 587.0], [22.8, 591.0], [22.9, 596.0], [23.0, 598.0], [23.1, 600.0], [23.2, 602.0], [23.3, 604.0], [23.4, 607.0], [23.5, 615.0], [23.6, 619.0], [23.7, 620.0], [23.8, 622.0], [23.9, 626.0], [24.0, 629.0], [24.1, 630.0], [24.2, 630.0], [24.3, 633.0], [24.4, 634.0], [24.5, 636.0], [24.6, 640.0], [24.7, 641.0], [24.8, 647.0], [24.9, 652.0], [25.0, 656.0], [25.1, 658.0], [25.2, 658.0], [25.3, 659.0], [25.4, 660.0], [25.5, 662.0], [25.6, 665.0], [25.7, 674.0], [25.8, 675.0], [25.9, 682.0], [26.0, 687.0], [26.1, 688.0], [26.2, 692.0], [26.3, 694.0], [26.4, 697.0], [26.5, 698.0], [26.6, 701.0], [26.7, 702.0], [26.8, 704.0], [26.9, 707.0], [27.0, 709.0], [27.1, 713.0], [27.2, 717.0], [27.3, 721.0], [27.4, 722.0], [27.5, 724.0], [27.6, 725.0], [27.7, 729.0], [27.8, 731.0], [27.9, 731.0], [28.0, 732.0], [28.1, 734.0], [28.2, 735.0], [28.3, 737.0], [28.4, 740.0], [28.5, 743.0], [28.6, 744.0], [28.7, 748.0], [28.8, 750.0], [28.9, 753.0], [29.0, 754.0], [29.1, 756.0], [29.2, 758.0], [29.3, 759.0], [29.4, 762.0], [29.5, 762.0], [29.6, 763.0], [29.7, 765.0], [29.8, 767.0], [29.9, 768.0], [30.0, 770.0], [30.1, 772.0], [30.2, 775.0], [30.3, 777.0], [30.4, 778.0], [30.5, 780.0], [30.6, 782.0], [30.7, 783.0], [30.8, 784.0], [30.9, 786.0], [31.0, 790.0], [31.1, 791.0], [31.2, 795.0], [31.3, 796.0], [31.4, 799.0], [31.5, 799.0], [31.6, 803.0], [31.7, 805.0], [31.8, 808.0], [31.9, 809.0], [32.0, 811.0], [32.1, 815.0], [32.2, 815.0], [32.3, 817.0], [32.4, 819.0], [32.5, 820.0], [32.6, 823.0], [32.7, 824.0], [32.8, 826.0], [32.9, 826.0], [33.0, 827.0], [33.1, 827.0], [33.2, 829.0], [33.3, 832.0], [33.4, 836.0], [33.5, 837.0], [33.6, 841.0], [33.7, 843.0], [33.8, 846.0], [33.9, 849.0], [34.0, 852.0], [34.1, 858.0], [34.2, 860.0], [34.3, 862.0], [34.4, 864.0], [34.5, 867.0], [34.6, 869.0], [34.7, 874.0], [34.8, 875.0], [34.9, 876.0], [35.0, 878.0], [35.1, 880.0], [35.2, 886.0], [35.3, 889.0], [35.4, 893.0], [35.5, 894.0], [35.6, 898.0], [35.7, 900.0], [35.8, 904.0], [35.9, 904.0], [36.0, 909.0], [36.1, 911.0], [36.2, 913.0], [36.3, 915.0], [36.4, 917.0], [36.5, 919.0], [36.6, 921.0], [36.7, 924.0], [36.8, 926.0], [36.9, 928.0], [37.0, 930.0], [37.1, 933.0], [37.2, 933.0], [37.3, 935.0], [37.4, 937.0], [37.5, 938.0], [37.6, 940.0], [37.7, 940.0], [37.8, 941.0], [37.9, 943.0], [38.0, 945.0], [38.1, 948.0], [38.2, 950.0], [38.3, 952.0], [38.4, 954.0], [38.5, 955.0], [38.6, 958.0], [38.7, 962.0], [38.8, 964.0], [38.9, 964.0], [39.0, 968.0], [39.1, 969.0], [39.2, 972.0], [39.3, 975.0], [39.4, 980.0], [39.5, 981.0], [39.6, 984.0], [39.7, 988.0], [39.8, 990.0], [39.9, 991.0], [40.0, 994.0], [40.1, 998.0], [40.2, 1000.0], [40.3, 1002.0], [40.4, 1003.0], [40.5, 1005.0], [40.6, 1006.0], [40.7, 1009.0], [40.8, 1013.0], [40.9, 1015.0], [41.0, 1016.0], [41.1, 1018.0], [41.2, 1019.0], [41.3, 1021.0], [41.4, 1023.0], [41.5, 1025.0], [41.6, 1029.0], [41.7, 1033.0], [41.8, 1034.0], [41.9, 1037.0], [42.0, 1041.0], [42.1, 1045.0], [42.2, 1046.0], [42.3, 1048.0], [42.4, 1050.0], [42.5, 1051.0], [42.6, 1053.0], [42.7, 1057.0], [42.8, 1058.0], [42.9, 1060.0], [43.0, 1063.0], [43.1, 1063.0], [43.2, 1067.0], [43.3, 1069.0], [43.4, 1071.0], [43.5, 1073.0], [43.6, 1074.0], [43.7, 1076.0], [43.8, 1078.0], [43.9, 1080.0], [44.0, 1080.0], [44.1, 1082.0], [44.2, 1085.0], [44.3, 1087.0], [44.4, 1090.0], [44.5, 1091.0], [44.6, 1091.0], [44.7, 1093.0], [44.8, 1095.0], [44.9, 1096.0], [45.0, 1098.0], [45.1, 1103.0], [45.2, 1104.0], [45.3, 1104.0], [45.4, 1105.0], [45.5, 1106.0], [45.6, 1106.0], [45.7, 1108.0], [45.8, 1112.0], [45.9, 1113.0], [46.0, 1117.0], [46.1, 1118.0], [46.2, 1122.0], [46.3, 1124.0], [46.4, 1126.0], [46.5, 1127.0], [46.6, 1128.0], [46.7, 1130.0], [46.8, 1131.0], [46.9, 1134.0], [47.0, 1136.0], [47.1, 1137.0], [47.2, 1139.0], [47.3, 1141.0], [47.4, 1143.0], [47.5, 1144.0], [47.6, 1147.0], [47.7, 1148.0], [47.8, 1151.0], [47.9, 1153.0], [48.0, 1155.0], [48.1, 1156.0], [48.2, 1157.0], [48.3, 1160.0], [48.4, 1162.0], [48.5, 1162.0], [48.6, 1163.0], [48.7, 1165.0], [48.8, 1166.0], [48.9, 1168.0], [49.0, 1169.0], [49.1, 1171.0], [49.2, 1172.0], [49.3, 1174.0], [49.4, 1176.0], [49.5, 1177.0], [49.6, 1178.0], [49.7, 1180.0], [49.8, 1182.0], [49.9, 1184.0], [50.0, 1185.0], [50.1, 1186.0], [50.2, 1187.0], [50.3, 1189.0], [50.4, 1190.0], [50.5, 1192.0], [50.6, 1192.0], [50.7, 1193.0], [50.8, 1193.0], [50.9, 1195.0], [51.0, 1196.0], [51.1, 1196.0], [51.2, 1197.0], [51.3, 1198.0], [51.4, 1199.0], [51.5, 1200.0], [51.6, 1202.0], [51.7, 1202.0], [51.8, 1205.0], [51.9, 1205.0], [52.0, 1207.0], [52.1, 1208.0], [52.2, 1210.0], [52.3, 1211.0], [52.4, 1213.0], [52.5, 1215.0], [52.6, 1216.0], [52.7, 1217.0], [52.8, 1217.0], [52.9, 1218.0], [53.0, 1219.0], [53.1, 1220.0], [53.2, 1221.0], [53.3, 1222.0], [53.4, 1223.0], [53.5, 1223.0], [53.6, 1225.0], [53.7, 1226.0], [53.8, 1227.0], [53.9, 1230.0], [54.0, 1231.0], [54.1, 1232.0], [54.2, 1234.0], [54.3, 1235.0], [54.4, 1236.0], [54.5, 1237.0], [54.6, 1239.0], [54.7, 1239.0], [54.8, 1240.0], [54.9, 1241.0], [55.0, 1242.0], [55.1, 1243.0], [55.2, 1245.0], [55.3, 1246.0], [55.4, 1247.0], [55.5, 1248.0], [55.6, 1248.0], [55.7, 1250.0], [55.8, 1252.0], [55.9, 1252.0], [56.0, 1255.0], [56.1, 1255.0], [56.2, 1256.0], [56.3, 1256.0], [56.4, 1257.0], [56.5, 1258.0], [56.6, 1259.0], [56.7, 1259.0], [56.8, 1260.0], [56.9, 1261.0], [57.0, 1262.0], [57.1, 1264.0], [57.2, 1264.0], [57.3, 1265.0], [57.4, 1266.0], [57.5, 1267.0], [57.6, 1268.0], [57.7, 1269.0], [57.8, 1270.0], [57.9, 1271.0], [58.0, 1272.0], [58.1, 1272.0], [58.2, 1273.0], [58.3, 1273.0], [58.4, 1274.0], [58.5, 1275.0], [58.6, 1276.0], [58.7, 1278.0], [58.8, 1279.0], [58.9, 1281.0], [59.0, 1284.0], [59.1, 1284.0], [59.2, 1285.0], [59.3, 1286.0], [59.4, 1289.0], [59.5, 1290.0], [59.6, 1290.0], [59.7, 1291.0], [59.8, 1292.0], [59.9, 1293.0], [60.0, 1294.0], [60.1, 1295.0], [60.2, 1296.0], [60.3, 1297.0], [60.4, 1299.0], [60.5, 1299.0], [60.6, 1300.0], [60.7, 1301.0], [60.8, 1302.0], [60.9, 1303.0], [61.0, 1305.0], [61.1, 1307.0], [61.2, 1307.0], [61.3, 1309.0], [61.4, 1311.0], [61.5, 1312.0], [61.6, 1312.0], [61.7, 1314.0], [61.8, 1314.0], [61.9, 1315.0], [62.0, 1316.0], [62.1, 1317.0], [62.2, 1318.0], [62.3, 1319.0], [62.4, 1320.0], [62.5, 1321.0], [62.6, 1322.0], [62.7, 1324.0], [62.8, 1325.0], [62.9, 1325.0], [63.0, 1326.0], [63.1, 1327.0], [63.2, 1328.0], [63.3, 1330.0], [63.4, 1330.0], [63.5, 1331.0], [63.6, 1332.0], [63.7, 1333.0], [63.8, 1335.0], [63.9, 1336.0], [64.0, 1338.0], [64.1, 1339.0], [64.2, 1341.0], [64.3, 1342.0], [64.4, 1344.0], [64.5, 1344.0], [64.6, 1346.0], [64.7, 1347.0], [64.8, 1347.0], [64.9, 1348.0], [65.0, 1349.0], [65.1, 1349.0], [65.2, 1350.0], [65.3, 1350.0], [65.4, 1351.0], [65.5, 1352.0], [65.6, 1354.0], [65.7, 1354.0], [65.8, 1355.0], [65.9, 1356.0], [66.0, 1358.0], [66.1, 1359.0], [66.2, 1359.0], [66.3, 1360.0], [66.4, 1360.0], [66.5, 1361.0], [66.6, 1361.0], [66.7, 1363.0], [66.8, 1364.0], [66.9, 1365.0], [67.0, 1365.0], [67.1, 1366.0], [67.2, 1367.0], [67.3, 1367.0], [67.4, 1369.0], [67.5, 1370.0], [67.6, 1370.0], [67.7, 1371.0], [67.8, 1374.0], [67.9, 1375.0], [68.0, 1375.0], [68.1, 1376.0], [68.2, 1377.0], [68.3, 1379.0], [68.4, 1379.0], [68.5, 1380.0], [68.6, 1380.0], [68.7, 1382.0], [68.8, 1384.0], [68.9, 1384.0], [69.0, 1386.0], [69.1, 1387.0], [69.2, 1388.0], [69.3, 1389.0], [69.4, 1390.0], [69.5, 1391.0], [69.6, 1393.0], [69.7, 1393.0], [69.8, 1394.0], [69.9, 1395.0], [70.0, 1399.0], [70.1, 1400.0], [70.2, 1400.0], [70.3, 1401.0], [70.4, 1402.0], [70.5, 1403.0], [70.6, 1404.0], [70.7, 1405.0], [70.8, 1406.0], [70.9, 1406.0], [71.0, 1407.0], [71.1, 1409.0], [71.2, 1410.0], [71.3, 1411.0], [71.4, 1413.0], [71.5, 1413.0], [71.6, 1415.0], [71.7, 1417.0], [71.8, 1418.0], [71.9, 1420.0], [72.0, 1420.0], [72.1, 1421.0], [72.2, 1422.0], [72.3, 1422.0], [72.4, 1423.0], [72.5, 1424.0], [72.6, 1425.0], [72.7, 1427.0], [72.8, 1428.0], [72.9, 1429.0], [73.0, 1430.0], [73.1, 1432.0], [73.2, 1433.0], [73.3, 1435.0], [73.4, 1435.0], [73.5, 1436.0], [73.6, 1437.0], [73.7, 1438.0], [73.8, 1439.0], [73.9, 1440.0], [74.0, 1441.0], [74.1, 1442.0], [74.2, 1443.0], [74.3, 1444.0], [74.4, 1447.0], [74.5, 1448.0], [74.6, 1448.0], [74.7, 1450.0], [74.8, 1451.0], [74.9, 1452.0], [75.0, 1452.0], [75.1, 1454.0], [75.2, 1457.0], [75.3, 1458.0], [75.4, 1458.0], [75.5, 1460.0], [75.6, 1460.0], [75.7, 1461.0], [75.8, 1462.0], [75.9, 1463.0], [76.0, 1464.0], [76.1, 1466.0], [76.2, 1466.0], [76.3, 1467.0], [76.4, 1467.0], [76.5, 1469.0], [76.6, 1469.0], [76.7, 1471.0], [76.8, 1472.0], [76.9, 1472.0], [77.0, 1473.0], [77.1, 1475.0], [77.2, 1476.0], [77.3, 1478.0], [77.4, 1478.0], [77.5, 1479.0], [77.6, 1479.0], [77.7, 1481.0], [77.8, 1481.0], [77.9, 1483.0], [78.0, 1484.0], [78.1, 1485.0], [78.2, 1486.0], [78.3, 1488.0], [78.4, 1489.0], [78.5, 1491.0], [78.6, 1492.0], [78.7, 1494.0], [78.8, 1494.0], [78.9, 1496.0], [79.0, 1497.0], [79.1, 1498.0], [79.2, 1499.0], [79.3, 1500.0], [79.4, 1500.0], [79.5, 1501.0], [79.6, 1503.0], [79.7, 1504.0], [79.8, 1505.0], [79.9, 1507.0], [80.0, 1507.0], [80.1, 1508.0], [80.2, 1509.0], [80.3, 1510.0], [80.4, 1511.0], [80.5, 1512.0], [80.6, 1514.0], [80.7, 1515.0], [80.8, 1515.0], [80.9, 1516.0], [81.0, 1518.0], [81.1, 1519.0], [81.2, 1520.0], [81.3, 1522.0], [81.4, 1523.0], [81.5, 1524.0], [81.6, 1526.0], [81.7, 1527.0], [81.8, 1528.0], [81.9, 1530.0], [82.0, 1532.0], [82.1, 1532.0], [82.2, 1533.0], [82.3, 1533.0], [82.4, 1536.0], [82.5, 1538.0], [82.6, 1539.0], [82.7, 1540.0], [82.8, 1542.0], [82.9, 1545.0], [83.0, 1547.0], [83.1, 1548.0], [83.2, 1549.0], [83.3, 1551.0], [83.4, 1552.0], [83.5, 1553.0], [83.6, 1554.0], [83.7, 1555.0], [83.8, 1555.0], [83.9, 1556.0], [84.0, 1557.0], [84.1, 1559.0], [84.2, 1561.0], [84.3, 1564.0], [84.4, 1565.0], [84.5, 1566.0], [84.6, 1567.0], [84.7, 1568.0], [84.8, 1569.0], [84.9, 1572.0], [85.0, 1573.0], [85.1, 1573.0], [85.2, 1576.0], [85.3, 1578.0], [85.4, 1582.0], [85.5, 1586.0], [85.6, 1587.0], [85.7, 1588.0], [85.8, 1590.0], [85.9, 1592.0], [86.0, 1593.0], [86.1, 1597.0], [86.2, 1597.0], [86.3, 1598.0], [86.4, 1599.0], [86.5, 1601.0], [86.6, 1603.0], [86.7, 1606.0], [86.8, 1607.0], [86.9, 1608.0], [87.0, 1610.0], [87.1, 1611.0], [87.2, 1613.0], [87.3, 1614.0], [87.4, 1616.0], [87.5, 1619.0], [87.6, 1621.0], [87.7, 1623.0], [87.8, 1623.0], [87.9, 1628.0], [88.0, 1630.0], [88.1, 1631.0], [88.2, 1637.0], [88.3, 1639.0], [88.4, 1639.0], [88.5, 1640.0], [88.6, 1641.0], [88.7, 1641.0], [88.8, 1642.0], [88.9, 1645.0], [89.0, 1647.0], [89.1, 1652.0], [89.2, 1654.0], [89.3, 1655.0], [89.4, 1656.0], [89.5, 1659.0], [89.6, 1659.0], [89.7, 1661.0], [89.8, 1664.0], [89.9, 1667.0], [90.0, 1669.0], [90.1, 1671.0], [90.2, 1676.0], [90.3, 1677.0], [90.4, 1679.0], [90.5, 1679.0], [90.6, 1682.0], [90.7, 1683.0], [90.8, 1685.0], [90.9, 1690.0], [91.0, 1691.0], [91.1, 1695.0], [91.2, 1698.0], [91.3, 1700.0], [91.4, 1702.0], [91.5, 1704.0], [91.6, 1706.0], [91.7, 1707.0], [91.8, 1708.0], [91.9, 1714.0], [92.0, 1715.0], [92.1, 1716.0], [92.2, 1719.0], [92.3, 1720.0], [92.4, 1721.0], [92.5, 1727.0], [92.6, 1729.0], [92.7, 1733.0], [92.8, 1734.0], [92.9, 1736.0], [93.0, 1738.0], [93.1, 1740.0], [93.2, 1743.0], [93.3, 1749.0], [93.4, 1752.0], [93.5, 1754.0], [93.6, 1758.0], [93.7, 1762.0], [93.8, 1765.0], [93.9, 1766.0], [94.0, 1773.0], [94.1, 1776.0], [94.2, 1783.0], [94.3, 1786.0], [94.4, 1793.0], [94.5, 1797.0], [94.6, 1801.0], [94.7, 1807.0], [94.8, 1811.0], [94.9, 1815.0], [95.0, 1819.0], [95.1, 1822.0], [95.2, 1824.0], [95.3, 1827.0], [95.4, 1828.0], [95.5, 1831.0], [95.6, 1834.0], [95.7, 1839.0], [95.8, 1843.0], [95.9, 1848.0], [96.0, 1850.0], [96.1, 1857.0], [96.2, 1862.0], [96.3, 1867.0], [96.4, 1872.0], [96.5, 1880.0], [96.6, 1885.0], [96.7, 1904.0], [96.8, 1908.0], [96.9, 1917.0], [97.0, 1924.0], [97.1, 1931.0], [97.2, 1938.0], [97.3, 1948.0], [97.4, 1951.0], [97.5, 1953.0], [97.6, 1955.0], [97.7, 1957.0], [97.8, 1962.0], [97.9, 1965.0], [98.0, 1973.0], [98.1, 1975.0], [98.2, 1976.0], [98.3, 1985.0], [98.4, 1996.0], [98.5, 2003.0], [98.6, 2013.0], [98.7, 2025.0], [98.8, 2032.0], [98.9, 2035.0], [99.0, 2047.0], [99.1, 2062.0], [99.2, 2068.0], [99.3, 2072.0], [99.4, 2081.0], [99.5, 2102.0], [99.6, 2150.0], [99.7, 2166.0], [99.8, 2181.0], [99.9, 2260.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 1.0], [2.6, 1.0], [2.7, 1.0], [2.8, 1.0], [2.9, 1.0], [3.0, 1.0], [3.1, 1.0], [3.2, 1.0], [3.3, 1.0], [3.4, 1.0], [3.5, 1.0], [3.6, 1.0], [3.7, 1.0], [3.8, 1.0], [3.9, 1.0], [4.0, 1.0], [4.1, 1.0], [4.2, 1.0], [4.3, 1.0], [4.4, 1.0], [4.5, 1.0], [4.6, 1.0], [4.7, 1.0], [4.8, 1.0], [4.9, 1.0], [5.0, 1.0], [5.1, 1.0], [5.2, 1.0], [5.3, 1.0], [5.4, 1.0], [5.5, 1.0], [5.6, 1.0], [5.7, 1.0], [5.8, 1.0], [5.9, 1.0], [6.0, 1.0], [6.1, 1.0], [6.2, 1.0], [6.3, 1.0], [6.4, 1.0], [6.5, 1.0], [6.6, 1.0], [6.7, 1.0], [6.8, 2.0], [6.9, 2.0], [7.0, 2.0], [7.1, 3.0], [7.2, 4.0], [7.3, 16.0], [7.4, 18.0], [7.5, 42.0], [7.6, 55.0], [7.7, 59.0], [7.8, 63.0], [7.9, 67.0], [8.0, 69.0], [8.1, 71.0], [8.2, 73.0], [8.3, 78.0], [8.4, 80.0], [8.5, 81.0], [8.6, 83.0], [8.7, 85.0], [8.8, 86.0], [8.9, 90.0], [9.0, 93.0], [9.1, 95.0], [9.2, 98.0], [9.3, 100.0], [9.4, 102.0], [9.5, 108.0], [9.6, 114.0], [9.7, 126.0], [9.8, 132.0], [9.9, 137.0], [10.0, 142.0], [10.1, 146.0], [10.2, 152.0], [10.3, 153.0], [10.4, 157.0], [10.5, 164.0], [10.6, 170.0], [10.7, 175.0], [10.8, 179.0], [10.9, 180.0], [11.0, 182.0], [11.1, 184.0], [11.2, 193.0], [11.3, 200.0], [11.4, 201.0], [11.5, 203.0], [11.6, 205.0], [11.7, 207.0], [11.8, 212.0], [11.9, 215.0], [12.0, 220.0], [12.1, 225.0], [12.2, 226.0], [12.3, 230.0], [12.4, 234.0], [12.5, 239.0], [12.6, 246.0], [12.7, 247.0], [12.8, 252.0], [12.9, 254.0], [13.0, 258.0], [13.1, 261.0], [13.2, 264.0], [13.3, 267.0], [13.4, 274.0], [13.5, 276.0], [13.6, 277.0], [13.7, 279.0], [13.8, 284.0], [13.9, 287.0], [14.0, 291.0], [14.1, 295.0], [14.2, 297.0], [14.3, 300.0], [14.4, 304.0], [14.5, 305.0], [14.6, 308.0], [14.7, 317.0], [14.8, 322.0], [14.9, 325.0], [15.0, 327.0], [15.1, 330.0], [15.2, 332.0], [15.3, 341.0], [15.4, 347.0], [15.5, 354.0], [15.6, 361.0], [15.7, 363.0], [15.8, 367.0], [15.9, 369.0], [16.0, 370.0], [16.1, 376.0], [16.2, 378.0], [16.3, 383.0], [16.4, 386.0], [16.5, 394.0], [16.6, 398.0], [16.7, 402.0], [16.8, 409.0], [16.9, 410.0], [17.0, 411.0], [17.1, 412.0], [17.2, 414.0], [17.3, 423.0], [17.4, 425.0], [17.5, 427.0], [17.6, 429.0], [17.7, 436.0], [17.8, 440.0], [17.9, 445.0], [18.0, 447.0], [18.1, 449.0], [18.2, 453.0], [18.3, 459.0], [18.4, 465.0], [18.5, 467.0], [18.6, 468.0], [18.7, 470.0], [18.8, 472.0], [18.9, 476.0], [19.0, 481.0], [19.1, 486.0], [19.2, 488.0], [19.3, 492.0], [19.4, 497.0], [19.5, 501.0], [19.6, 502.0], [19.7, 505.0], [19.8, 510.0], [19.9, 517.0], [20.0, 527.0], [20.1, 530.0], [20.2, 535.0], [20.3, 541.0], [20.4, 543.0], [20.5, 547.0], [20.6, 548.0], [20.7, 549.0], [20.8, 552.0], [20.9, 555.0], [21.0, 561.0], [21.1, 565.0], [21.2, 573.0], [21.3, 576.0], [21.4, 579.0], [21.5, 582.0], [21.6, 587.0], [21.7, 592.0], [21.8, 595.0], [21.9, 605.0], [22.0, 612.0], [22.1, 619.0], [22.2, 625.0], [22.3, 635.0], [22.4, 642.0], [22.5, 644.0], [22.6, 648.0], [22.7, 655.0], [22.8, 657.0], [22.9, 659.0], [23.0, 661.0], [23.1, 671.0], [23.2, 678.0], [23.3, 684.0], [23.4, 685.0], [23.5, 691.0], [23.6, 694.0], [23.7, 697.0], [23.8, 704.0], [23.9, 707.0], [24.0, 711.0], [24.1, 716.0], [24.2, 719.0], [24.3, 722.0], [24.4, 722.0], [24.5, 726.0], [24.6, 730.0], [24.7, 734.0], [24.8, 737.0], [24.9, 744.0], [25.0, 748.0], [25.1, 751.0], [25.2, 755.0], [25.3, 758.0], [25.4, 760.0], [25.5, 765.0], [25.6, 766.0], [25.7, 768.0], [25.8, 772.0], [25.9, 781.0], [26.0, 784.0], [26.1, 787.0], [26.2, 790.0], [26.3, 794.0], [26.4, 801.0], [26.5, 804.0], [26.6, 808.0], [26.7, 816.0], [26.8, 819.0], [26.9, 826.0], [27.0, 829.0], [27.1, 832.0], [27.2, 835.0], [27.3, 843.0], [27.4, 845.0], [27.5, 848.0], [27.6, 851.0], [27.7, 859.0], [27.8, 863.0], [27.9, 867.0], [28.0, 876.0], [28.1, 877.0], [28.2, 884.0], [28.3, 888.0], [28.4, 893.0], [28.5, 897.0], [28.6, 901.0], [28.7, 909.0], [28.8, 911.0], [28.9, 914.0], [29.0, 917.0], [29.1, 921.0], [29.2, 925.0], [29.3, 934.0], [29.4, 938.0], [29.5, 942.0], [29.6, 948.0], [29.7, 958.0], [29.8, 961.0], [29.9, 964.0], [30.0, 966.0], [30.1, 967.0], [30.2, 969.0], [30.3, 970.0], [30.4, 976.0], [30.5, 979.0], [30.6, 982.0], [30.7, 984.0], [30.8, 985.0], [30.9, 991.0], [31.0, 994.0], [31.1, 1000.0], [31.2, 1003.0], [31.3, 1008.0], [31.4, 1011.0], [31.5, 1014.0], [31.6, 1016.0], [31.7, 1018.0], [31.8, 1021.0], [31.9, 1025.0], [32.0, 1034.0], [32.1, 1038.0], [32.2, 1045.0], [32.3, 1057.0], [32.4, 1063.0], [32.5, 1066.0], [32.6, 1068.0], [32.7, 1074.0], [32.8, 1082.0], [32.9, 1086.0], [33.0, 1093.0], [33.1, 1096.0], [33.2, 1102.0], [33.3, 1103.0], [33.4, 1106.0], [33.5, 1117.0], [33.6, 1123.0], [33.7, 1128.0], [33.8, 1132.0], [33.9, 1137.0], [34.0, 1139.0], [34.1, 1143.0], [34.2, 1148.0], [34.3, 1156.0], [34.4, 1162.0], [34.5, 1167.0], [34.6, 1174.0], [34.7, 1184.0], [34.8, 1187.0], [34.9, 1188.0], [35.0, 1192.0], [35.1, 1193.0], [35.2, 1195.0], [35.3, 1199.0], [35.4, 1212.0], [35.5, 1216.0], [35.6, 1219.0], [35.7, 1226.0], [35.8, 1229.0], [35.9, 1236.0], [36.0, 1237.0], [36.1, 1239.0], [36.2, 1249.0], [36.3, 1251.0], [36.4, 1255.0], [36.5, 1264.0], [36.6, 1268.0], [36.7, 1274.0], [36.8, 1280.0], [36.9, 1282.0], [37.0, 1286.0], [37.1, 1291.0], [37.2, 1298.0], [37.3, 1305.0], [37.4, 1311.0], [37.5, 1313.0], [37.6, 1316.0], [37.7, 1317.0], [37.8, 1320.0], [37.9, 1324.0], [38.0, 1332.0], [38.1, 1339.0], [38.2, 1344.0], [38.3, 1345.0], [38.4, 1348.0], [38.5, 1354.0], [38.6, 1365.0], [38.7, 1367.0], [38.8, 1374.0], [38.9, 1380.0], [39.0, 1385.0], [39.1, 1392.0], [39.2, 1396.0], [39.3, 1405.0], [39.4, 1416.0], [39.5, 1419.0], [39.6, 1435.0], [39.7, 1444.0], [39.8, 1445.0], [39.9, 1452.0], [40.0, 1458.0], [40.1, 1470.0], [40.2, 1478.0], [40.3, 1491.0], [40.4, 1511.0], [40.5, 1515.0], [40.6, 1521.0], [40.7, 1535.0], [40.8, 1546.0], [40.9, 1550.0], [41.0, 1563.0], [41.1, 1571.0], [41.2, 1580.0], [41.3, 1586.0], [41.4, 1594.0], [41.5, 1606.0], [41.6, 1623.0], [41.7, 1634.0], [41.8, 1643.0], [41.9, 1663.0], [42.0, 1671.0], [42.1, 1676.0], [42.2, 1683.0], [42.3, 1692.0], [42.4, 1695.0], [42.5, 1696.0], [42.6, 1703.0], [42.7, 1708.0], [42.8, 1712.0], [42.9, 1722.0], [43.0, 1731.0], [43.1, 1739.0], [43.2, 1753.0], [43.3, 1762.0], [43.4, 1772.0], [43.5, 1775.0], [43.6, 1777.0], [43.7, 1785.0], [43.8, 1790.0], [43.9, 1795.0], [44.0, 1802.0], [44.1, 1804.0], [44.2, 1811.0], [44.3, 1824.0], [44.4, 1833.0], [44.5, 1838.0], [44.6, 1859.0], [44.7, 1861.0], [44.8, 1875.0], [44.9, 1885.0], [45.0, 1891.0], [45.1, 1894.0], [45.2, 1897.0], [45.3, 1901.0], [45.4, 1904.0], [45.5, 1913.0], [45.6, 1918.0], [45.7, 1928.0], [45.8, 1951.0], [45.9, 1956.0], [46.0, 1964.0], [46.1, 1964.0], [46.2, 1969.0], [46.3, 1973.0], [46.4, 1977.0], [46.5, 1987.0], [46.6, 1989.0], [46.7, 1993.0], [46.8, 1999.0], [46.9, 2002.0], [47.0, 2005.0], [47.1, 2012.0], [47.2, 2016.0], [47.3, 2018.0], [47.4, 2028.0], [47.5, 2029.0], [47.6, 2033.0], [47.7, 2035.0], [47.8, 2038.0], [47.9, 2040.0], [48.0, 2042.0], [48.1, 2044.0], [48.2, 2052.0], [48.3, 2060.0], [48.4, 2067.0], [48.5, 2070.0], [48.6, 2074.0], [48.7, 2076.0], [48.8, 2078.0], [48.9, 2079.0], [49.0, 2082.0], [49.1, 2083.0], [49.2, 2087.0], [49.3, 2091.0], [49.4, 2093.0], [49.5, 2097.0], [49.6, 2097.0], [49.7, 2100.0], [49.8, 2104.0], [49.9, 2112.0], [50.0, 2114.0], [50.1, 2115.0], [50.2, 2119.0], [50.3, 2123.0], [50.4, 2126.0], [50.5, 2128.0], [50.6, 2131.0], [50.7, 2139.0], [50.8, 2145.0], [50.9, 2148.0], [51.0, 2151.0], [51.1, 2154.0], [51.2, 2161.0], [51.3, 2164.0], [51.4, 2165.0], [51.5, 2169.0], [51.6, 2170.0], [51.7, 2176.0], [51.8, 2180.0], [51.9, 2186.0], [52.0, 2188.0], [52.1, 2190.0], [52.2, 2192.0], [52.3, 2198.0], [52.4, 2202.0], [52.5, 2203.0], [52.6, 2207.0], [52.7, 2211.0], [52.8, 2213.0], [52.9, 2216.0], [53.0, 2218.0], [53.1, 2222.0], [53.2, 2224.0], [53.3, 2229.0], [53.4, 2236.0], [53.5, 2240.0], [53.6, 2244.0], [53.7, 2245.0], [53.8, 2246.0], [53.9, 2246.0], [54.0, 2249.0], [54.1, 2251.0], [54.2, 2252.0], [54.3, 2254.0], [54.4, 2257.0], [54.5, 2261.0], [54.6, 2266.0], [54.7, 2268.0], [54.8, 2270.0], [54.9, 2272.0], [55.0, 2279.0], [55.1, 2281.0], [55.2, 2287.0], [55.3, 2289.0], [55.4, 2294.0], [55.5, 2298.0], [55.6, 2298.0], [55.7, 2301.0], [55.8, 2305.0], [55.9, 2307.0], [56.0, 2313.0], [56.1, 2315.0], [56.2, 2315.0], [56.3, 2316.0], [56.4, 2320.0], [56.5, 2323.0], [56.6, 2325.0], [56.7, 2330.0], [56.8, 2332.0], [56.9, 2334.0], [57.0, 2337.0], [57.1, 2340.0], [57.2, 2343.0], [57.3, 2345.0], [57.4, 2348.0], [57.5, 2351.0], [57.6, 2353.0], [57.7, 2359.0], [57.8, 2361.0], [57.9, 2364.0], [58.0, 2365.0], [58.1, 2369.0], [58.2, 2370.0], [58.3, 2371.0], [58.4, 2373.0], [58.5, 2375.0], [58.6, 2378.0], [58.7, 2385.0], [58.8, 2387.0], [58.9, 2387.0], [59.0, 2389.0], [59.1, 2393.0], [59.2, 2395.0], [59.3, 2398.0], [59.4, 2400.0], [59.5, 2404.0], [59.6, 2405.0], [59.7, 2409.0], [59.8, 2413.0], [59.9, 2414.0], [60.0, 2416.0], [60.1, 2417.0], [60.2, 2419.0], [60.3, 2422.0], [60.4, 2425.0], [60.5, 2427.0], [60.6, 2432.0], [60.7, 2437.0], [60.8, 2439.0], [60.9, 2441.0], [61.0, 2443.0], [61.1, 2445.0], [61.2, 2448.0], [61.3, 2450.0], [61.4, 2451.0], [61.5, 2455.0], [61.6, 2459.0], [61.7, 2461.0], [61.8, 2464.0], [61.9, 2467.0], [62.0, 2468.0], [62.1, 2470.0], [62.2, 2474.0], [62.3, 2476.0], [62.4, 2478.0], [62.5, 2481.0], [62.6, 2484.0], [62.7, 2485.0], [62.8, 2489.0], [62.9, 2492.0], [63.0, 2497.0], [63.1, 2500.0], [63.2, 2501.0], [63.3, 2503.0], [63.4, 2505.0], [63.5, 2507.0], [63.6, 2508.0], [63.7, 2513.0], [63.8, 2516.0], [63.9, 2519.0], [64.0, 2520.0], [64.1, 2522.0], [64.2, 2528.0], [64.3, 2532.0], [64.4, 2533.0], [64.5, 2535.0], [64.6, 2537.0], [64.7, 2542.0], [64.8, 2544.0], [64.9, 2545.0], [65.0, 2547.0], [65.1, 2550.0], [65.2, 2554.0], [65.3, 2555.0], [65.4, 2559.0], [65.5, 2561.0], [65.6, 2562.0], [65.7, 2565.0], [65.8, 2567.0], [65.9, 2581.0], [66.0, 2582.0], [66.1, 2584.0], [66.2, 2593.0], [66.3, 2598.0], [66.4, 2604.0], [66.5, 2606.0], [66.6, 2608.0], [66.7, 2611.0], [66.8, 2612.0], [66.9, 2614.0], [67.0, 2616.0], [67.1, 2618.0], [67.2, 2619.0], [67.3, 2623.0], [67.4, 2624.0], [67.5, 2625.0], [67.6, 2627.0], [67.7, 2632.0], [67.8, 2637.0], [67.9, 2640.0], [68.0, 2642.0], [68.1, 2645.0], [68.2, 2646.0], [68.3, 2647.0], [68.4, 2652.0], [68.5, 2655.0], [68.6, 2659.0], [68.7, 2660.0], [68.8, 2662.0], [68.9, 2665.0], [69.0, 2666.0], [69.1, 2670.0], [69.2, 2673.0], [69.3, 2674.0], [69.4, 2675.0], [69.5, 2676.0], [69.6, 2678.0], [69.7, 2684.0], [69.8, 2686.0], [69.9, 2688.0], [70.0, 2691.0], [70.1, 2695.0], [70.2, 2699.0], [70.3, 2702.0], [70.4, 2702.0], [70.5, 2704.0], [70.6, 2706.0], [70.7, 2709.0], [70.8, 2712.0], [70.9, 2713.0], [71.0, 2717.0], [71.1, 2721.0], [71.2, 2722.0], [71.3, 2725.0], [71.4, 2725.0], [71.5, 2728.0], [71.6, 2733.0], [71.7, 2734.0], [71.8, 2737.0], [71.9, 2739.0], [72.0, 2741.0], [72.1, 2745.0], [72.2, 2748.0], [72.3, 2755.0], [72.4, 2758.0], [72.5, 2759.0], [72.6, 2763.0], [72.7, 2765.0], [72.8, 2767.0], [72.9, 2767.0], [73.0, 2769.0], [73.1, 2773.0], [73.2, 2773.0], [73.3, 2776.0], [73.4, 2779.0], [73.5, 2781.0], [73.6, 2784.0], [73.7, 2791.0], [73.8, 2794.0], [73.9, 2799.0], [74.0, 2801.0], [74.1, 2803.0], [74.2, 2807.0], [74.3, 2809.0], [74.4, 2811.0], [74.5, 2814.0], [74.6, 2816.0], [74.7, 2819.0], [74.8, 2824.0], [74.9, 2825.0], [75.0, 2826.0], [75.1, 2830.0], [75.2, 2832.0], [75.3, 2835.0], [75.4, 2837.0], [75.5, 2840.0], [75.6, 2842.0], [75.7, 2847.0], [75.8, 2849.0], [75.9, 2852.0], [76.0, 2858.0], [76.1, 2862.0], [76.2, 2864.0], [76.3, 2866.0], [76.4, 2866.0], [76.5, 2872.0], [76.6, 2874.0], [76.7, 2875.0], [76.8, 2880.0], [76.9, 2884.0], [77.0, 2891.0], [77.1, 2893.0], [77.2, 2897.0], [77.3, 2900.0], [77.4, 2904.0], [77.5, 2907.0], [77.6, 2909.0], [77.7, 2913.0], [77.8, 2916.0], [77.9, 2916.0], [78.0, 2916.0], [78.1, 2919.0], [78.2, 2921.0], [78.3, 2923.0], [78.4, 2928.0], [78.5, 2929.0], [78.6, 2932.0], [78.7, 2933.0], [78.8, 2935.0], [78.9, 2936.0], [79.0, 2937.0], [79.1, 2939.0], [79.2, 2941.0], [79.3, 2943.0], [79.4, 2945.0], [79.5, 2946.0], [79.6, 2947.0], [79.7, 2948.0], [79.8, 2950.0], [79.9, 2954.0], [80.0, 2958.0], [80.1, 2960.0], [80.2, 2962.0], [80.3, 2965.0], [80.4, 2965.0], [80.5, 2969.0], [80.6, 2970.0], [80.7, 2976.0], [80.8, 2977.0], [80.9, 2980.0], [81.0, 2983.0], [81.1, 2988.0], [81.2, 2990.0], [81.3, 2993.0], [81.4, 2998.0], [81.5, 3003.0], [81.6, 3008.0], [81.7, 3012.0], [81.8, 3018.0], [81.9, 3020.0], [82.0, 3022.0], [82.1, 3025.0], [82.2, 3026.0], [82.3, 3027.0], [82.4, 3029.0], [82.5, 3030.0], [82.6, 3032.0], [82.7, 3032.0], [82.8, 3038.0], [82.9, 3042.0], [83.0, 3047.0], [83.1, 3051.0], [83.2, 3054.0], [83.3, 3059.0], [83.4, 3062.0], [83.5, 3064.0], [83.6, 3067.0], [83.7, 3070.0], [83.8, 3074.0], [83.9, 3075.0], [84.0, 3079.0], [84.1, 3080.0], [84.2, 3084.0], [84.3, 3087.0], [84.4, 3089.0], [84.5, 3093.0], [84.6, 3095.0], [84.7, 3097.0], [84.8, 3098.0], [84.9, 3100.0], [85.0, 3103.0], [85.1, 3104.0], [85.2, 3107.0], [85.3, 3108.0], [85.4, 3110.0], [85.5, 3112.0], [85.6, 3113.0], [85.7, 3119.0], [85.8, 3123.0], [85.9, 3127.0], [86.0, 3131.0], [86.1, 3137.0], [86.2, 3140.0], [86.3, 3140.0], [86.4, 3141.0], [86.5, 3144.0], [86.6, 3146.0], [86.7, 3150.0], [86.8, 3157.0], [86.9, 3159.0], [87.0, 3160.0], [87.1, 3164.0], [87.2, 3166.0], [87.3, 3167.0], [87.4, 3171.0], [87.5, 3174.0], [87.6, 3177.0], [87.7, 3185.0], [87.8, 3186.0], [87.9, 3188.0], [88.0, 3194.0], [88.1, 3197.0], [88.2, 3202.0], [88.3, 3204.0], [88.4, 3207.0], [88.5, 3209.0], [88.6, 3212.0], [88.7, 3219.0], [88.8, 3223.0], [88.9, 3226.0], [89.0, 3232.0], [89.1, 3235.0], [89.2, 3241.0], [89.3, 3246.0], [89.4, 3247.0], [89.5, 3254.0], [89.6, 3261.0], [89.7, 3264.0], [89.8, 3265.0], [89.9, 3267.0], [90.0, 3270.0], [90.1, 3273.0], [90.2, 3278.0], [90.3, 3283.0], [90.4, 3288.0], [90.5, 3293.0], [90.6, 3299.0], [90.7, 3303.0], [90.8, 3308.0], [90.9, 3315.0], [91.0, 3321.0], [91.1, 3326.0], [91.2, 3330.0], [91.3, 3340.0], [91.4, 3344.0], [91.5, 3350.0], [91.6, 3354.0], [91.7, 3358.0], [91.8, 3367.0], [91.9, 3368.0], [92.0, 3371.0], [92.1, 3378.0], [92.2, 3383.0], [92.3, 3386.0], [92.4, 3388.0], [92.5, 3396.0], [92.6, 3401.0], [92.7, 3406.0], [92.8, 3408.0], [92.9, 3411.0], [93.0, 3421.0], [93.1, 3423.0], [93.2, 3428.0], [93.3, 3434.0], [93.4, 3437.0], [93.5, 3445.0], [93.6, 3450.0], [93.7, 3453.0], [93.8, 3458.0], [93.9, 3461.0], [94.0, 3462.0], [94.1, 3465.0], [94.2, 3469.0], [94.3, 3473.0], [94.4, 3476.0], [94.5, 3491.0], [94.6, 3503.0], [94.7, 3515.0], [94.8, 3518.0], [94.9, 3522.0], [95.0, 3527.0], [95.1, 3535.0], [95.2, 3540.0], [95.3, 3545.0], [95.4, 3552.0], [95.5, 3555.0], [95.6, 3560.0], [95.7, 3573.0], [95.8, 3578.0], [95.9, 3584.0], [96.0, 3596.0], [96.1, 3599.0], [96.2, 3603.0], [96.3, 3608.0], [96.4, 3610.0], [96.5, 3612.0], [96.6, 3625.0], [96.7, 3628.0], [96.8, 3635.0], [96.9, 3638.0], [97.0, 3645.0], [97.1, 3661.0], [97.2, 3670.0], [97.3, 3678.0], [97.4, 3685.0], [97.5, 3686.0], [97.6, 3695.0], [97.7, 3703.0], [97.8, 3708.0], [97.9, 3720.0], [98.0, 3736.0], [98.1, 3755.0], [98.2, 3759.0], [98.3, 3778.0], [98.4, 3788.0], [98.5, 3800.0], [98.6, 3810.0], [98.7, 3825.0], [98.8, 3831.0], [98.9, 3852.0], [99.0, 3867.0], [99.1, 3880.0], [99.2, 3892.0], [99.3, 3920.0], [99.4, 3935.0], [99.5, 3980.0], [99.6, 4009.0], [99.7, 4032.0], [99.8, 4059.0], [99.9, 4076.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 286.0, "series": [{"data": [[0.0, 265.0], [600.0, 105.0], [700.0, 149.0], [800.0, 124.0], [900.0, 135.0], [1000.0, 146.0], [1100.0, 192.0], [1200.0, 273.0], [1300.0, 286.0], [1400.0, 277.0], [1500.0, 214.0], [100.0, 82.0], [1600.0, 146.0], [1700.0, 100.0], [1800.0, 62.0], [1900.0, 55.0], [2000.0, 29.0], [2100.0, 12.0], [2300.0, 1.0], [2200.0, 2.0], [3000.0, 1.0], [200.0, 88.0], [300.0, 77.0], [400.0, 90.0], [500.0, 89.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 277.0], [600.0, 57.0], [700.0, 78.0], [800.0, 65.0], [900.0, 77.0], [1000.0, 62.0], [1100.0, 65.0], [1200.0, 57.0], [1300.0, 60.0], [1400.0, 34.0], [1500.0, 32.0], [100.0, 61.0], [1600.0, 34.0], [1700.0, 42.0], [1800.0, 39.0], [1900.0, 47.0], [2000.0, 85.0], [2100.0, 80.0], [2300.0, 113.0], [2200.0, 99.0], [2400.0, 111.0], [2500.0, 98.0], [2600.0, 117.0], [2700.0, 111.0], [2800.0, 101.0], [2900.0, 125.0], [3000.0, 103.0], [3100.0, 98.0], [200.0, 91.0], [3300.0, 58.0], [3200.0, 75.0], [3400.0, 60.0], [3500.0, 46.0], [3700.0, 25.0], [3600.0, 46.0], [3800.0, 22.0], [3900.0, 11.0], [4000.0, 10.0], [4200.0, 1.0], [4100.0, 1.0], [300.0, 70.0], [400.0, 85.0], [500.0, 71.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 435.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2407.0, "series": [{"data": [[0.0, 752.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2407.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2406.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 435.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 518.7933333333352, "minX": 1.71673512E12, "maxY": 518.7933333333352, "series": [{"data": [[1.71673512E12, 518.7933333333352]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673512E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 6.0, "maxY": 4061.0, "series": [{"data": [[6.0, 417.8333333333333], [7.0, 660.0], [8.0, 596.0], [9.0, 622.0], [10.0, 261.0], [11.0, 562.0], [12.0, 586.0], [13.0, 548.0], [14.0, 641.0], [15.0, 675.0], [16.0, 782.0], [17.0, 378.5], [18.0, 744.0], [19.0, 721.0], [20.0, 54.5], [21.0, 418.6666666666667], [22.0, 345.0], [23.0, 433.0], [24.0, 234.75], [25.0, 928.0], [27.0, 455.0], [29.0, 760.0], [30.0, 240.25], [31.0, 355.6666666666667], [32.0, 70.0], [33.0, 307.33333333333337], [34.0, 169.42857142857144], [35.0, 197.33333333333331], [36.0, 65.0], [37.0, 563.0], [39.0, 763.0], [38.0, 269.0], [41.0, 165.85714285714286], [40.0, 177.5], [43.0, 249.33333333333334], [42.0, 263.5], [44.0, 355.5], [45.0, 435.0], [47.0, 194.2], [46.0, 619.0], [48.0, 212.8], [49.0, 280.75], [51.0, 898.0], [50.0, 646.0], [53.0, 280.33333333333337], [52.0, 570.0], [54.0, 110.54545454545455], [55.0, 456.3333333333333], [56.0, 457.5], [57.0, 933.0], [59.0, 302.25], [58.0, 382.0], [60.0, 310.66666666666663], [61.0, 770.0], [63.0, 598.0], [62.0, 921.0], [65.0, 528.0], [67.0, 542.0], [66.0, 784.0], [71.0, 428.5], [70.0, 683.0], [69.0, 892.0], [68.0, 907.0], [72.0, 279.25], [75.0, 244.75], [74.0, 341.4285714285714], [73.0, 234.0], [76.0, 266.1666666666667], [77.0, 158.49999999999997], [79.0, 275.57142857142856], [78.0, 310.28571428571433], [83.0, 417.5], [82.0, 415.0], [81.0, 762.0], [80.0, 756.0], [84.0, 406.0], [87.0, 408.0], [86.0, 824.0], [85.0, 1486.0], [88.0, 414.66666666666663], [89.0, 466.2], [91.0, 226.5], [90.0, 276.6666666666667], [93.0, 404.75], [95.0, 466.0], [94.0, 499.3333333333333], [92.0, 577.0], [96.0, 586.5], [99.0, 539.5], [98.0, 827.0], [97.0, 630.0], [100.0, 401.66666666666663], [103.0, 454.0], [102.0, 912.0], [107.0, 329.1666666666667], [106.0, 390.4], [105.0, 713.0], [104.0, 625.0], [108.0, 556.5], [111.0, 634.3333333333333], [110.0, 464.0], [109.0, 532.5], [114.0, 459.5], [115.0, 582.3333333333333], [113.0, 864.0], [112.0, 694.0], [117.0, 550.5], [119.0, 759.0], [118.0, 724.0], [116.0, 1080.0], [121.0, 412.5], [123.0, 477.5], [122.0, 322.8571428571429], [120.0, 941.0], [124.0, 231.5], [127.0, 1005.0], [126.0, 1227.0], [125.0, 728.0], [128.0, 501.0], [129.0, 201.0], [130.0, 636.3333333333334], [134.0, 263.6666666666667], [135.0, 592.5], [133.0, 794.0], [132.0, 688.0], [131.0, 1014.0], [136.0, 475.33333333333337], [141.0, 525.5], [142.0, 342.0], [140.0, 797.0], [139.0, 675.0], [138.0, 876.0], [137.0, 876.0], [144.0, 933.75], [146.0, 464.4], [147.0, 352.4], [149.0, 356.2857142857143], [148.0, 546.5], [150.0, 492.0], [151.0, 1359.0], [145.0, 851.0], [152.0, 686.0], [159.0, 1130.0], [156.0, 774.0], [155.0, 705.0], [154.0, 1010.0], [160.0, 721.5], [163.0, 271.0], [166.0, 918.5], [167.0, 577.0], [165.0, 954.0], [164.0, 1036.5], [162.0, 1041.0], [161.0, 1349.0], [169.0, 609.0], [170.0, 302.0], [171.0, 785.0], [174.0, 618.3333333333333], [173.0, 462.3333333333333], [172.0, 604.5], [175.0, 478.75], [168.0, 1016.0], [176.0, 591.5], [178.0, 536.0], [179.0, 488.5], [180.0, 498.5], [183.0, 378.5], [182.0, 1345.0], [181.0, 1321.0], [177.0, 734.0], [186.0, 550.6666666666666], [187.0, 468.8333333333333], [185.0, 560.3333333333334], [189.0, 555.3333333333334], [188.0, 590.25], [190.0, 530.0], [191.0, 737.3333333333333], [184.0, 834.5], [192.0, 549.0], [195.0, 519.2], [196.0, 505.8571428571429], [194.0, 433.16666666666663], [199.0, 1256.0], [198.0, 916.0], [197.0, 980.0], [193.0, 707.0], [201.0, 682.0], [200.0, 877.5], [202.0, 635.0], [206.0, 619.5], [204.0, 863.0], [207.0, 1368.0], [205.0, 916.0], [203.0, 1285.0], [212.0, 516.1666666666666], [211.0, 816.0], [213.0, 667.5], [214.0, 844.0], [215.0, 1466.0], [210.0, 1234.0], [209.0, 1342.0], [208.0, 1216.0], [223.0, 539.0], [220.0, 668.0], [217.0, 694.5], [222.0, 616.2], [221.0, 1728.0], [219.0, 924.0], [218.0, 939.0], [216.0, 1037.0], [224.0, 933.5], [226.0, 503.75], [227.0, 496.4285714285714], [231.0, 487.5], [230.0, 531.1666666666667], [229.0, 610.8333333333333], [228.0, 760.0], [225.0, 874.0], [233.0, 719.6666666666667], [232.0, 587.8], [239.0, 730.5], [238.0, 904.0], [237.0, 1162.0], [236.0, 1089.0], [235.0, 925.0], [234.0, 1159.0], [247.0, 454.5], [245.0, 949.0], [244.0, 858.0], [243.0, 880.0], [242.0, 1176.0], [241.0, 937.0], [240.0, 1137.0], [249.0, 486.99999999999994], [248.0, 484.0], [250.0, 476.0], [251.0, 473.0], [252.0, 466.3333333333333], [253.0, 557.0], [255.0, 558.75], [254.0, 1055.5384615384617], [259.0, 918.5], [257.0, 685.0], [260.0, 638.2], [261.0, 1356.0], [258.0, 635.6666666666666], [262.0, 591.5], [263.0, 692.0], [256.0, 958.0], [264.0, 647.25], [266.0, 736.6666666666666], [265.0, 1365.0], [267.0, 1310.0], [271.0, 1126.0], [270.0, 1316.0], [269.0, 1063.0], [268.0, 906.0], [285.0, 1374.0], [272.0, 824.3333333333333], [273.0, 751.6666666666666], [274.0, 1019.0], [277.0, 712.0], [276.0, 1460.0], [279.0, 1057.0], [278.0, 1233.0], [283.0, 962.5], [287.0, 660.6666666666666], [286.0, 1104.0], [284.0, 1290.0], [275.0, 1483.0], [282.0, 1494.0], [281.0, 1231.0], [280.0, 1360.0], [290.0, 465.0], [291.0, 819.2], [292.0, 867.0], [289.0, 958.0], [288.0, 998.0], [293.0, 942.5], [294.0, 803.0], [295.0, 1289.0], [300.0, 1104.0], [299.0, 868.5], [298.0, 1205.0], [297.0, 1228.0], [296.0, 1451.0], [303.0, 813.3333333333333], [302.0, 1230.0], [301.0, 1659.0], [306.0, 724.5], [309.0, 785.0], [308.0, 902.3333333333334], [311.0, 673.7777777777778], [305.0, 741.0], [304.0, 744.0], [314.0, 698.3333333333334], [315.0, 1044.0], [313.0, 736.4], [312.0, 741.7777777777778], [319.0, 738.8], [318.0, 1223.0], [310.0, 916.0], [307.0, 1069.0], [316.0, 1406.0], [317.0, 927.0], [322.0, 767.8], [320.0, 833.3333333333334], [323.0, 754.6666666666667], [324.0, 832.4], [321.0, 947.0], [325.0, 958.5], [327.0, 1472.5], [328.0, 1035.0], [330.0, 916.3333333333334], [329.0, 1242.0], [331.0, 727.0], [332.0, 855.4285714285714], [334.0, 791.3333333333333], [335.0, 832.6666666666666], [333.0, 832.2857142857143], [337.0, 850.3333333333333], [342.0, 849.2857142857143], [336.0, 863.0], [341.0, 782.75], [340.0, 895.0], [339.0, 848.5], [338.0, 1233.0], [348.0, 1089.0], [349.0, 990.5], [351.0, 1219.0], [350.0, 1390.0], [343.0, 993.0], [344.0, 910.0], [347.0, 933.0], [346.0, 1390.0], [345.0, 1199.0], [366.0, 906.8333333333334], [354.0, 883.5], [359.0, 1141.5], [353.0, 1240.0], [352.0, 1266.0], [358.0, 1322.0], [357.0, 1435.0], [356.0, 1450.0], [361.0, 1193.5], [363.0, 1111.5], [365.0, 805.8], [367.0, 977.3333333333334], [360.0, 1360.0], [364.0, 1481.0], [355.0, 1551.0], [362.0, 1413.0], [368.0, 881.2], [371.0, 1005.6666666666666], [370.0, 1452.5], [372.0, 933.6666666666667], [373.0, 861.8571428571429], [374.0, 992.3333333333334], [375.0, 1083.0], [376.0, 997.3333333333334], [377.0, 1380.0], [379.0, 1344.0], [378.0, 1323.0], [380.0, 814.6666666666666], [381.0, 762.0], [382.0, 976.0], [383.0, 1221.0], [398.0, 1079.6666666666667], [386.0, 1014.0], [385.0, 1388.0], [384.0, 1347.0], [387.0, 1320.0], [390.0, 878.6999999999999], [389.0, 1304.5], [391.0, 925.4285714285714], [392.0, 1067.3333333333333], [394.0, 1110.0], [395.0, 1243.0], [393.0, 1210.0], [399.0, 1081.0], [397.0, 1667.0], [396.0, 1425.0], [401.0, 965.0], [400.0, 982.5], [402.0, 1135.0], [403.0, 989.5], [405.0, 1160.5], [404.0, 1268.0], [407.0, 925.4], [406.0, 985.5], [408.0, 1113.0], [413.0, 1077.5], [412.0, 2332.0], [414.0, 1565.0], [415.0, 1183.0], [409.0, 1206.5], [410.0, 1050.75], [417.0, 1050.0], [418.0, 1138.0], [419.0, 1633.0], [429.0, 1607.0], [428.0, 1621.0], [422.0, 1234.5], [423.0, 1138.3333333333333], [416.0, 1273.0], [421.0, 977.3333333333334], [420.0, 1346.0], [427.0, 1052.0], [430.0, 1217.5], [431.0, 1379.0], [425.0, 1184.0], [424.0, 1872.0], [426.0, 1331.0], [444.0, 1026.888888888889], [432.0, 1288.0], [433.0, 1196.0], [435.0, 977.5], [434.0, 1169.0], [438.0, 1260.0], [437.0, 1469.0], [436.0, 1213.0], [445.0, 1000.0], [446.0, 1172.0], [447.0, 1226.0], [441.0, 1054.25], [440.0, 1118.75], [443.0, 1073.5], [442.0, 1023.0], [462.0, 1039.625], [450.0, 1185.0], [449.0, 1186.6666666666667], [448.0, 1405.0], [451.0, 1188.3333333333333], [453.0, 929.0], [452.0, 1729.0], [454.0, 855.0], [457.0, 1202.4285714285713], [459.0, 1642.0], [458.0, 1436.0], [463.0, 929.9], [461.0, 1325.0], [460.0, 1358.0], [466.0, 1144.7142857142856], [467.0, 1058.857142857143], [477.0, 1366.0], [476.0, 1342.0], [479.0, 1482.0], [478.0, 1366.0], [468.0, 1055.4], [470.0, 925.0], [471.0, 951.1428571428571], [465.0, 1022.6666666666666], [464.0, 970.7], [469.0, 969.5714285714286], [473.0, 1055.7142857142858], [472.0, 1001.5], [474.0, 1002.1666666666666], [475.0, 1184.5], [493.0, 1756.0], [482.0, 1294.0], [481.0, 1302.0], [480.0, 1311.0], [485.0, 1202.6666666666667], [484.0, 2163.0], [487.0, 1046.0], [488.0, 1066.6666666666667], [489.0, 1256.0], [491.0, 1256.0], [490.0, 1953.0], [486.0, 1019.0], [495.0, 1766.0], [494.0, 1299.0], [492.0, 1652.0], [483.0, 1296.0], [510.0, 1195.5], [497.0, 1010.6666666666666], [499.0, 1431.5], [498.0, 1587.0], [509.0, 1145.0], [508.0, 1245.0], [503.0, 1161.6666666666667], [496.0, 1435.0], [506.0, 1288.75], [505.0, 1096.5714285714287], [502.0, 1123.0], [501.0, 1557.0], [500.0, 1288.0], [504.0, 1095.875], [511.0, 1218.0], [507.0, 1099.25], [537.0, 1287.5], [512.0, 1289.5], [524.0, 1274.0], [520.0, 1166.3333333333333], [521.0, 1314.0], [523.0, 1115.5], [522.0, 1280.3333333333333], [527.0, 1450.0], [526.0, 1172.0], [525.0, 1870.0], [529.0, 1130.3333333333333], [528.0, 1749.0], [530.0, 1452.0], [543.0, 1072.0], [542.0, 1109.5], [541.0, 1273.0], [540.0, 1780.0], [539.0, 1945.0], [538.0, 1669.0], [536.0, 1133.5714285714284], [519.0, 1139.0], [518.0, 1196.0], [517.0, 1925.0], [516.0, 1324.0], [515.0, 1196.0], [514.0, 1222.0], [513.0, 1272.0], [531.0, 1213.75], [532.0, 1312.0], [533.0, 1827.0], [534.0, 1117.3333333333333], [535.0, 1463.0], [545.0, 1128.8], [544.0, 1283.0], [548.0, 1191.0], [547.0, 1473.0], [546.0, 1220.0], [550.0, 1480.0], [568.0, 1348.0], [551.0, 1957.0], [574.0, 1451.142857142857], [575.0, 1164.0], [552.0, 1413.0], [554.0, 2083.0], [553.0, 1773.0], [555.0, 1610.0], [556.0, 1336.5], [558.0, 1848.0], [557.0, 1556.0], [559.0, 1411.0], [562.0, 1397.5], [561.0, 1389.6666666666667], [563.0, 1553.5], [567.0, 1422.0], [565.0, 1359.0], [564.0, 1426.0], [603.0, 1456.0], [591.0, 1366.2], [579.0, 1290.5], [578.0, 1567.0], [577.0, 1655.0], [576.0, 1250.0], [580.0, 1549.3333333333333], [581.0, 1548.5], [600.0, 1592.5], [583.0, 1582.5], [602.0, 1400.0], [601.0, 1720.0], [604.0, 1408.0], [605.0, 1257.0], [607.0, 1906.0], [606.0, 1783.0], [584.0, 1291.0], [585.0, 1080.0], [589.0, 1164.0], [588.0, 1459.0], [587.0, 1393.8333333333335], [586.0, 1391.0], [592.0, 1280.4], [593.0, 1389.5], [594.0, 1444.0], [596.0, 1522.3333333333333], [597.0, 1496.0], [599.0, 1237.0], [598.0, 1376.6], [595.0, 1395.3333333333333], [590.0, 1474.125], [611.0, 1310.7222222222222], [610.0, 1237.5], [612.0, 1327.6875], [609.0, 1314.2307692307693], [608.0, 1343.0], [623.0, 1154.5], [622.0, 1137.0], [621.0, 1003.1111111111111], [620.0, 1437.5], [618.0, 1071.3], [619.0, 1334.0], [615.0, 1223.857142857143], [633.0, 1356.0], [632.0, 1601.0], [635.0, 993.5], [634.0, 1306.6], [637.0, 1183.2], [636.0, 1005.0], [638.0, 1109.75], [639.0, 556.2], [624.0, 344.2], [625.0, 660.1666666666666], [626.0, 1218.2], [627.0, 1069.111111111111], [630.0, 1109.1666666666665], [629.0, 824.1428571428571], [628.0, 1355.8], [631.0, 895.2857142857143], [614.0, 907.0], [613.0, 1253.111111111111], [616.0, 1222.3333333333335], [617.0, 1253.2857142857142], [644.0, 1292.8], [640.0, 962.5714285714287], [642.0, 760.4], [641.0, 890.3333333333334], [643.0, 1347.0], [645.0, 1252.2857142857142], [647.0, 1449.0], [646.0, 2003.0], [665.0, 1458.0], [666.0, 1332.0], [667.0, 1393.0], [671.0, 1355.3333333333333], [670.0, 1614.0], [669.0, 1867.0], [668.0, 2031.0], [664.0, 1654.5], [656.0, 1319.5], [658.0, 1296.25], [659.0, 1518.0], [657.0, 1483.0], [660.0, 1270.0909090909092], [661.0, 1271.875], [663.0, 1269.3333333333333], [662.0, 1320.0], [650.0, 1477.0], [649.0, 1839.0], [648.0, 1980.0], [651.0, 1415.0], [652.0, 1106.0], [653.0, 1551.0], [654.0, 1607.5], [655.0, 1243.0], [679.0, 1307.2857142857142], [673.0, 1034.0], [672.0, 1289.6666666666667], [687.0, 1431.0], [686.0, 1478.0], [685.0, 1721.0], [684.0, 2120.0], [683.0, 1834.0], [674.0, 1474.5], [676.0, 1400.0], [678.0, 1607.0], [677.0, 1734.0], [675.0, 1302.0], [682.0, 1546.5], [681.0, 1317.0], [680.0, 1471.0], [688.0, 1452.0], [703.0, 1295.6666666666667], [702.0, 1346.25], [701.0, 1362.8333333333333], [700.0, 1358.8000000000002], [696.0, 1465.5], [698.0, 1312.6666666666667], [697.0, 1556.0], [699.0, 1145.0], [689.0, 1323.75], [690.0, 1310.5], [691.0, 1421.0], [695.0, 1572.0], [694.0, 1747.0], [693.0, 1679.0], [692.0, 2102.0], [728.0, 1069.7894736842106], [717.0, 1416.909090909091], [704.0, 1728.5], [705.0, 1864.0], [707.0, 1345.0], [709.0, 1570.0], [708.0, 2040.0], [711.0, 1657.0], [710.0, 1683.0], [729.0, 1314.3333333333333], [730.0, 1082.5833333333333], [732.0, 1435.3333333333333], [733.0, 335.8], [735.0, 1178.8333333333333], [721.0, 1040.2857142857142], [720.0, 1464.1666666666667], [723.0, 790.2222222222222], [722.0, 1288.8181818181818], [734.0, 1067.6666666666667], [731.0, 1055.090909090909], [724.0, 947.6249999999999], [726.0, 1220.8095238095239], [725.0, 1166.25], [727.0, 1199.1578947368416], [706.0, 1631.0], [713.0, 1337.6666666666667], [712.0, 1347.3333333333333], [714.0, 1382.8333333333333], [716.0, 1377.0], [715.0, 1501.75], [719.0, 1260.642857142857], [718.0, 1334.2631578947369], [740.0, 1020.5714285714286], [747.0, 1175.0], [744.0, 1063.5625], [745.0, 1389.5833333333335], [746.0, 1073.3636363636365], [749.0, 1314.0], [748.0, 988.5], [751.0, 1219.4285714285716], [737.0, 549.0], [736.0, 1508.0], [739.0, 1039.857142857143], [738.0, 778.75], [750.0, 1618.2], [753.0, 1438.8125], [752.0, 1476.5], [767.0, 1417.4285714285716], [766.0, 1635.4285714285713], [765.0, 1147.6666666666667], [764.0, 838.5], [763.0, 1146.2], [760.0, 1201.2222222222222], [761.0, 1695.6363636363635], [762.0, 1600.8333333333335], [743.0, 957.6666666666667], [742.0, 677.3846153846154], [741.0, 1204.75], [755.0, 1441.4166666666667], [756.0, 1537.888888888889], [757.0, 1056.0], [759.0, 1288.142857142857], [758.0, 1584.0], [754.0, 1373.4705882352941], [775.0, 1431.2777777777776], [771.0, 1444.8750000000002], [768.0, 1103.25], [782.0, 948.1600000000002], [783.0, 653.5555555555555], [772.0, 1333.2380952380952], [770.0, 1328.0625], [769.0, 1538.0], [773.0, 1244.2142857142858], [787.0, 1317.25], [788.0, 927.4285714285714], [799.0, 888.6666666666666], [786.0, 1429.888888888889], [785.0, 1154.1666666666665], [784.0, 1381.3999999999999], [797.0, 1118.0], [798.0, 984.3333333333333], [794.0, 1017.3333333333333], [795.0, 562.0], [796.0, 1471.25], [792.0, 1472.3333333333333], [793.0, 1800.6666666666667], [790.0, 1570.6666666666665], [791.0, 1209.0666666666668], [789.0, 1155.333333333333], [774.0, 1439.608695652174], [781.0, 1238.9285714285713], [780.0, 1095.5], [779.0, 1027.2857142857144], [778.0, 1639.4444444444443], [776.0, 948.2727272727273], [777.0, 1038.5], [804.0, 1180.5], [805.0, 1561.8], [807.0, 1425.5], [825.0, 1518.5], [824.0, 1564.0], [816.0, 1531.5], [818.0, 1642.0], [819.0, 1427.3333333333333], [821.0, 1536.4285714285713], [820.0, 1598.6666666666667], [823.0, 1551.25], [822.0, 1536.3333333333335], [817.0, 1568.6363636363637], [806.0, 1331.5], [803.0, 523.0], [802.0, 1460.25], [810.0, 1560.6666666666667], [809.0, 0.0], [808.0, 1611.0], [811.0, 895.0], [813.0, 1300.25], [814.0, 1244.4285714285713], [815.0, 1158.2], [801.0, 516.6666666666666], [800.0, 1.0], [812.0, 631.2]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[506.7940000000013, 1044.2613333333322]], "isOverall": false, "label": "Create pharmacy-Aggregated", "isController": false}, {"data": [[7.0, 15.0], [8.0, 18.0], [9.0, 17.5], [12.0, 25.0], [15.0, 32.0], [17.0, 42.0], [19.0, 55.0], [22.0, 63.0], [23.0, 59.0], [24.0, 68.0], [25.0, 66.33333333333333], [26.0, 62.0], [29.0, 72.0], [30.0, 85.5], [31.0, 75.33333333333333], [32.0, 76.2], [33.0, 92.5], [35.0, 83.33333333333333], [36.0, 85.0], [37.0, 100.0], [38.0, 86.6], [39.0, 71.0], [40.0, 104.2], [44.0, 93.5], [45.0, 81.0], [46.0, 114.33333333333333], [47.0, 116.85714285714286], [49.0, 114.0], [50.0, 127.0], [53.0, 110.33333333333333], [54.0, 165.5], [58.0, 178.0], [59.0, 162.66666666666666], [60.0, 123.0], [66.0, 207.0], [67.0, 142.5], [68.0, 129.0], [69.0, 205.0], [70.0, 195.5], [71.0, 236.0], [72.0, 166.0], [75.0, 215.75], [74.0, 216.5], [73.0, 248.5], [76.0, 198.3], [77.0, 196.16666666666669], [78.0, 233.0], [79.0, 219.66666666666666], [80.0, 325.0], [81.0, 209.66666666666666], [82.0, 285.3333333333333], [83.0, 291.0], [88.0, 223.0], [89.0, 248.66666666666669], [90.0, 265.3333333333333], [91.0, 185.5], [92.0, 339.0], [94.0, 227.5], [99.0, 674.5714285714286], [101.0, 271.5], [104.0, 273.3333333333333], [106.0, 315.8], [105.0, 323.0], [107.0, 301.3333333333333], [111.0, 314.6666666666667], [110.0, 264.0], [109.0, 264.5], [112.0, 325.0], [114.0, 307.0], [115.0, 324.0], [117.0, 380.0], [120.0, 342.0], [122.0, 310.0], [121.0, 313.0], [123.0, 424.0], [126.0, 384.3333333333333], [127.0, 402.0], [128.0, 349.0], [129.0, 380.0], [130.0, 294.0], [133.0, 323.0], [134.0, 431.0], [135.0, 389.8333333333333], [137.0, 367.0], [138.0, 356.0], [139.0, 1615.0], [140.0, 410.0], [142.0, 201.0], [143.0, 357.5], [144.0, 396.0], [145.0, 328.0], [146.0, 350.3333333333333], [147.0, 313.0], [149.0, 347.6], [150.0, 324.3333333333333], [151.0, 442.5], [148.0, 3018.0], [160.0, 1197.0], [161.0, 435.5], [162.0, 1701.5], [163.0, 619.0], [164.0, 295.0], [165.0, 459.0], [166.0, 363.3333333333333], [167.0, 472.5], [169.0, 439.0], [168.0, 442.5], [170.0, 397.0], [175.0, 421.0], [172.0, 453.0], [174.0, 428.0], [173.0, 484.0], [177.0, 548.5], [176.0, 511.0], [178.0, 491.0], [179.0, 440.0], [182.0, 370.0], [183.0, 430.66666666666663], [185.0, 520.3333333333334], [186.0, 515.6666666666666], [187.0, 403.0], [188.0, 448.3333333333333], [189.0, 419.5], [191.0, 479.5], [192.0, 464.5], [194.0, 520.5], [195.0, 480.0], [196.0, 594.0], [200.0, 548.6666666666667], [201.0, 440.0], [202.0, 475.5], [203.0, 583.0], [204.0, 559.3333333333334], [205.0, 501.0], [208.0, 453.0], [209.0, 504.0], [211.0, 432.0], [212.0, 425.0], [213.0, 391.0], [214.0, 613.5], [215.0, 407.0], [216.0, 460.0], [223.0, 574.6666666666666], [222.0, 595.25], [220.0, 577.0], [219.0, 488.0], [218.0, 461.0], [221.0, 584.0], [224.0, 538.5], [225.0, 625.0], [226.0, 505.3333333333333], [227.0, 657.6666666666666], [229.0, 615.5714285714286], [230.0, 593.3333333333334], [231.0, 628.8571428571428], [228.0, 678.0], [232.0, 602.0], [239.0, 1710.0], [236.0, 2931.0], [240.0, 1738.75], [242.0, 448.0], [245.0, 764.0], [246.0, 637.6666666666666], [247.0, 697.8], [243.0, 2958.0], [249.0, 576.8571428571428], [248.0, 654.7142857142857], [250.0, 683.5], [251.0, 529.3333333333334], [252.0, 758.6666666666666], [255.0, 720.6666666666666], [253.0, 744.0], [257.0, 639.25], [260.0, 604.0], [258.0, 1102.75], [270.0, 2916.0], [269.0, 3282.0], [256.0, 615.0], [261.0, 688.0], [262.0, 541.0], [263.0, 747.1666666666666], [264.0, 994.5], [266.0, 738.0], [267.0, 869.5], [265.0, 648.0], [285.0, 548.0], [273.0, 1677.0], [272.0, 1180.4], [275.0, 667.0], [274.0, 3584.0], [277.0, 624.0], [283.0, 621.0], [286.0, 2713.0], [280.0, 3437.0], [284.0, 2945.0], [281.0, 2746.0], [289.0, 718.5], [288.0, 536.0], [290.0, 802.2], [291.0, 964.0], [292.0, 1975.4], [293.0, 654.0], [294.0, 1747.5], [295.0, 862.0], [298.0, 899.0], [300.0, 1662.3333333333335], [301.0, 1753.0], [302.0, 1212.1666666666665], [303.0, 1258.5714285714284], [299.0, 733.0], [311.0, 823.2], [306.0, 856.5714285714286], [307.0, 993.25], [317.0, 1374.3333333333335], [318.0, 1595.6], [319.0, 811.0], [308.0, 740.5], [309.0, 1677.5], [313.0, 1590.8333333333335], [314.0, 1027.0], [315.0, 3480.0], [312.0, 857.0], [310.0, 1428.3333333333335], [305.0, 792.6250000000001], [304.0, 2018.0909090909092], [321.0, 777.6666666666666], [320.0, 1486.75], [322.0, 1893.75], [324.0, 874.75], [323.0, 1648.5], [325.0, 963.6666666666666], [326.0, 934.0], [329.0, 728.0], [332.0, 1487.9166666666667], [334.0, 865.9], [335.0, 895.9090909090909], [328.0, 3173.0], [333.0, 1113.8461538461538], [330.0, 739.5], [331.0, 890.5714285714286], [348.0, 1374.6666666666667], [336.0, 1172.1666666666667], [339.0, 1064.0], [338.0, 2497.0], [351.0, 1569.0], [350.0, 2985.0], [349.0, 2528.0], [341.0, 1100.6666666666667], [340.0, 3050.6666666666665], [342.0, 1829.5], [343.0, 1580.0], [344.0, 857.3333333333334], [345.0, 725.0], [346.0, 1654.0], [347.0, 934.6666666666666], [353.0, 2148.6], [354.0, 1914.625], [355.0, 2931.75], [364.0, 895.0], [365.0, 1065.5], [366.0, 1708.0], [367.0, 1281.8333333333335], [356.0, 2087.0], [357.0, 2331.3333333333335], [358.0, 1188.0], [359.0, 829.0], [352.0, 2385.0], [361.0, 1016.0], [362.0, 892.0], [363.0, 1665.5], [370.0, 2280.2], [369.0, 1216.0], [371.0, 1074.0], [381.0, 884.0], [372.0, 1414.3333333333335], [373.0, 1045.0], [374.0, 2531.1428571428573], [375.0, 1635.3333333333333], [376.0, 2489.0], [383.0, 3121.1111111111113], [378.0, 2442.5], [377.0, 1288.5], [382.0, 993.5], [386.0, 1192.0], [385.0, 1717.0], [384.0, 3315.0], [387.0, 1115.0], [398.0, 2694.6666666666665], [399.0, 2619.6], [390.0, 1460.8333333333335], [391.0, 1242.75], [389.0, 1306.8], [392.0, 1488.0], [394.0, 969.0], [393.0, 3288.666666666667], [395.0, 2111.5], [401.0, 1564.6666666666667], [400.0, 1353.4545454545455], [402.0, 1827.3333333333333], [403.0, 2393.625], [405.0, 1820.0], [404.0, 2798.0], [406.0, 1828.0], [407.0, 1082.0], [411.0, 1237.0], [409.0, 2634.75], [408.0, 2883.5], [412.0, 988.0], [415.0, 1287.5], [417.0, 1225.75], [416.0, 2772.0], [418.0, 2251.75], [420.0, 1181.6666666666667], [421.0, 1608.5], [422.0, 1230.4285714285713], [423.0, 1238.0], [424.0, 2580.0], [426.0, 3278.0], [425.0, 3470.0], [430.0, 2036.0], [429.0, 3301.6], [428.0, 2606.0], [446.0, 1607.4], [434.0, 1989.1], [433.0, 3638.0], [432.0, 3500.5], [435.0, 2705.625], [442.0, 1806.0], [444.0, 1284.2222222222222], [445.0, 1794.75], [443.0, 1109.5], [441.0, 1131.5], [440.0, 1509.6], [447.0, 3386.0], [439.0, 1213.0], [438.0, 2121.0], [437.0, 2632.5], [449.0, 2063.3333333333335], [448.0, 2940.8], [450.0, 1773.1249999999998], [451.0, 1093.0], [452.0, 1313.0], [453.0, 1155.666666666667], [454.0, 1241.5], [455.0, 1151.0], [457.0, 2825.8], [462.0, 1533.0], [463.0, 1695.7142857142858], [461.0, 1879.6], [458.0, 1337.0], [459.0, 3422.0], [466.0, 2154.125], [465.0, 1326.0], [467.0, 1547.8888888888887], [476.0, 2635.3333333333335], [477.0, 2801.75], [478.0, 1242.5], [479.0, 3668.0], [468.0, 1635.2], [470.0, 1321.8], [472.0, 1235.2727272727273], [469.0, 2258.714285714286], [473.0, 1546.2], [474.0, 1226.0], [475.0, 3701.0], [471.0, 2054.153846153846], [464.0, 1358.5], [482.0, 1370.0], [481.0, 2137.6666666666665], [480.0, 3610.0], [483.0, 2218.5], [484.0, 2896.3333333333335], [487.0, 1201.5], [486.0, 1425.0], [493.0, 1409.0], [495.0, 2938.0], [491.0, 2829.5], [490.0, 3323.0], [489.0, 2203.0], [494.0, 2821.5], [511.0, 1714.0], [499.0, 1291.0], [501.0, 1870.5], [505.0, 1618.4], [503.0, 1519.0], [498.0, 3094.0], [502.0, 1273.0], [504.0, 1419.6666666666667], [506.0, 1423.0], [510.0, 1617.5], [509.0, 3150.5], [508.0, 3201.0], [519.0, 3009.75], [514.0, 2218.0], [512.0, 1600.0], [526.0, 1695.0], [525.0, 3670.0], [527.0, 3054.0], [515.0, 1897.0], [516.0, 1568.0], [518.0, 1894.0], [517.0, 3122.0], [528.0, 2349.0], [531.0, 2302.0], [541.0, 1416.0], [542.0, 1735.75], [543.0, 1629.5], [538.0, 2739.5], [539.0, 1352.0], [536.0, 1851.5], [537.0, 2655.6666666666665], [532.0, 2213.6666666666665], [533.0, 2563.0], [534.0, 1386.0], [535.0, 1691.5], [521.0, 3161.0], [524.0, 2925.7777777777783], [522.0, 1512.5], [523.0, 2761.0], [546.0, 1864.0], [544.0, 2751.166666666667], [547.0, 2089.5], [548.0, 2050.4], [549.0, 1835.0], [551.0, 1893.5], [561.0, 2172.0], [575.0, 3254.0], [574.0, 3153.0], [568.0, 2737.6666666666665], [571.0, 1754.5], [562.0, 1704.0], [564.0, 2518.0], [565.0, 2502.0], [567.0, 2687.0], [552.0, 1707.0], [554.0, 1636.5], [559.0, 1729.0], [558.0, 2523.3333333333335], [556.0, 1595.5], [589.0, 1832.5], [580.0, 1521.0], [581.0, 3269.6666666666665], [601.0, 2938.5], [583.0, 3241.0], [602.0, 3057.75], [604.0, 2699.6666666666665], [607.0, 2007.0], [605.0, 3608.0], [592.0, 1903.3333333333333], [595.0, 1910.5], [594.0, 2227.4], [593.0, 1893.0], [596.0, 1833.75], [597.0, 2205.1428571428573], [598.0, 2386.333333333333], [599.0, 1965.0], [579.0, 1806.0], [591.0, 1715.3333333333333], [587.0, 1729.0], [586.0, 1728.3333333333333], [585.0, 1655.5], [588.0, 1837.0], [590.0, 1803.0], [615.0, 1996.5833333333335], [611.0, 2092.5], [608.0, 2113.0], [622.0, 1789.5], [621.0, 1964.5], [620.0, 2169.5555555555557], [623.0, 2048.0], [609.0, 2176.928571428572], [610.0, 2100.0714285714284], [612.0, 1791.5454545454545], [625.0, 715.5], [639.0, 1379.857142857143], [624.0, 1466.875], [638.0, 2127.25], [637.0, 1704.25], [636.0, 2128.0], [635.0, 1581.75], [632.0, 1809.0], [634.0, 2341.75], [633.0, 2785.25], [626.0, 2147.777777777778], [627.0, 2036.2499999999998], [628.0, 1753.0], [631.0, 1988.6666666666665], [630.0, 1674.2], [629.0, 2229.777777777778], [613.0, 1475.75], [614.0, 1693.7777777777778], [616.0, 1797.5714285714287], [617.0, 2231.3333333333335], [618.0, 1689.0], [619.0, 2043.0], [645.0, 2679.5], [641.0, 1471.181818181818], [642.0, 1027.75], [640.0, 1467.625], [655.0, 2333.375], [653.0, 2080.0], [654.0, 2352.0], [643.0, 2646.0], [644.0, 2254.5714285714284], [647.0, 2157.5], [646.0, 3704.5], [664.0, 2342.5], [665.0, 2799.0], [666.0, 2662.0], [667.0, 2739.2], [669.0, 2822.5], [670.0, 2148.5], [671.0, 2812.0], [656.0, 2439.2], [657.0, 2896.3333333333335], [658.0, 3379.3333333333335], [659.0, 2331.777777777778], [660.0, 2288.4285714285716], [662.0, 2419.25], [663.0, 2533.6666666666665], [661.0, 2739.25], [649.0, 2132.0], [650.0, 2619.75], [696.0, 3074.0], [672.0, 2317.5], [674.0, 2083.5], [675.0, 3124.25], [677.0, 3825.0], [676.0, 3463.0], [681.0, 2406.333333333333], [679.0, 2321.75], [697.0, 2540.6666666666665], [698.0, 2769.8], [699.0, 2239.0], [700.0, 2625.5], [701.0, 2438.3333333333335], [702.0, 3095.0], [703.0, 2497.5], [688.0, 2465.5], [689.0, 2393.8333333333335], [690.0, 2335.4285714285716], [692.0, 2544.3333333333335], [691.0, 3403.5], [693.0, 3310.0], [694.0, 2619.0], [695.0, 2450.0], [680.0, 3180.0], [678.0, 3254.6666666666665], [682.0, 2926.25], [684.0, 4061.0], [685.0, 2578.5], [687.0, 2830.3333333333335], [706.0, 2388.3333333333335], [716.0, 2773.285714285714], [705.0, 2323.0], [719.0, 2654.181818181818], [707.0, 2275.0], [709.0, 3005.5], [708.0, 3190.5], [711.0, 3101.5], [721.0, 1510.6666666666667], [720.0, 2737.6666666666665], [735.0, 1770.75], [734.0, 2231.0], [733.0, 443.8], [732.0, 3024.0], [730.0, 1656.0], [731.0, 1687.25], [728.0, 1708.4375], [729.0, 2575.181818181818], [722.0, 934.5999999999999], [725.0, 2291.2631578947376], [724.0, 2079.125], [723.0, 476.2], [726.0, 2259.2105263157896], [727.0, 2344.4375], [712.0, 2586.5], [713.0, 2435.0], [714.0, 2273.9999999999995], [715.0, 2567.2], [718.0, 2430.1875], [717.0, 2750.2758620689665], [743.0, 2610.7272727272725], [739.0, 2137.4285714285716], [738.0, 1830.5], [737.0, 1478.4], [736.0, 2915.0], [740.0, 1508.9999999999998], [741.0, 1231.0], [742.0, 1125.4166666666665], [752.0, 2387.25], [767.0, 2333.571428571429], [766.0, 3058.0], [765.0, 2175.75], [764.0, 765.25], [763.0, 2490.166666666667], [762.0, 3160.916666666667], [760.0, 2638.0], [761.0, 3174.0], [753.0, 2607.8125000000005], [754.0, 2716.2857142857147], [755.0, 2480.625], [756.0, 2595.785714285714], [759.0, 2746.5], [758.0, 2160.2], [757.0, 2684.2], [745.0, 2432.0000000000005], [744.0, 2140.3684210526317], [746.0, 2060.923076923077], [748.0, 1888.6], [747.0, 2200.3333333333335], [749.0, 2564.1428571428573], [750.0, 2804.3333333333335], [751.0, 2117.0], [775.0, 2413.076923076923], [771.0, 2646.8750000000005], [768.0, 2957.1428571428573], [782.0, 1900.8333333333335], [783.0, 2317.947368421052], [769.0, 2697.4545454545455], [770.0, 2780.1304347826085], [772.0, 2633.9999999999995], [786.0, 2739.1874999999995], [785.0, 2838.8125], [784.0, 2511.666666666667], [787.0, 2585.6250000000005], [797.0, 2937.833333333333], [798.0, 1495.5], [799.0, 1082.6666666666665], [795.0, 2240.75], [796.0, 2947.285714285714], [792.0, 1810.3333333333335], [793.0, 3195.0], [794.0, 2206.4], [788.0, 2298.6153846153848], [789.0, 2682.583333333333], [791.0, 1834.8333333333335], [790.0, 2316.8999999999996], [773.0, 1896.25], [774.0, 2570.909090909091], [780.0, 2349.181818181818], [779.0, 2087.590909090909], [776.0, 2323.105263157895], [777.0, 2199.0], [778.0, 2396.666666666667], [781.0, 2499.181818181818], [803.0, 2060.666666666667], [801.0, 2123.8333333333335], [800.0, 2003.0], [814.0, 2339.5454545454545], [815.0, 2712.25], [812.0, 1449.125], [813.0, 2557.875], [810.0, 3168.5], [811.0, 2434.0], [802.0, 2757.5], [804.0, 2505.166666666667], [806.0, 2070.666666666667], [807.0, 2978.3333333333335], [816.0, 2566.7999999999997], [817.0, 3145.0], [818.0, 3022.0], [823.0, 3030.5], [822.0, 2941.428571428571], [821.0, 2802.0], [820.0, 2703.0], [819.0, 2997.0], [805.0, 2519.4], [809.0, 1949.6666666666667], [808.0, 3299.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}, {"data": [[530.7926666666666, 1846.9906666666639]], "isOverall": false, "label": "Get drug suggestions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 825.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 85885.83333333333, "minX": 1.71673512E12, "maxY": 207064.6, "series": [{"data": [[1.71673512E12, 85885.83333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71673512E12, 207064.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673512E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1044.2613333333322, "minX": 1.71673512E12, "maxY": 1846.9906666666639, "series": [{"data": [[1.71673512E12, 1044.2613333333322]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673512E12, 1846.9906666666639]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673512E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1038.425333333334, "minX": 1.71673512E12, "maxY": 1829.002333333336, "series": [{"data": [[1.71673512E12, 1038.425333333334]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673512E12, 1829.002333333336]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673512E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.06299999999999974, "minX": 1.71673512E12, "maxY": 0.599666666666668, "series": [{"data": [[1.71673512E12, 0.06299999999999974]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673512E12, 0.599666666666668]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673512E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.71673512E12, "maxY": 4227.0, "series": [{"data": [[1.71673512E12, 4227.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71673512E12, 14.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71673512E12, 3001.800000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71673512E12, 3756.6800000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71673512E12, 1379.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71673512E12, 3303.7]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673512E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 183.0, "maxY": 2614.0, "series": [{"data": [[183.0, 236.0], [236.0, 1332.5], [307.0, 252.0], [313.0, 1303.0], [317.0, 2614.0], [324.0, 691.5], [333.0, 1079.0], [323.0, 1988.0], [321.0, 2139.0], [341.0, 452.0], [373.0, 1679.0], [415.0, 2495.0], [414.0, 1953.0], [420.0, 2111.0], [428.0, 1501.5], [456.0, 2097.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[373.0, 1.0], [415.0, 1.0], [420.0, 1.0], [456.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 456.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 183.0, "maxY": 2611.0, "series": [{"data": [[183.0, 226.0], [236.0, 1326.0], [307.0, 243.0], [313.0, 1286.5], [317.0, 2611.0], [324.0, 680.5], [333.0, 1068.0], [323.0, 1981.0], [321.0, 2126.0], [341.0, 444.0], [373.0, 1672.0], [415.0, 2481.5], [414.0, 1949.5], [420.0, 2106.5], [428.0, 1491.0], [456.0, 2091.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[373.0, 0.0], [415.0, 0.0], [420.0, 0.0], [456.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 456.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.71673512E12, "maxY": 100.0, "series": [{"data": [[1.71673512E12, 100.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673512E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.25, "minX": 1.71673512E12, "maxY": 92.75, "series": [{"data": [[1.71673512E12, 92.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71673512E12, 7.25]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673512E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.6166666666666667, "minX": 1.71673512E12, "maxY": 46.38333333333333, "series": [{"data": [[1.71673512E12, 46.38333333333333]], "isOverall": false, "label": "Create pharmacy-success", "isController": false}, {"data": [[1.71673512E12, 46.36666666666667]], "isOverall": false, "label": "Get drug suggestions-success", "isController": false}, {"data": [[1.71673512E12, 3.6333333333333333]], "isOverall": false, "label": "Get drug suggestions-failure", "isController": false}, {"data": [[1.71673512E12, 3.6166666666666667]], "isOverall": false, "label": "Create pharmacy-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673512E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.25, "minX": 1.71673512E12, "maxY": 92.75, "series": [{"data": [[1.71673512E12, 92.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71673512E12, 7.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673512E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

