/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 4337.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 1.0], [2.2, 1.0], [2.3, 1.0], [2.4, 1.0], [2.5, 2.0], [2.6, 2.0], [2.7, 36.0], [2.8, 37.0], [2.9, 42.0], [3.0, 44.0], [3.1, 46.0], [3.2, 48.0], [3.3, 50.0], [3.4, 52.0], [3.5, 54.0], [3.6, 58.0], [3.7, 59.0], [3.8, 60.0], [3.9, 64.0], [4.0, 67.0], [4.1, 68.0], [4.2, 70.0], [4.3, 70.0], [4.4, 72.0], [4.5, 74.0], [4.6, 76.0], [4.7, 78.0], [4.8, 78.0], [4.9, 80.0], [5.0, 80.0], [5.1, 82.0], [5.2, 83.0], [5.3, 85.0], [5.4, 86.0], [5.5, 88.0], [5.6, 96.0], [5.7, 99.0], [5.8, 101.0], [5.9, 104.0], [6.0, 108.0], [6.1, 111.0], [6.2, 113.0], [6.3, 118.0], [6.4, 124.0], [6.5, 125.0], [6.6, 128.0], [6.7, 129.0], [6.8, 131.0], [6.9, 136.0], [7.0, 142.0], [7.1, 144.0], [7.2, 146.0], [7.3, 147.0], [7.4, 153.0], [7.5, 154.0], [7.6, 160.0], [7.7, 162.0], [7.8, 164.0], [7.9, 167.0], [8.0, 170.0], [8.1, 172.0], [8.2, 173.0], [8.3, 180.0], [8.4, 184.0], [8.5, 189.0], [8.6, 191.0], [8.7, 194.0], [8.8, 195.0], [8.9, 197.0], [9.0, 200.0], [9.1, 208.0], [9.2, 213.0], [9.3, 216.0], [9.4, 222.0], [9.5, 224.0], [9.6, 226.0], [9.7, 231.0], [9.8, 232.0], [9.9, 235.0], [10.0, 241.0], [10.1, 242.0], [10.2, 245.0], [10.3, 246.0], [10.4, 248.0], [10.5, 250.0], [10.6, 253.0], [10.7, 256.0], [10.8, 265.0], [10.9, 268.0], [11.0, 271.0], [11.1, 273.0], [11.2, 275.0], [11.3, 275.0], [11.4, 276.0], [11.5, 278.0], [11.6, 281.0], [11.7, 281.0], [11.8, 283.0], [11.9, 284.0], [12.0, 286.0], [12.1, 290.0], [12.2, 295.0], [12.3, 295.0], [12.4, 299.0], [12.5, 300.0], [12.6, 301.0], [12.7, 302.0], [12.8, 305.0], [12.9, 312.0], [13.0, 317.0], [13.1, 317.0], [13.2, 318.0], [13.3, 324.0], [13.4, 326.0], [13.5, 328.0], [13.6, 330.0], [13.7, 332.0], [13.8, 334.0], [13.9, 336.0], [14.0, 339.0], [14.1, 340.0], [14.2, 342.0], [14.3, 346.0], [14.4, 348.0], [14.5, 349.0], [14.6, 352.0], [14.7, 354.0], [14.8, 361.0], [14.9, 362.0], [15.0, 364.0], [15.1, 365.0], [15.2, 366.0], [15.3, 369.0], [15.4, 371.0], [15.5, 373.0], [15.6, 376.0], [15.7, 378.0], [15.8, 380.0], [15.9, 382.0], [16.0, 382.0], [16.1, 388.0], [16.2, 395.0], [16.3, 396.0], [16.4, 398.0], [16.5, 400.0], [16.6, 403.0], [16.7, 404.0], [16.8, 405.0], [16.9, 406.0], [17.0, 410.0], [17.1, 411.0], [17.2, 417.0], [17.3, 420.0], [17.4, 426.0], [17.5, 428.0], [17.6, 431.0], [17.7, 435.0], [17.8, 440.0], [17.9, 441.0], [18.0, 444.0], [18.1, 450.0], [18.2, 451.0], [18.3, 457.0], [18.4, 460.0], [18.5, 460.0], [18.6, 465.0], [18.7, 468.0], [18.8, 468.0], [18.9, 470.0], [19.0, 470.0], [19.1, 471.0], [19.2, 472.0], [19.3, 474.0], [19.4, 474.0], [19.5, 476.0], [19.6, 478.0], [19.7, 486.0], [19.8, 488.0], [19.9, 490.0], [20.0, 491.0], [20.1, 492.0], [20.2, 496.0], [20.3, 499.0], [20.4, 500.0], [20.5, 502.0], [20.6, 504.0], [20.7, 504.0], [20.8, 510.0], [20.9, 511.0], [21.0, 513.0], [21.1, 515.0], [21.2, 516.0], [21.3, 525.0], [21.4, 527.0], [21.5, 527.0], [21.6, 529.0], [21.7, 530.0], [21.8, 534.0], [21.9, 534.0], [22.0, 536.0], [22.1, 537.0], [22.2, 539.0], [22.3, 541.0], [22.4, 543.0], [22.5, 545.0], [22.6, 546.0], [22.7, 550.0], [22.8, 551.0], [22.9, 554.0], [23.0, 558.0], [23.1, 559.0], [23.2, 560.0], [23.3, 560.0], [23.4, 565.0], [23.5, 571.0], [23.6, 571.0], [23.7, 575.0], [23.8, 576.0], [23.9, 578.0], [24.0, 581.0], [24.1, 581.0], [24.2, 583.0], [24.3, 587.0], [24.4, 589.0], [24.5, 592.0], [24.6, 595.0], [24.7, 596.0], [24.8, 598.0], [24.9, 600.0], [25.0, 601.0], [25.1, 602.0], [25.2, 603.0], [25.3, 604.0], [25.4, 606.0], [25.5, 606.0], [25.6, 608.0], [25.7, 610.0], [25.8, 610.0], [25.9, 612.0], [26.0, 613.0], [26.1, 614.0], [26.2, 616.0], [26.3, 616.0], [26.4, 617.0], [26.5, 618.0], [26.6, 620.0], [26.7, 621.0], [26.8, 624.0], [26.9, 625.0], [27.0, 627.0], [27.1, 627.0], [27.2, 629.0], [27.3, 631.0], [27.4, 634.0], [27.5, 635.0], [27.6, 636.0], [27.7, 638.0], [27.8, 640.0], [27.9, 642.0], [28.0, 645.0], [28.1, 646.0], [28.2, 646.0], [28.3, 647.0], [28.4, 649.0], [28.5, 650.0], [28.6, 654.0], [28.7, 655.0], [28.8, 656.0], [28.9, 660.0], [29.0, 663.0], [29.1, 664.0], [29.2, 665.0], [29.3, 667.0], [29.4, 671.0], [29.5, 671.0], [29.6, 672.0], [29.7, 674.0], [29.8, 677.0], [29.9, 679.0], [30.0, 681.0], [30.1, 682.0], [30.2, 683.0], [30.3, 685.0], [30.4, 686.0], [30.5, 687.0], [30.6, 690.0], [30.7, 694.0], [30.8, 696.0], [30.9, 697.0], [31.0, 697.0], [31.1, 698.0], [31.2, 700.0], [31.3, 700.0], [31.4, 701.0], [31.5, 702.0], [31.6, 703.0], [31.7, 704.0], [31.8, 707.0], [31.9, 709.0], [32.0, 711.0], [32.1, 712.0], [32.2, 713.0], [32.3, 716.0], [32.4, 717.0], [32.5, 719.0], [32.6, 721.0], [32.7, 726.0], [32.8, 727.0], [32.9, 729.0], [33.0, 731.0], [33.1, 731.0], [33.2, 732.0], [33.3, 733.0], [33.4, 734.0], [33.5, 735.0], [33.6, 738.0], [33.7, 740.0], [33.8, 741.0], [33.9, 743.0], [34.0, 745.0], [34.1, 746.0], [34.2, 747.0], [34.3, 748.0], [34.4, 749.0], [34.5, 749.0], [34.6, 750.0], [34.7, 751.0], [34.8, 751.0], [34.9, 753.0], [35.0, 753.0], [35.1, 754.0], [35.2, 755.0], [35.3, 756.0], [35.4, 758.0], [35.5, 759.0], [35.6, 760.0], [35.7, 762.0], [35.8, 762.0], [35.9, 763.0], [36.0, 764.0], [36.1, 764.0], [36.2, 764.0], [36.3, 767.0], [36.4, 768.0], [36.5, 771.0], [36.6, 774.0], [36.7, 774.0], [36.8, 777.0], [36.9, 778.0], [37.0, 779.0], [37.1, 779.0], [37.2, 782.0], [37.3, 786.0], [37.4, 788.0], [37.5, 790.0], [37.6, 791.0], [37.7, 793.0], [37.8, 794.0], [37.9, 796.0], [38.0, 799.0], [38.1, 801.0], [38.2, 805.0], [38.3, 806.0], [38.4, 807.0], [38.5, 810.0], [38.6, 812.0], [38.7, 814.0], [38.8, 815.0], [38.9, 816.0], [39.0, 817.0], [39.1, 817.0], [39.2, 820.0], [39.3, 821.0], [39.4, 826.0], [39.5, 829.0], [39.6, 835.0], [39.7, 836.0], [39.8, 840.0], [39.9, 841.0], [40.0, 843.0], [40.1, 844.0], [40.2, 846.0], [40.3, 847.0], [40.4, 847.0], [40.5, 848.0], [40.6, 848.0], [40.7, 852.0], [40.8, 853.0], [40.9, 854.0], [41.0, 855.0], [41.1, 856.0], [41.2, 858.0], [41.3, 859.0], [41.4, 860.0], [41.5, 861.0], [41.6, 864.0], [41.7, 864.0], [41.8, 866.0], [41.9, 867.0], [42.0, 870.0], [42.1, 872.0], [42.2, 873.0], [42.3, 873.0], [42.4, 874.0], [42.5, 875.0], [42.6, 877.0], [42.7, 877.0], [42.8, 880.0], [42.9, 884.0], [43.0, 885.0], [43.1, 886.0], [43.2, 888.0], [43.3, 890.0], [43.4, 890.0], [43.5, 892.0], [43.6, 893.0], [43.7, 894.0], [43.8, 895.0], [43.9, 897.0], [44.0, 899.0], [44.1, 900.0], [44.2, 900.0], [44.3, 902.0], [44.4, 905.0], [44.5, 907.0], [44.6, 907.0], [44.7, 908.0], [44.8, 911.0], [44.9, 911.0], [45.0, 913.0], [45.1, 915.0], [45.2, 917.0], [45.3, 918.0], [45.4, 920.0], [45.5, 922.0], [45.6, 924.0], [45.7, 925.0], [45.8, 925.0], [45.9, 926.0], [46.0, 930.0], [46.1, 932.0], [46.2, 933.0], [46.3, 934.0], [46.4, 935.0], [46.5, 938.0], [46.6, 939.0], [46.7, 941.0], [46.8, 942.0], [46.9, 943.0], [47.0, 945.0], [47.1, 946.0], [47.2, 947.0], [47.3, 949.0], [47.4, 950.0], [47.5, 952.0], [47.6, 959.0], [47.7, 961.0], [47.8, 962.0], [47.9, 963.0], [48.0, 965.0], [48.1, 965.0], [48.2, 968.0], [48.3, 969.0], [48.4, 970.0], [48.5, 970.0], [48.6, 971.0], [48.7, 972.0], [48.8, 973.0], [48.9, 975.0], [49.0, 978.0], [49.1, 979.0], [49.2, 979.0], [49.3, 982.0], [49.4, 983.0], [49.5, 986.0], [49.6, 990.0], [49.7, 994.0], [49.8, 998.0], [49.9, 999.0], [50.0, 1001.0], [50.1, 1004.0], [50.2, 1005.0], [50.3, 1007.0], [50.4, 1008.0], [50.5, 1009.0], [50.6, 1012.0], [50.7, 1013.0], [50.8, 1016.0], [50.9, 1018.0], [51.0, 1020.0], [51.1, 1022.0], [51.2, 1022.0], [51.3, 1023.0], [51.4, 1026.0], [51.5, 1028.0], [51.6, 1029.0], [51.7, 1033.0], [51.8, 1033.0], [51.9, 1034.0], [52.0, 1036.0], [52.1, 1036.0], [52.2, 1038.0], [52.3, 1040.0], [52.4, 1041.0], [52.5, 1042.0], [52.6, 1043.0], [52.7, 1044.0], [52.8, 1045.0], [52.9, 1046.0], [53.0, 1048.0], [53.1, 1048.0], [53.2, 1049.0], [53.3, 1051.0], [53.4, 1052.0], [53.5, 1053.0], [53.6, 1054.0], [53.7, 1055.0], [53.8, 1056.0], [53.9, 1058.0], [54.0, 1060.0], [54.1, 1061.0], [54.2, 1063.0], [54.3, 1064.0], [54.4, 1065.0], [54.5, 1067.0], [54.6, 1068.0], [54.7, 1070.0], [54.8, 1072.0], [54.9, 1074.0], [55.0, 1076.0], [55.1, 1078.0], [55.2, 1079.0], [55.3, 1080.0], [55.4, 1081.0], [55.5, 1082.0], [55.6, 1083.0], [55.7, 1084.0], [55.8, 1086.0], [55.9, 1087.0], [56.0, 1091.0], [56.1, 1092.0], [56.2, 1093.0], [56.3, 1093.0], [56.4, 1095.0], [56.5, 1096.0], [56.6, 1096.0], [56.7, 1096.0], [56.8, 1099.0], [56.9, 1102.0], [57.0, 1102.0], [57.1, 1104.0], [57.2, 1106.0], [57.3, 1107.0], [57.4, 1109.0], [57.5, 1111.0], [57.6, 1114.0], [57.7, 1118.0], [57.8, 1120.0], [57.9, 1121.0], [58.0, 1123.0], [58.1, 1126.0], [58.2, 1127.0], [58.3, 1128.0], [58.4, 1130.0], [58.5, 1133.0], [58.6, 1134.0], [58.7, 1134.0], [58.8, 1135.0], [58.9, 1136.0], [59.0, 1137.0], [59.1, 1142.0], [59.2, 1145.0], [59.3, 1147.0], [59.4, 1149.0], [59.5, 1151.0], [59.6, 1154.0], [59.7, 1158.0], [59.8, 1162.0], [59.9, 1165.0], [60.0, 1165.0], [60.1, 1165.0], [60.2, 1166.0], [60.3, 1167.0], [60.4, 1172.0], [60.5, 1173.0], [60.6, 1174.0], [60.7, 1178.0], [60.8, 1182.0], [60.9, 1183.0], [61.0, 1187.0], [61.1, 1188.0], [61.2, 1188.0], [61.3, 1193.0], [61.4, 1195.0], [61.5, 1199.0], [61.6, 1203.0], [61.7, 1207.0], [61.8, 1208.0], [61.9, 1213.0], [62.0, 1214.0], [62.1, 1215.0], [62.2, 1217.0], [62.3, 1218.0], [62.4, 1222.0], [62.5, 1223.0], [62.6, 1225.0], [62.7, 1228.0], [62.8, 1229.0], [62.9, 1231.0], [63.0, 1235.0], [63.1, 1238.0], [63.2, 1241.0], [63.3, 1253.0], [63.4, 1253.0], [63.5, 1256.0], [63.6, 1259.0], [63.7, 1261.0], [63.8, 1263.0], [63.9, 1265.0], [64.0, 1267.0], [64.1, 1268.0], [64.2, 1271.0], [64.3, 1272.0], [64.4, 1273.0], [64.5, 1278.0], [64.6, 1280.0], [64.7, 1283.0], [64.8, 1284.0], [64.9, 1286.0], [65.0, 1286.0], [65.1, 1288.0], [65.2, 1291.0], [65.3, 1293.0], [65.4, 1294.0], [65.5, 1295.0], [65.6, 1296.0], [65.7, 1297.0], [65.8, 1297.0], [65.9, 1299.0], [66.0, 1301.0], [66.1, 1302.0], [66.2, 1304.0], [66.3, 1305.0], [66.4, 1306.0], [66.5, 1308.0], [66.6, 1310.0], [66.7, 1313.0], [66.8, 1315.0], [66.9, 1317.0], [67.0, 1320.0], [67.1, 1320.0], [67.2, 1321.0], [67.3, 1322.0], [67.4, 1323.0], [67.5, 1324.0], [67.6, 1325.0], [67.7, 1327.0], [67.8, 1328.0], [67.9, 1329.0], [68.0, 1331.0], [68.1, 1332.0], [68.2, 1335.0], [68.3, 1338.0], [68.4, 1340.0], [68.5, 1340.0], [68.6, 1342.0], [68.7, 1343.0], [68.8, 1344.0], [68.9, 1347.0], [69.0, 1347.0], [69.1, 1350.0], [69.2, 1352.0], [69.3, 1353.0], [69.4, 1355.0], [69.5, 1357.0], [69.6, 1358.0], [69.7, 1358.0], [69.8, 1361.0], [69.9, 1363.0], [70.0, 1365.0], [70.1, 1366.0], [70.2, 1368.0], [70.3, 1368.0], [70.4, 1369.0], [70.5, 1371.0], [70.6, 1374.0], [70.7, 1382.0], [70.8, 1385.0], [70.9, 1389.0], [71.0, 1390.0], [71.1, 1391.0], [71.2, 1392.0], [71.3, 1394.0], [71.4, 1396.0], [71.5, 1399.0], [71.6, 1400.0], [71.7, 1404.0], [71.8, 1407.0], [71.9, 1409.0], [72.0, 1410.0], [72.1, 1411.0], [72.2, 1416.0], [72.3, 1421.0], [72.4, 1424.0], [72.5, 1425.0], [72.6, 1427.0], [72.7, 1429.0], [72.8, 1429.0], [72.9, 1431.0], [73.0, 1432.0], [73.1, 1440.0], [73.2, 1441.0], [73.3, 1442.0], [73.4, 1445.0], [73.5, 1446.0], [73.6, 1447.0], [73.7, 1450.0], [73.8, 1452.0], [73.9, 1455.0], [74.0, 1457.0], [74.1, 1458.0], [74.2, 1460.0], [74.3, 1463.0], [74.4, 1463.0], [74.5, 1464.0], [74.6, 1466.0], [74.7, 1469.0], [74.8, 1473.0], [74.9, 1473.0], [75.0, 1476.0], [75.1, 1478.0], [75.2, 1482.0], [75.3, 1483.0], [75.4, 1486.0], [75.5, 1487.0], [75.6, 1488.0], [75.7, 1490.0], [75.8, 1492.0], [75.9, 1492.0], [76.0, 1494.0], [76.1, 1495.0], [76.2, 1496.0], [76.3, 1496.0], [76.4, 1497.0], [76.5, 1500.0], [76.6, 1504.0], [76.7, 1506.0], [76.8, 1507.0], [76.9, 1510.0], [77.0, 1511.0], [77.1, 1513.0], [77.2, 1514.0], [77.3, 1518.0], [77.4, 1519.0], [77.5, 1521.0], [77.6, 1521.0], [77.7, 1522.0], [77.8, 1523.0], [77.9, 1527.0], [78.0, 1528.0], [78.1, 1532.0], [78.2, 1532.0], [78.3, 1534.0], [78.4, 1536.0], [78.5, 1538.0], [78.6, 1539.0], [78.7, 1540.0], [78.8, 1540.0], [78.9, 1544.0], [79.0, 1546.0], [79.1, 1548.0], [79.2, 1550.0], [79.3, 1550.0], [79.4, 1552.0], [79.5, 1554.0], [79.6, 1557.0], [79.7, 1560.0], [79.8, 1561.0], [79.9, 1562.0], [80.0, 1563.0], [80.1, 1565.0], [80.2, 1568.0], [80.3, 1570.0], [80.4, 1571.0], [80.5, 1572.0], [80.6, 1573.0], [80.7, 1574.0], [80.8, 1575.0], [80.9, 1576.0], [81.0, 1578.0], [81.1, 1578.0], [81.2, 1582.0], [81.3, 1582.0], [81.4, 1584.0], [81.5, 1585.0], [81.6, 1587.0], [81.7, 1588.0], [81.8, 1594.0], [81.9, 1597.0], [82.0, 1598.0], [82.1, 1599.0], [82.2, 1603.0], [82.3, 1603.0], [82.4, 1604.0], [82.5, 1605.0], [82.6, 1606.0], [82.7, 1608.0], [82.8, 1612.0], [82.9, 1614.0], [83.0, 1616.0], [83.1, 1617.0], [83.2, 1621.0], [83.3, 1622.0], [83.4, 1622.0], [83.5, 1626.0], [83.6, 1627.0], [83.7, 1628.0], [83.8, 1631.0], [83.9, 1633.0], [84.0, 1635.0], [84.1, 1637.0], [84.2, 1639.0], [84.3, 1642.0], [84.4, 1644.0], [84.5, 1645.0], [84.6, 1645.0], [84.7, 1650.0], [84.8, 1654.0], [84.9, 1656.0], [85.0, 1657.0], [85.1, 1658.0], [85.2, 1659.0], [85.3, 1660.0], [85.4, 1661.0], [85.5, 1664.0], [85.6, 1664.0], [85.7, 1664.0], [85.8, 1666.0], [85.9, 1668.0], [86.0, 1669.0], [86.1, 1670.0], [86.2, 1672.0], [86.3, 1673.0], [86.4, 1673.0], [86.5, 1674.0], [86.6, 1675.0], [86.7, 1679.0], [86.8, 1681.0], [86.9, 1683.0], [87.0, 1687.0], [87.1, 1689.0], [87.2, 1692.0], [87.3, 1695.0], [87.4, 1699.0], [87.5, 1699.0], [87.6, 1699.0], [87.7, 1701.0], [87.8, 1704.0], [87.9, 1705.0], [88.0, 1706.0], [88.1, 1708.0], [88.2, 1709.0], [88.3, 1711.0], [88.4, 1715.0], [88.5, 1717.0], [88.6, 1720.0], [88.7, 1725.0], [88.8, 1726.0], [88.9, 1727.0], [89.0, 1728.0], [89.1, 1731.0], [89.2, 1732.0], [89.3, 1733.0], [89.4, 1735.0], [89.5, 1737.0], [89.6, 1738.0], [89.7, 1739.0], [89.8, 1740.0], [89.9, 1742.0], [90.0, 1744.0], [90.1, 1745.0], [90.2, 1747.0], [90.3, 1752.0], [90.4, 1753.0], [90.5, 1758.0], [90.6, 1760.0], [90.7, 1760.0], [90.8, 1762.0], [90.9, 1765.0], [91.0, 1767.0], [91.1, 1771.0], [91.2, 1772.0], [91.3, 1774.0], [91.4, 1778.0], [91.5, 1782.0], [91.6, 1787.0], [91.7, 1787.0], [91.8, 1790.0], [91.9, 1798.0], [92.0, 1808.0], [92.1, 1811.0], [92.2, 1813.0], [92.3, 1816.0], [92.4, 1816.0], [92.5, 1819.0], [92.6, 1821.0], [92.7, 1828.0], [92.8, 1830.0], [92.9, 1830.0], [93.0, 1835.0], [93.1, 1837.0], [93.2, 1839.0], [93.3, 1840.0], [93.4, 1842.0], [93.5, 1846.0], [93.6, 1847.0], [93.7, 1850.0], [93.8, 1858.0], [93.9, 1860.0], [94.0, 1862.0], [94.1, 1865.0], [94.2, 1872.0], [94.3, 1877.0], [94.4, 1881.0], [94.5, 1887.0], [94.6, 1896.0], [94.7, 1898.0], [94.8, 1899.0], [94.9, 1900.0], [95.0, 1908.0], [95.1, 1916.0], [95.2, 1921.0], [95.3, 1926.0], [95.4, 1931.0], [95.5, 1934.0], [95.6, 1940.0], [95.7, 1948.0], [95.8, 1955.0], [95.9, 1967.0], [96.0, 1973.0], [96.1, 1977.0], [96.2, 1982.0], [96.3, 1987.0], [96.4, 1990.0], [96.5, 1992.0], [96.6, 1998.0], [96.7, 2001.0], [96.8, 2013.0], [96.9, 2017.0], [97.0, 2019.0], [97.1, 2023.0], [97.2, 2028.0], [97.3, 2035.0], [97.4, 2040.0], [97.5, 2043.0], [97.6, 2050.0], [97.7, 2056.0], [97.8, 2061.0], [97.9, 2072.0], [98.0, 2078.0], [98.1, 2084.0], [98.2, 2085.0], [98.3, 2093.0], [98.4, 2103.0], [98.5, 2107.0], [98.6, 2122.0], [98.7, 2127.0], [98.8, 2156.0], [98.9, 2200.0], [99.0, 2209.0], [99.1, 2228.0], [99.2, 2246.0], [99.3, 2261.0], [99.4, 2267.0], [99.5, 2277.0], [99.6, 2288.0], [99.7, 2290.0], [99.8, 2321.0], [99.9, 2426.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 0.0], [0.1, 1.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 1.0], [1.0, 1.0], [1.1, 1.0], [1.2, 1.0], [1.3, 1.0], [1.4, 1.0], [1.5, 1.0], [1.6, 1.0], [1.7, 1.0], [1.8, 1.0], [1.9, 1.0], [2.0, 1.0], [2.1, 2.0], [2.2, 2.0], [2.3, 2.0], [2.4, 2.0], [2.5, 3.0], [2.6, 4.0], [2.7, 16.0], [2.8, 18.0], [2.9, 20.0], [3.0, 27.0], [3.1, 36.0], [3.2, 39.0], [3.3, 44.0], [3.4, 48.0], [3.5, 50.0], [3.6, 51.0], [3.7, 53.0], [3.8, 55.0], [3.9, 55.0], [4.0, 57.0], [4.1, 59.0], [4.2, 62.0], [4.3, 63.0], [4.4, 66.0], [4.5, 66.0], [4.6, 68.0], [4.7, 70.0], [4.8, 71.0], [4.9, 74.0], [5.0, 76.0], [5.1, 82.0], [5.2, 82.0], [5.3, 84.0], [5.4, 84.0], [5.5, 89.0], [5.6, 91.0], [5.7, 93.0], [5.8, 96.0], [5.9, 97.0], [6.0, 98.0], [6.1, 102.0], [6.2, 104.0], [6.3, 111.0], [6.4, 114.0], [6.5, 121.0], [6.6, 124.0], [6.7, 125.0], [6.8, 128.0], [6.9, 133.0], [7.0, 139.0], [7.1, 142.0], [7.2, 144.0], [7.3, 147.0], [7.4, 149.0], [7.5, 153.0], [7.6, 154.0], [7.7, 157.0], [7.8, 161.0], [7.9, 165.0], [8.0, 166.0], [8.1, 168.0], [8.2, 169.0], [8.3, 174.0], [8.4, 174.0], [8.5, 177.0], [8.6, 179.0], [8.7, 183.0], [8.8, 187.0], [8.9, 193.0], [9.0, 196.0], [9.1, 199.0], [9.2, 209.0], [9.3, 216.0], [9.4, 219.0], [9.5, 222.0], [9.6, 225.0], [9.7, 226.0], [9.8, 231.0], [9.9, 234.0], [10.0, 237.0], [10.1, 241.0], [10.2, 246.0], [10.3, 249.0], [10.4, 252.0], [10.5, 254.0], [10.6, 255.0], [10.7, 262.0], [10.8, 264.0], [10.9, 265.0], [11.0, 275.0], [11.1, 277.0], [11.2, 281.0], [11.3, 285.0], [11.4, 294.0], [11.5, 297.0], [11.6, 302.0], [11.7, 308.0], [11.8, 309.0], [11.9, 313.0], [12.0, 320.0], [12.1, 330.0], [12.2, 332.0], [12.3, 334.0], [12.4, 334.0], [12.5, 340.0], [12.6, 341.0], [12.7, 342.0], [12.8, 347.0], [12.9, 351.0], [13.0, 356.0], [13.1, 357.0], [13.2, 360.0], [13.3, 360.0], [13.4, 363.0], [13.5, 368.0], [13.6, 372.0], [13.7, 372.0], [13.8, 378.0], [13.9, 380.0], [14.0, 384.0], [14.1, 385.0], [14.2, 395.0], [14.3, 400.0], [14.4, 402.0], [14.5, 403.0], [14.6, 409.0], [14.7, 410.0], [14.8, 416.0], [14.9, 420.0], [15.0, 422.0], [15.1, 426.0], [15.2, 429.0], [15.3, 430.0], [15.4, 436.0], [15.5, 441.0], [15.6, 443.0], [15.7, 451.0], [15.8, 455.0], [15.9, 458.0], [16.0, 461.0], [16.1, 466.0], [16.2, 468.0], [16.3, 472.0], [16.4, 481.0], [16.5, 483.0], [16.6, 485.0], [16.7, 488.0], [16.8, 492.0], [16.9, 495.0], [17.0, 499.0], [17.1, 503.0], [17.2, 507.0], [17.3, 514.0], [17.4, 520.0], [17.5, 523.0], [17.6, 524.0], [17.7, 528.0], [17.8, 536.0], [17.9, 536.0], [18.0, 539.0], [18.1, 540.0], [18.2, 544.0], [18.3, 548.0], [18.4, 554.0], [18.5, 562.0], [18.6, 565.0], [18.7, 568.0], [18.8, 569.0], [18.9, 573.0], [19.0, 582.0], [19.1, 586.0], [19.2, 591.0], [19.3, 594.0], [19.4, 596.0], [19.5, 596.0], [19.6, 598.0], [19.7, 600.0], [19.8, 602.0], [19.9, 603.0], [20.0, 610.0], [20.1, 612.0], [20.2, 616.0], [20.3, 623.0], [20.4, 624.0], [20.5, 626.0], [20.6, 627.0], [20.7, 630.0], [20.8, 631.0], [20.9, 634.0], [21.0, 638.0], [21.1, 643.0], [21.2, 646.0], [21.3, 648.0], [21.4, 652.0], [21.5, 654.0], [21.6, 656.0], [21.7, 661.0], [21.8, 664.0], [21.9, 665.0], [22.0, 669.0], [22.1, 672.0], [22.2, 677.0], [22.3, 678.0], [22.4, 679.0], [22.5, 680.0], [22.6, 683.0], [22.7, 685.0], [22.8, 687.0], [22.9, 691.0], [23.0, 694.0], [23.1, 696.0], [23.2, 697.0], [23.3, 699.0], [23.4, 702.0], [23.5, 709.0], [23.6, 720.0], [23.7, 723.0], [23.8, 726.0], [23.9, 727.0], [24.0, 728.0], [24.1, 732.0], [24.2, 733.0], [24.3, 735.0], [24.4, 738.0], [24.5, 739.0], [24.6, 744.0], [24.7, 745.0], [24.8, 746.0], [24.9, 751.0], [25.0, 752.0], [25.1, 755.0], [25.2, 757.0], [25.3, 761.0], [25.4, 771.0], [25.5, 773.0], [25.6, 775.0], [25.7, 777.0], [25.8, 778.0], [25.9, 785.0], [26.0, 785.0], [26.1, 788.0], [26.2, 795.0], [26.3, 798.0], [26.4, 800.0], [26.5, 808.0], [26.6, 809.0], [26.7, 813.0], [26.8, 816.0], [26.9, 818.0], [27.0, 823.0], [27.1, 824.0], [27.2, 826.0], [27.3, 833.0], [27.4, 838.0], [27.5, 840.0], [27.6, 844.0], [27.7, 845.0], [27.8, 848.0], [27.9, 850.0], [28.0, 857.0], [28.1, 861.0], [28.2, 866.0], [28.3, 868.0], [28.4, 869.0], [28.5, 870.0], [28.6, 872.0], [28.7, 876.0], [28.8, 877.0], [28.9, 883.0], [29.0, 891.0], [29.1, 893.0], [29.2, 896.0], [29.3, 897.0], [29.4, 900.0], [29.5, 902.0], [29.6, 903.0], [29.7, 908.0], [29.8, 915.0], [29.9, 919.0], [30.0, 922.0], [30.1, 926.0], [30.2, 934.0], [30.3, 939.0], [30.4, 941.0], [30.5, 944.0], [30.6, 944.0], [30.7, 952.0], [30.8, 954.0], [30.9, 957.0], [31.0, 958.0], [31.1, 963.0], [31.2, 964.0], [31.3, 966.0], [31.4, 976.0], [31.5, 983.0], [31.6, 984.0], [31.7, 993.0], [31.8, 994.0], [31.9, 999.0], [32.0, 1000.0], [32.1, 1003.0], [32.2, 1004.0], [32.3, 1011.0], [32.4, 1014.0], [32.5, 1015.0], [32.6, 1019.0], [32.7, 1022.0], [32.8, 1025.0], [32.9, 1026.0], [33.0, 1032.0], [33.1, 1036.0], [33.2, 1036.0], [33.3, 1037.0], [33.4, 1042.0], [33.5, 1049.0], [33.6, 1055.0], [33.7, 1059.0], [33.8, 1060.0], [33.9, 1063.0], [34.0, 1067.0], [34.1, 1075.0], [34.2, 1077.0], [34.3, 1079.0], [34.4, 1088.0], [34.5, 1093.0], [34.6, 1094.0], [34.7, 1095.0], [34.8, 1098.0], [34.9, 1100.0], [35.0, 1108.0], [35.1, 1110.0], [35.2, 1113.0], [35.3, 1119.0], [35.4, 1121.0], [35.5, 1124.0], [35.6, 1129.0], [35.7, 1137.0], [35.8, 1140.0], [35.9, 1144.0], [36.0, 1146.0], [36.1, 1148.0], [36.2, 1155.0], [36.3, 1159.0], [36.4, 1163.0], [36.5, 1166.0], [36.6, 1167.0], [36.7, 1169.0], [36.8, 1173.0], [36.9, 1179.0], [37.0, 1185.0], [37.1, 1187.0], [37.2, 1191.0], [37.3, 1196.0], [37.4, 1198.0], [37.5, 1208.0], [37.6, 1209.0], [37.7, 1217.0], [37.8, 1222.0], [37.9, 1230.0], [38.0, 1234.0], [38.1, 1234.0], [38.2, 1237.0], [38.3, 1242.0], [38.4, 1246.0], [38.5, 1250.0], [38.6, 1251.0], [38.7, 1255.0], [38.8, 1256.0], [38.9, 1260.0], [39.0, 1261.0], [39.1, 1263.0], [39.2, 1267.0], [39.3, 1268.0], [39.4, 1270.0], [39.5, 1272.0], [39.6, 1279.0], [39.7, 1280.0], [39.8, 1280.0], [39.9, 1286.0], [40.0, 1288.0], [40.1, 1289.0], [40.2, 1296.0], [40.3, 1300.0], [40.4, 1302.0], [40.5, 1306.0], [40.6, 1311.0], [40.7, 1312.0], [40.8, 1313.0], [40.9, 1315.0], [41.0, 1317.0], [41.1, 1321.0], [41.2, 1324.0], [41.3, 1325.0], [41.4, 1331.0], [41.5, 1341.0], [41.6, 1347.0], [41.7, 1349.0], [41.8, 1357.0], [41.9, 1365.0], [42.0, 1366.0], [42.1, 1368.0], [42.2, 1371.0], [42.3, 1379.0], [42.4, 1382.0], [42.5, 1389.0], [42.6, 1391.0], [42.7, 1395.0], [42.8, 1398.0], [42.9, 1406.0], [43.0, 1408.0], [43.1, 1410.0], [43.2, 1414.0], [43.3, 1416.0], [43.4, 1422.0], [43.5, 1428.0], [43.6, 1435.0], [43.7, 1438.0], [43.8, 1439.0], [43.9, 1447.0], [44.0, 1453.0], [44.1, 1457.0], [44.2, 1467.0], [44.3, 1471.0], [44.4, 1476.0], [44.5, 1478.0], [44.6, 1480.0], [44.7, 1485.0], [44.8, 1489.0], [44.9, 1496.0], [45.0, 1497.0], [45.1, 1500.0], [45.2, 1505.0], [45.3, 1509.0], [45.4, 1513.0], [45.5, 1516.0], [45.6, 1539.0], [45.7, 1552.0], [45.8, 1553.0], [45.9, 1555.0], [46.0, 1557.0], [46.1, 1568.0], [46.2, 1568.0], [46.3, 1572.0], [46.4, 1584.0], [46.5, 1590.0], [46.6, 1596.0], [46.7, 1596.0], [46.8, 1597.0], [46.9, 1600.0], [47.0, 1607.0], [47.1, 1608.0], [47.2, 1611.0], [47.3, 1612.0], [47.4, 1620.0], [47.5, 1623.0], [47.6, 1634.0], [47.7, 1640.0], [47.8, 1643.0], [47.9, 1649.0], [48.0, 1662.0], [48.1, 1664.0], [48.2, 1668.0], [48.3, 1676.0], [48.4, 1679.0], [48.5, 1684.0], [48.6, 1689.0], [48.7, 1694.0], [48.8, 1701.0], [48.9, 1702.0], [49.0, 1715.0], [49.1, 1721.0], [49.2, 1727.0], [49.3, 1735.0], [49.4, 1744.0], [49.5, 1754.0], [49.6, 1757.0], [49.7, 1764.0], [49.8, 1766.0], [49.9, 1779.0], [50.0, 1784.0], [50.1, 1785.0], [50.2, 1794.0], [50.3, 1799.0], [50.4, 1802.0], [50.5, 1805.0], [50.6, 1806.0], [50.7, 1808.0], [50.8, 1813.0], [50.9, 1817.0], [51.0, 1828.0], [51.1, 1833.0], [51.2, 1838.0], [51.3, 1846.0], [51.4, 1851.0], [51.5, 1857.0], [51.6, 1858.0], [51.7, 1860.0], [51.8, 1864.0], [51.9, 1867.0], [52.0, 1872.0], [52.1, 1874.0], [52.2, 1881.0], [52.3, 1889.0], [52.4, 1906.0], [52.5, 1909.0], [52.6, 1920.0], [52.7, 1921.0], [52.8, 1926.0], [52.9, 1931.0], [53.0, 1946.0], [53.1, 1952.0], [53.2, 1954.0], [53.3, 1957.0], [53.4, 1965.0], [53.5, 1970.0], [53.6, 1983.0], [53.7, 1987.0], [53.8, 1988.0], [53.9, 1995.0], [54.0, 1996.0], [54.1, 1997.0], [54.2, 2005.0], [54.3, 2008.0], [54.4, 2017.0], [54.5, 2021.0], [54.6, 2022.0], [54.7, 2023.0], [54.8, 2028.0], [54.9, 2032.0], [55.0, 2036.0], [55.1, 2040.0], [55.2, 2047.0], [55.3, 2049.0], [55.4, 2051.0], [55.5, 2056.0], [55.6, 2059.0], [55.7, 2063.0], [55.8, 2066.0], [55.9, 2067.0], [56.0, 2071.0], [56.1, 2077.0], [56.2, 2079.0], [56.3, 2084.0], [56.4, 2086.0], [56.5, 2090.0], [56.6, 2091.0], [56.7, 2096.0], [56.8, 2097.0], [56.9, 2099.0], [57.0, 2101.0], [57.1, 2103.0], [57.2, 2105.0], [57.3, 2108.0], [57.4, 2113.0], [57.5, 2115.0], [57.6, 2122.0], [57.7, 2122.0], [57.8, 2125.0], [57.9, 2127.0], [58.0, 2127.0], [58.1, 2129.0], [58.2, 2131.0], [58.3, 2133.0], [58.4, 2146.0], [58.5, 2149.0], [58.6, 2153.0], [58.7, 2154.0], [58.8, 2155.0], [58.9, 2158.0], [59.0, 2160.0], [59.1, 2163.0], [59.2, 2164.0], [59.3, 2168.0], [59.4, 2170.0], [59.5, 2184.0], [59.6, 2191.0], [59.7, 2193.0], [59.8, 2194.0], [59.9, 2197.0], [60.0, 2199.0], [60.1, 2207.0], [60.2, 2209.0], [60.3, 2220.0], [60.4, 2223.0], [60.5, 2224.0], [60.6, 2226.0], [60.7, 2228.0], [60.8, 2232.0], [60.9, 2234.0], [61.0, 2234.0], [61.1, 2236.0], [61.2, 2239.0], [61.3, 2242.0], [61.4, 2252.0], [61.5, 2254.0], [61.6, 2258.0], [61.7, 2266.0], [61.8, 2270.0], [61.9, 2272.0], [62.0, 2273.0], [62.1, 2279.0], [62.2, 2282.0], [62.3, 2283.0], [62.4, 2287.0], [62.5, 2289.0], [62.6, 2292.0], [62.7, 2297.0], [62.8, 2298.0], [62.9, 2299.0], [63.0, 2301.0], [63.1, 2303.0], [63.2, 2304.0], [63.3, 2305.0], [63.4, 2306.0], [63.5, 2313.0], [63.6, 2315.0], [63.7, 2319.0], [63.8, 2321.0], [63.9, 2322.0], [64.0, 2323.0], [64.1, 2326.0], [64.2, 2328.0], [64.3, 2332.0], [64.4, 2332.0], [64.5, 2334.0], [64.6, 2335.0], [64.7, 2336.0], [64.8, 2339.0], [64.9, 2343.0], [65.0, 2345.0], [65.1, 2346.0], [65.2, 2354.0], [65.3, 2356.0], [65.4, 2358.0], [65.5, 2359.0], [65.6, 2361.0], [65.7, 2363.0], [65.8, 2366.0], [65.9, 2367.0], [66.0, 2368.0], [66.1, 2370.0], [66.2, 2371.0], [66.3, 2373.0], [66.4, 2375.0], [66.5, 2377.0], [66.6, 2383.0], [66.7, 2386.0], [66.8, 2388.0], [66.9, 2388.0], [67.0, 2394.0], [67.1, 2398.0], [67.2, 2410.0], [67.3, 2412.0], [67.4, 2416.0], [67.5, 2419.0], [67.6, 2422.0], [67.7, 2425.0], [67.8, 2432.0], [67.9, 2437.0], [68.0, 2442.0], [68.1, 2443.0], [68.2, 2445.0], [68.3, 2446.0], [68.4, 2447.0], [68.5, 2448.0], [68.6, 2450.0], [68.7, 2453.0], [68.8, 2455.0], [68.9, 2458.0], [69.0, 2460.0], [69.1, 2466.0], [69.2, 2471.0], [69.3, 2474.0], [69.4, 2476.0], [69.5, 2482.0], [69.6, 2484.0], [69.7, 2487.0], [69.8, 2489.0], [69.9, 2490.0], [70.0, 2492.0], [70.1, 2495.0], [70.2, 2501.0], [70.3, 2503.0], [70.4, 2505.0], [70.5, 2508.0], [70.6, 2510.0], [70.7, 2512.0], [70.8, 2514.0], [70.9, 2516.0], [71.0, 2517.0], [71.1, 2526.0], [71.2, 2527.0], [71.3, 2531.0], [71.4, 2532.0], [71.5, 2539.0], [71.6, 2541.0], [71.7, 2546.0], [71.8, 2547.0], [71.9, 2547.0], [72.0, 2551.0], [72.1, 2555.0], [72.2, 2557.0], [72.3, 2559.0], [72.4, 2562.0], [72.5, 2564.0], [72.6, 2567.0], [72.7, 2569.0], [72.8, 2572.0], [72.9, 2575.0], [73.0, 2577.0], [73.1, 2579.0], [73.2, 2580.0], [73.3, 2582.0], [73.4, 2583.0], [73.5, 2589.0], [73.6, 2591.0], [73.7, 2592.0], [73.8, 2594.0], [73.9, 2597.0], [74.0, 2601.0], [74.1, 2606.0], [74.2, 2607.0], [74.3, 2607.0], [74.4, 2610.0], [74.5, 2611.0], [74.6, 2612.0], [74.7, 2621.0], [74.8, 2623.0], [74.9, 2627.0], [75.0, 2629.0], [75.1, 2632.0], [75.2, 2632.0], [75.3, 2634.0], [75.4, 2636.0], [75.5, 2636.0], [75.6, 2636.0], [75.7, 2638.0], [75.8, 2639.0], [75.9, 2641.0], [76.0, 2645.0], [76.1, 2647.0], [76.2, 2648.0], [76.3, 2650.0], [76.4, 2651.0], [76.5, 2656.0], [76.6, 2656.0], [76.7, 2658.0], [76.8, 2659.0], [76.9, 2662.0], [77.0, 2665.0], [77.1, 2667.0], [77.2, 2668.0], [77.3, 2669.0], [77.4, 2671.0], [77.5, 2675.0], [77.6, 2679.0], [77.7, 2683.0], [77.8, 2683.0], [77.9, 2686.0], [78.0, 2689.0], [78.1, 2689.0], [78.2, 2690.0], [78.3, 2693.0], [78.4, 2694.0], [78.5, 2696.0], [78.6, 2698.0], [78.7, 2701.0], [78.8, 2703.0], [78.9, 2704.0], [79.0, 2707.0], [79.1, 2708.0], [79.2, 2714.0], [79.3, 2715.0], [79.4, 2716.0], [79.5, 2722.0], [79.6, 2723.0], [79.7, 2726.0], [79.8, 2728.0], [79.9, 2729.0], [80.0, 2733.0], [80.1, 2737.0], [80.2, 2743.0], [80.3, 2747.0], [80.4, 2749.0], [80.5, 2750.0], [80.6, 2750.0], [80.7, 2751.0], [80.8, 2760.0], [80.9, 2761.0], [81.0, 2762.0], [81.1, 2767.0], [81.2, 2769.0], [81.3, 2773.0], [81.4, 2777.0], [81.5, 2777.0], [81.6, 2778.0], [81.7, 2780.0], [81.8, 2782.0], [81.9, 2786.0], [82.0, 2790.0], [82.1, 2792.0], [82.2, 2798.0], [82.3, 2799.0], [82.4, 2802.0], [82.5, 2805.0], [82.6, 2807.0], [82.7, 2811.0], [82.8, 2815.0], [82.9, 2820.0], [83.0, 2823.0], [83.1, 2826.0], [83.2, 2828.0], [83.3, 2830.0], [83.4, 2833.0], [83.5, 2837.0], [83.6, 2838.0], [83.7, 2839.0], [83.8, 2848.0], [83.9, 2849.0], [84.0, 2851.0], [84.1, 2854.0], [84.2, 2859.0], [84.3, 2862.0], [84.4, 2862.0], [84.5, 2868.0], [84.6, 2869.0], [84.7, 2871.0], [84.8, 2874.0], [84.9, 2879.0], [85.0, 2881.0], [85.1, 2884.0], [85.2, 2885.0], [85.3, 2890.0], [85.4, 2900.0], [85.5, 2900.0], [85.6, 2909.0], [85.7, 2911.0], [85.8, 2911.0], [85.9, 2914.0], [86.0, 2916.0], [86.1, 2917.0], [86.2, 2922.0], [86.3, 2932.0], [86.4, 2935.0], [86.5, 2939.0], [86.6, 2941.0], [86.7, 2942.0], [86.8, 2944.0], [86.9, 2945.0], [87.0, 2955.0], [87.1, 2955.0], [87.2, 2959.0], [87.3, 2965.0], [87.4, 2968.0], [87.5, 2971.0], [87.6, 2972.0], [87.7, 2978.0], [87.8, 2979.0], [87.9, 2982.0], [88.0, 2987.0], [88.1, 2989.0], [88.2, 2992.0], [88.3, 2994.0], [88.4, 2995.0], [88.5, 2996.0], [88.6, 2996.0], [88.7, 2997.0], [88.8, 3002.0], [88.9, 3004.0], [89.0, 3009.0], [89.1, 3013.0], [89.2, 3015.0], [89.3, 3016.0], [89.4, 3018.0], [89.5, 3022.0], [89.6, 3023.0], [89.7, 3024.0], [89.8, 3030.0], [89.9, 3039.0], [90.0, 3045.0], [90.1, 3053.0], [90.2, 3055.0], [90.3, 3058.0], [90.4, 3058.0], [90.5, 3063.0], [90.6, 3067.0], [90.7, 3070.0], [90.8, 3073.0], [90.9, 3074.0], [91.0, 3077.0], [91.1, 3082.0], [91.2, 3085.0], [91.3, 3089.0], [91.4, 3089.0], [91.5, 3100.0], [91.6, 3103.0], [91.7, 3106.0], [91.8, 3111.0], [91.9, 3112.0], [92.0, 3115.0], [92.1, 3115.0], [92.2, 3119.0], [92.3, 3126.0], [92.4, 3130.0], [92.5, 3132.0], [92.6, 3133.0], [92.7, 3137.0], [92.8, 3145.0], [92.9, 3147.0], [93.0, 3149.0], [93.1, 3154.0], [93.2, 3157.0], [93.3, 3163.0], [93.4, 3167.0], [93.5, 3170.0], [93.6, 3181.0], [93.7, 3184.0], [93.8, 3186.0], [93.9, 3188.0], [94.0, 3193.0], [94.1, 3200.0], [94.2, 3205.0], [94.3, 3208.0], [94.4, 3214.0], [94.5, 3217.0], [94.6, 3219.0], [94.7, 3226.0], [94.8, 3229.0], [94.9, 3233.0], [95.0, 3241.0], [95.1, 3247.0], [95.2, 3251.0], [95.3, 3257.0], [95.4, 3261.0], [95.5, 3270.0], [95.6, 3280.0], [95.7, 3291.0], [95.8, 3299.0], [95.9, 3305.0], [96.0, 3310.0], [96.1, 3320.0], [96.2, 3333.0], [96.3, 3335.0], [96.4, 3359.0], [96.5, 3361.0], [96.6, 3372.0], [96.7, 3375.0], [96.8, 3390.0], [96.9, 3401.0], [97.0, 3406.0], [97.1, 3422.0], [97.2, 3429.0], [97.3, 3437.0], [97.4, 3438.0], [97.5, 3439.0], [97.6, 3446.0], [97.7, 3450.0], [97.8, 3454.0], [97.9, 3460.0], [98.0, 3476.0], [98.1, 3509.0], [98.2, 3513.0], [98.3, 3517.0], [98.4, 3528.0], [98.5, 3537.0], [98.6, 3554.0], [98.7, 3555.0], [98.8, 3561.0], [98.9, 3576.0], [99.0, 3619.0], [99.1, 3629.0], [99.2, 3665.0], [99.3, 3677.0], [99.4, 3699.0], [99.5, 3770.0], [99.6, 3847.0], [99.7, 3883.0], [99.8, 3913.0], [99.9, 4229.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 138.0, "series": [{"data": [[0.0, 116.0], [600.0, 127.0], [700.0, 138.0], [800.0, 119.0], [900.0, 120.0], [1000.0, 137.0], [1100.0, 94.0], [1200.0, 88.0], [1300.0, 112.0], [1400.0, 99.0], [1500.0, 114.0], [100.0, 64.0], [1600.0, 109.0], [1700.0, 86.0], [1800.0, 58.0], [1900.0, 37.0], [2000.0, 34.0], [2100.0, 10.0], [2200.0, 17.0], [2300.0, 3.0], [2400.0, 1.0], [2500.0, 1.0], [200.0, 69.0], [300.0, 80.0], [400.0, 78.0], [500.0, 89.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[0.0, 122.0], [600.0, 74.0], [700.0, 60.0], [800.0, 60.0], [900.0, 52.0], [1000.0, 58.0], [1100.0, 51.0], [1200.0, 57.0], [1300.0, 52.0], [1400.0, 45.0], [1500.0, 36.0], [100.0, 61.0], [1600.0, 38.0], [1700.0, 31.0], [1800.0, 41.0], [1900.0, 35.0], [2000.0, 56.0], [2100.0, 62.0], [2300.0, 84.0], [2200.0, 58.0], [2400.0, 60.0], [2500.0, 76.0], [2600.0, 95.0], [2800.0, 61.0], [2700.0, 73.0], [2900.0, 67.0], [3000.0, 55.0], [3100.0, 52.0], [200.0, 47.0], [3300.0, 21.0], [3200.0, 35.0], [3400.0, 24.0], [3500.0, 17.0], [3600.0, 10.0], [3700.0, 2.0], [3800.0, 4.0], [3900.0, 3.0], [4200.0, 1.0], [4300.0, 1.0], [300.0, 55.0], [400.0, 55.0], [500.0, 53.0]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 106.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1685.0, "series": [{"data": [[0.0, 643.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1685.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1566.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 106.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 459.7052499999999, "minX": 1.71673494E12, "maxY": 459.7052499999999, "series": [{"data": [[1.71673494E12, 459.7052499999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673494E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.0, "maxY": 3883.0, "series": [{"data": [[2.0, 54.0], [3.0, 43.0], [4.0, 513.0], [5.0, 446.0], [6.0, 493.0], [7.0, 646.0], [8.0, 59.0], [10.0, 178.5], [12.0, 193.0], [13.0, 268.0], [14.0, 272.0], [15.0, 70.0], [16.0, 127.0], [17.0, 73.75], [18.0, 53.0], [19.0, 245.0], [20.0, 149.5], [21.0, 127.0], [22.0, 348.0], [23.0, 275.0], [24.0, 223.0], [25.0, 62.333333333333336], [26.0, 213.0], [27.0, 382.0], [28.0, 396.0], [29.0, 399.0], [30.0, 153.0], [31.0, 118.0], [32.0, 150.6], [33.0, 203.25], [34.0, 155.0], [35.0, 248.5], [36.0, 215.0], [37.0, 70.5], [39.0, 240.75], [38.0, 409.3333333333333], [40.0, 93.5], [41.0, 456.3333333333333], [42.0, 311.5], [45.0, 821.0], [44.0, 801.0], [47.0, 514.0], [46.0, 247.0], [48.0, 361.0], [49.0, 558.0], [51.0, 382.0], [52.0, 237.5], [53.0, 250.66666666666666], [54.0, 260.0], [57.0, 177.2], [56.0, 616.0], [59.0, 450.0], [58.0, 697.0], [61.0, 349.5], [60.0, 510.0], [62.0, 157.11111111111111], [63.0, 146.33333333333334], [64.0, 142.0], [67.0, 434.5], [66.0, 978.0], [65.0, 581.0], [71.0, 213.0], [70.0, 606.0], [69.0, 965.0], [68.0, 530.0], [75.0, 230.0], [74.0, 267.0], [73.0, 617.0], [72.0, 848.0], [76.0, 494.5], [77.0, 236.5], [79.0, 542.0], [81.0, 324.5], [83.0, 355.6], [82.0, 215.0], [80.0, 978.0], [85.0, 295.5], [84.0, 128.0], [87.0, 520.0], [86.0, 753.0], [88.0, 633.5], [91.0, 1054.0], [89.0, 705.0], [95.0, 504.0], [94.0, 324.0], [93.0, 755.0], [92.0, 552.0], [96.0, 503.0], [97.0, 322.25], [98.0, 215.0], [99.0, 804.5], [101.0, 193.66666666666666], [102.0, 262.25], [103.0, 352.6666666666667], [100.0, 537.0], [105.0, 376.3333333333333], [107.0, 346.0], [106.0, 844.0], [104.0, 818.0], [111.0, 519.5], [110.0, 544.0], [109.0, 701.5], [115.0, 243.39999999999998], [114.0, 449.66666666666663], [113.0, 787.0], [112.0, 588.0], [116.0, 359.8], [119.0, 670.0], [118.0, 317.0], [117.0, 820.0], [123.0, 483.0], [122.0, 472.0], [121.0, 1034.0], [120.0, 844.0], [124.0, 302.3333333333333], [127.0, 242.0], [126.0, 420.0], [125.0, 621.0], [128.0, 471.6666666666667], [133.0, 232.5], [134.0, 650.0], [132.0, 608.0], [131.0, 934.0], [130.0, 576.0], [129.0, 475.0], [136.0, 610.6666666666666], [137.0, 323.3333333333333], [138.0, 220.0], [139.0, 336.8], [141.0, 277.5], [143.0, 975.0], [142.0, 722.0], [140.0, 749.0], [144.0, 346.0], [146.0, 517.3333333333334], [147.0, 476.5], [149.0, 660.0], [151.0, 559.0], [150.0, 1321.0], [148.0, 533.0], [145.0, 716.0], [152.0, 409.5], [156.0, 613.5], [158.0, 359.6], [159.0, 491.0], [157.0, 805.0], [155.0, 857.0], [154.0, 983.0], [153.0, 548.0], [162.0, 391.3333333333333], [164.0, 421.875], [166.0, 487.0], [167.0, 408.85714285714283], [165.0, 559.0], [163.0, 340.6666666666667], [161.0, 774.0], [160.0, 762.0], [168.0, 343.5], [169.0, 505.5], [170.0, 374.0], [171.0, 479.0], [172.0, 514.0], [175.0, 409.25], [174.0, 1023.0], [173.0, 943.0], [176.0, 450.0], [179.0, 332.5], [183.0, 717.0], [182.0, 665.0], [181.0, 765.0], [180.0, 907.0], [178.0, 699.0], [177.0, 843.0], [184.0, 569.5], [186.0, 540.5], [190.0, 360.0], [189.0, 479.5], [188.0, 733.0], [191.0, 796.0], [187.0, 935.0], [185.0, 1006.0], [199.0, 532.6666666666666], [198.0, 552.6666666666666], [197.0, 636.0], [196.0, 916.0], [195.0, 793.0], [194.0, 920.0], [193.0, 1096.0], [192.0, 949.0], [201.0, 526.0], [206.0, 500.1], [205.0, 479.25], [207.0, 656.0], [204.0, 1614.0], [203.0, 1059.0], [202.0, 742.0], [200.0, 501.0], [211.0, 618.0], [212.0, 527.6666666666666], [213.0, 653.0], [215.0, 700.0], [214.0, 1151.0], [210.0, 723.0], [209.0, 686.0], [217.0, 541.0], [222.0, 559.0], [223.0, 648.0], [221.0, 727.0], [220.0, 1165.0], [219.0, 664.0], [218.0, 1102.0], [216.0, 1057.0], [225.0, 528.0], [229.0, 517.4], [230.0, 626.0], [228.0, 765.5], [231.0, 572.0], [227.0, 636.0], [226.0, 762.0], [224.0, 740.0], [232.0, 436.0], [233.0, 545.1111111111111], [234.0, 635.6666666666666], [235.0, 657.5], [236.0, 650.0], [239.0, 555.5], [238.0, 732.0], [237.0, 574.0], [241.0, 566.0], [240.0, 671.0], [242.0, 476.0], [246.0, 483.0], [245.0, 627.0], [250.0, 470.0], [249.0, 610.0], [248.0, 526.5], [251.0, 848.5], [254.0, 843.0], [255.0, 718.5], [253.0, 1132.2727272727273], [269.0, 619.5], [258.0, 632.25], [256.0, 701.0], [257.0, 690.0], [263.0, 905.0], [259.0, 652.25], [268.0, 560.25], [260.0, 530.4], [261.0, 922.0], [262.0, 799.25], [264.0, 717.5], [265.0, 647.5], [267.0, 693.5714285714286], [270.0, 597.0], [271.0, 565.0], [280.0, 696.0], [284.0, 695.0], [275.0, 1184.0], [274.0, 1082.0], [273.0, 698.0], [272.0, 947.5], [283.0, 938.5], [282.0, 625.6666666666666], [281.0, 737.5], [279.0, 738.5], [278.0, 704.5], [277.0, 815.0], [276.0, 959.0], [287.0, 901.5], [286.0, 815.0], [285.0, 530.5], [302.0, 695.3333333333334], [290.0, 595.6], [292.0, 854.3333333333334], [294.0, 1397.0], [289.0, 816.0], [288.0, 680.0], [293.0, 773.0], [291.0, 817.0], [299.0, 665.5], [301.0, 747.3333333333334], [303.0, 875.0], [297.0, 930.0], [296.0, 935.5], [300.0, 1075.0], [298.0, 627.0], [317.0, 792.5], [305.0, 730.0], [306.0, 819.5], [311.0, 562.5], [304.0, 677.0], [310.0, 982.0], [309.0, 1223.0], [308.0, 895.0], [312.0, 885.0], [313.0, 774.0], [319.0, 746.75], [318.0, 789.75], [316.0, 1241.0], [307.0, 734.0], [315.0, 1446.0], [314.0, 1295.0], [320.0, 593.0], [325.0, 766.3333333333333], [324.0, 717.0], [326.0, 644.625], [328.0, 783.7142857142857], [327.0, 876.3333333333334], [329.0, 707.8571428571429], [331.0, 887.0], [330.0, 890.0], [333.0, 837.5], [332.0, 571.0], [323.0, 1293.0], [322.0, 1346.0], [321.0, 1357.0], [334.0, 817.0], [336.0, 901.6666666666666], [337.0, 658.7142857142858], [338.0, 1655.0], [343.0, 847.0], [340.0, 939.0], [342.0, 740.0], [341.0, 666.0], [346.0, 924.75], [347.0, 947.0], [345.0, 783.0], [344.0, 825.6666666666666], [351.0, 787.4444444444445], [350.0, 699.0], [349.0, 1111.5], [348.0, 752.0], [352.0, 848.75], [356.0, 838.5], [355.0, 899.0], [354.0, 1846.0], [353.0, 1061.0], [357.0, 879.5], [360.0, 678.2857142857143], [358.0, 905.5], [359.0, 816.0], [361.0, 804.8333333333334], [363.0, 963.3333333333334], [362.0, 950.0], [365.0, 874.5], [367.0, 1145.0], [366.0, 913.0], [364.0, 1052.25], [381.0, 926.3333333333334], [370.0, 704.0], [375.0, 870.6666666666666], [369.0, 856.0], [368.0, 852.0], [374.0, 1016.0], [373.0, 825.0], [372.0, 808.0], [380.0, 839.0], [371.0, 1382.0], [379.0, 1049.6666666666667], [378.0, 892.0], [383.0, 786.0], [377.0, 1107.0], [376.0, 1328.0], [396.0, 967.3333333333334], [385.0, 1020.0], [384.0, 687.5], [387.0, 698.0], [389.0, 851.0], [390.0, 1089.4444444444443], [391.0, 1062.0], [392.0, 872.6666666666666], [393.0, 1193.0], [398.0, 878.4285714285714], [397.0, 1285.5], [399.0, 857.875], [395.0, 935.0], [394.0, 1675.0], [400.0, 873.5714285714286], [401.0, 1074.0], [403.0, 877.0], [402.0, 1055.0], [413.0, 1429.0], [412.0, 1432.0], [404.0, 989.0], [406.0, 813.5], [405.0, 817.0], [407.0, 656.0], [410.0, 1082.0], [411.0, 973.0], [414.0, 969.5], [415.0, 1083.0], [409.0, 1044.0], [408.0, 1297.0], [417.0, 1050.6666666666667], [416.0, 832.0], [419.0, 1162.5], [418.0, 1286.0], [429.0, 1496.0], [428.0, 1097.0], [423.0, 1133.6666666666667], [422.0, 1032.0], [421.0, 921.0], [420.0, 1229.0], [427.0, 1053.5], [426.0, 822.0], [430.0, 1047.0], [431.0, 952.3333333333334], [425.0, 1326.0], [424.0, 1253.0], [447.0, 836.4285714285714], [437.0, 1019.0], [436.0, 1029.0], [440.0, 1001.5], [439.0, 1022.75], [441.0, 1032.5], [442.0, 827.0], [443.0, 912.0], [444.0, 734.0], [435.0, 1049.0], [434.0, 902.0], [433.0, 1078.0], [432.0, 965.0], [446.0, 1593.0], [445.0, 873.0], [451.0, 846.75], [450.0, 882.0], [448.0, 846.0], [456.0, 1026.25], [455.0, 988.3333333333334], [454.0, 970.4], [453.0, 951.3333333333334], [452.0, 1029.0], [457.0, 949.2], [459.0, 956.6666666666666], [458.0, 1024.6666666666667], [461.0, 1003.3333333333334], [463.0, 1223.0], [462.0, 1366.0], [460.0, 876.3333333333334], [465.0, 1191.0], [464.0, 1024.0], [466.0, 1124.0], [467.0, 1015.0], [468.0, 1028.0], [469.0, 974.5], [471.0, 1071.3333333333333], [470.0, 1321.0], [474.0, 1085.0], [475.0, 1231.0], [473.0, 1177.5], [477.0, 1018.0], [478.0, 1080.0], [479.0, 1259.0], [472.0, 774.0], [476.0, 956.5], [494.0, 1242.0], [481.0, 1025.8], [480.0, 1262.0], [483.0, 925.0], [482.0, 1663.0], [484.0, 751.0], [486.0, 1269.0], [485.0, 1199.5], [487.0, 945.5], [489.0, 1630.0], [490.0, 912.5], [491.0, 854.0], [495.0, 1070.2], [488.0, 1583.0], [493.0, 1025.0], [492.0, 1296.5], [508.0, 1127.0], [497.0, 1085.0], [496.0, 1076.1666666666667], [498.0, 1122.6666666666667], [499.0, 1096.0], [504.0, 1093.3333333333333], [503.0, 1475.5], [502.0, 1024.5], [501.0, 1752.0], [500.0, 1096.0], [507.0, 1267.5], [506.0, 1701.0], [505.0, 2277.0], [509.0, 1113.8333333333333], [510.0, 1457.5], [511.0, 1047.0], [537.0, 1273.25], [513.0, 1536.6666666666667], [512.0, 848.0], [527.0, 1497.0], [526.0, 1114.0], [514.0, 993.0], [515.0, 1024.5], [533.0, 1058.5833333333333], [532.0, 1041.75], [531.0, 1195.1666666666667], [536.0, 1279.1666666666665], [519.0, 1182.25], [542.0, 1071.0], [541.0, 1106.0], [540.0, 1068.0], [539.0, 1118.0], [538.0, 1389.0], [543.0, 1473.0], [528.0, 1033.0], [530.0, 1565.0], [529.0, 1303.0], [534.0, 1164.857142857143], [535.0, 1415.5], [521.0, 1080.0], [520.0, 1286.0], [523.0, 1091.3333333333333], [522.0, 1309.5], [524.0, 987.8], [525.0, 1064.6666666666667], [570.0, 1220.6666666666667], [546.0, 1279.0], [547.0, 1316.25], [548.0, 1025.0], [545.0, 1481.3333333333333], [549.0, 1435.0], [556.0, 1147.75], [555.0, 1626.0], [554.0, 886.0], [553.0, 1506.0], [552.0, 1272.0], [557.0, 1750.0], [558.0, 1310.5], [559.0, 1445.0], [544.0, 1093.0], [566.0, 1363.3333333333333], [568.0, 1398.5], [551.0, 1053.0], [550.0, 1083.0], [569.0, 1292.0], [571.0, 1323.5], [573.0, 1463.0], [572.0, 1126.0], [574.0, 1052.0], [575.0, 1576.0], [561.0, 1496.0], [560.0, 1199.0], [563.0, 1178.0], [562.0, 1104.0], [565.0, 1532.0], [564.0, 2261.0], [567.0, 1268.3333333333333], [580.0, 1471.0], [585.0, 1044.5], [584.0, 1357.5], [587.0, 1243.5], [586.0, 1550.0], [589.0, 1798.0], [588.0, 1668.0], [591.0, 1828.0], [577.0, 1087.0], [576.0, 1685.0], [579.0, 1737.0], [578.0, 1215.0], [590.0, 1297.0], [595.0, 1280.3333333333333], [594.0, 1385.0], [593.0, 1313.0], [592.0, 1500.0], [606.0, 1272.0], [605.0, 1742.0], [604.0, 1174.0], [603.0, 1284.0], [602.0, 971.0], [607.0, 1462.0], [596.0, 1617.6666666666667], [599.0, 1412.0], [598.0, 1246.5], [597.0, 999.0], [600.0, 1213.75], [583.0, 1588.0], [582.0, 1760.0], [581.0, 1324.0], [601.0, 1285.5], [615.0, 1374.0], [621.0, 1807.5], [616.0, 1427.0], [617.0, 1746.5], [619.0, 1474.0], [618.0, 1695.0], [620.0, 1241.5], [622.0, 1405.1666666666667], [623.0, 1392.0], [625.0, 1389.5], [624.0, 1407.0], [627.0, 1534.0], [626.0, 1368.0], [639.0, 1521.0], [638.0, 1599.0], [637.0, 1416.0], [636.0, 1632.0], [633.0, 1660.5], [632.0, 1994.0], [614.0, 1572.0], [613.0, 1333.0], [612.0, 2056.0], [611.0, 1513.0], [610.0, 1214.0], [609.0, 1173.0], [608.0, 968.0], [634.0, 1606.0], [635.0, 1538.0], [628.0, 1584.0], [631.0, 1484.5], [630.0, 1617.0], [629.0, 979.0], [645.0, 1344.0], [643.0, 1307.6666666666667], [642.0, 1431.5], [641.0, 1469.0], [640.0, 1310.0], [655.0, 1567.0], [653.0, 1486.0], [652.0, 1560.0], [651.0, 1982.0], [644.0, 1522.0], [646.0, 1557.0], [647.0, 1466.75], [664.0, 1658.8], [665.0, 1630.142857142857], [667.0, 1615.6666666666667], [666.0, 1684.0], [670.0, 1798.25], [671.0, 1343.0], [657.0, 1787.0], [656.0, 1973.0], [669.0, 1814.0], [668.0, 1532.2], [649.0, 1627.6666666666667], [648.0, 1699.0], [650.0, 1431.5], [658.0, 1554.6666666666667], [659.0, 1827.3333333333333], [660.0, 1782.6666666666667], [661.0, 1672.6], [662.0, 1671.5], [663.0, 1653.0], [696.0, 1563.5], [672.0, 1828.0], [676.0, 1636.6666666666667], [677.0, 1455.0], [679.0, 1295.0], [678.0, 1767.0], [697.0, 1553.5], [698.0, 1762.0], [700.0, 1367.0], [699.0, 1582.0], [701.0, 1738.0], [703.0, 1492.0], [688.0, 1898.0], [702.0, 1610.5], [675.0, 1655.3333333333333], [674.0, 1288.0], [673.0, 1188.0], [684.0, 1716.0], [683.0, 1946.5], [682.0, 2025.0], [681.0, 2013.0], [680.0, 1836.0], [685.0, 1617.3333333333333], [686.0, 1615.6666666666667], [687.0, 1643.0], [689.0, 1592.6666666666667], [690.0, 1641.6666666666667], [691.0, 1540.0], [693.0, 1664.0], [692.0, 1568.0], [695.0, 1355.5], [694.0, 1498.0], [711.0, 1906.6666666666667], [706.0, 1738.0], [704.0, 1636.8333333333335], [707.0, 1592.8333333333335], [705.0, 1816.0], [708.0, 1676.0], [710.0, 1764.6666666666667], [709.0, 1486.0], [725.0, 1813.3333333333333], [727.0, 2028.0], [726.0, 1740.0], [724.0, 1593.3333333333333], [723.0, 1477.0], [722.0, 1699.0], [721.0, 1642.0], [720.0, 1429.0], [735.0, 1872.0], [734.0, 1768.0], [733.0, 1830.0], [732.0, 2061.0], [731.0, 1733.0], [730.0, 2042.0], [729.0, 1839.0], [728.0, 1380.0], [712.0, 1805.5], [713.0, 1899.0], [715.0, 1404.0], [714.0, 2064.0], [716.0, 1682.6666666666667], [717.0, 1726.0], [718.0, 1464.0], [719.0, 1392.0], [760.0, 1788.363636363636], [747.0, 1951.0], [740.0, 1909.3333333333333], [739.0, 1433.5], [751.0, 1991.0], [737.0, 1840.0], [736.0, 1427.0], [738.0, 1321.0], [741.0, 1724.3333333333333], [743.0, 1299.0], [742.0, 1787.0], [762.0, 1751.3333333333335], [761.0, 1428.5], [763.0, 1524.090909090909], [764.0, 1536.0], [765.0, 1807.8], [766.0, 1292.0], [767.0, 1483.0], [754.0, 1628.0], [753.0, 1773.0], [752.0, 1658.0], [756.0, 1520.25], [759.0, 1783.3333333333333], [757.0, 1708.0], [755.0, 1561.0], [744.0, 1671.5], [745.0, 1758.3333333333333], [746.0, 2000.25], [749.0, 1656.0], [748.0, 1424.0], [750.0, 1449.0], [794.0, 671.0], [784.0, 1669.4545454545453], [769.0, 1464.0], [768.0, 1475.6666666666667], [793.0, 1634.6], [792.0, 775.3333333333334], [775.0, 1800.0], [774.0, 1731.0], [773.0, 1363.0], [772.0, 1790.0], [771.0, 1327.0], [770.0, 1776.0], [799.0, 1292.142857142857], [798.0, 1595.6], [797.0, 1681.3333333333333], [796.0, 797.75], [795.0, 1278.25], [780.0, 1739.5], [779.0, 1840.0], [778.0, 1934.0], [777.0, 1476.0], [776.0, 1809.0], [782.0, 1828.0], [781.0, 1819.0], [783.0, 1464.0], [787.0, 1672.8749999999998], [789.0, 1142.0], [788.0, 1940.0], [786.0, 2067.3333333333335], [785.0, 1877.0], [791.0, 1360.5], [790.0, 1308.75], [805.0, 1230.6], [801.0, 1545.8], [803.0, 1522.5384615384617], [802.0, 1357.909090909091], [804.0, 600.7272727272727], [806.0, 1038.7142857142858], [807.0, 1290.0], [825.0, 1893.5], [824.0, 1771.5], [817.0, 745.0999999999999], [816.0, 1461.4166666666667], [821.0, 1597.5], [822.0, 1764.0], [823.0, 1255.0], [819.0, 1495.857142857143], [820.0, 1456.2857142857144], [818.0, 1165.857142857143], [810.0, 1559.1666666666665], [809.0, 1762.75], [808.0, 783.5], [812.0, 1219.4], [813.0, 1417.4], [815.0, 1442.125], [800.0, 921.0], [814.0, 1774.857142857143], [811.0, 455.00000000000006], [1.0, 42.0]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[444.26099999999985, 1014.2724999999987]], "isOverall": false, "label": "Create pharmacy-Aggregated", "isController": false}, {"data": [[7.0, 16.0], [9.0, 17.5], [10.0, 18.0], [12.0, 21.0], [15.0, 33.0], [16.0, 29.0], [18.0, 44.5], [19.0, 50.0], [20.0, 45.666666666666664], [21.0, 61.333333333333336], [22.0, 66.0], [23.0, 51.5], [25.0, 57.0], [28.0, 51.0], [29.0, 75.0], [30.0, 65.0], [31.0, 70.66666666666667], [32.0, 70.2], [33.0, 74.0], [34.0, 91.0], [35.0, 73.5], [36.0, 1665.0], [37.0, 91.83333333333333], [40.0, 107.5], [41.0, 96.33333333333333], [42.0, 102.0], [43.0, 113.5], [44.0, 101.0], [47.0, 88.0], [49.0, 59.0], [51.0, 517.7142857142857], [52.0, 128.0], [53.0, 154.0], [57.0, 138.83333333333334], [58.0, 97.0], [61.0, 152.0], [62.0, 155.25], [63.0, 163.0], [64.0, 181.0], [65.0, 139.0], [66.0, 179.0], [67.0, 1491.5], [68.0, 174.0], [69.0, 147.0], [70.0, 216.0], [72.0, 216.0], [73.0, 206.0], [75.0, 158.75], [74.0, 1250.6666666666667], [77.0, 166.0], [81.0, 164.5], [82.0, 244.0], [83.0, 2868.0], [84.0, 124.0], [85.0, 205.0], [86.0, 1598.5], [87.0, 196.0], [88.0, 188.33333333333334], [90.0, 142.0], [91.0, 225.0], [93.0, 2868.0], [97.0, 189.0], [99.0, 186.0], [101.0, 951.75], [103.0, 290.2], [100.0, 166.0], [107.0, 270.0], [109.0, 222.0], [110.0, 280.0], [114.0, 295.44444444444446], [115.0, 324.0], [116.0, 362.5], [118.0, 442.0], [121.0, 299.0], [122.0, 352.0], [123.0, 288.6666666666667], [124.0, 351.0], [125.0, 367.0], [126.0, 258.0], [128.0, 327.0], [132.0, 395.0], [133.0, 543.0], [135.0, 339.5], [137.0, 325.6666666666667], [138.0, 223.66666666666666], [139.0, 337.5], [140.0, 346.0], [141.0, 432.0], [142.0, 310.0], [143.0, 483.0], [145.0, 329.5], [146.0, 349.5], [147.0, 1146.6666666666665], [148.0, 441.5], [149.0, 485.5], [151.0, 594.0], [152.0, 554.0], [153.0, 451.0], [154.0, 360.0], [155.0, 525.0], [156.0, 1738.5], [157.0, 1094.25], [159.0, 3159.0], [161.0, 367.0], [162.0, 289.0], [163.0, 412.8], [166.0, 434.3333333333333], [167.0, 510.1428571428571], [164.0, 407.0], [165.0, 377.0], [168.0, 414.0], [169.0, 1787.0], [170.0, 403.0], [172.0, 264.0], [173.0, 1475.5], [174.0, 494.0], [175.0, 505.4], [176.0, 231.0], [177.0, 546.0], [178.0, 586.5], [179.0, 2138.2], [180.0, 648.0], [182.0, 1508.0], [183.0, 1292.3333333333335], [181.0, 2838.0], [189.0, 330.0], [188.0, 1136.6666666666665], [187.0, 1852.5], [185.0, 534.0], [191.0, 1814.0], [193.0, 378.0], [195.0, 448.0], [198.0, 437.3333333333333], [199.0, 584.75], [194.0, 2798.0], [200.0, 365.0], [201.0, 530.6666666666666], [205.0, 573.8571428571429], [204.0, 583.0], [206.0, 1564.5], [207.0, 721.0], [208.0, 598.5], [210.0, 1905.25], [212.0, 1500.0], [211.0, 507.0], [213.0, 337.5], [215.0, 544.0], [214.0, 2667.0], [218.0, 596.0], [220.0, 536.0], [221.0, 262.0], [222.0, 496.0], [223.0, 1124.0], [224.0, 1655.75], [226.0, 1280.6666666666665], [229.0, 1157.0], [228.0, 672.0], [230.0, 1050.8], [231.0, 681.2857142857142], [227.0, 2791.6666666666665], [225.0, 3529.0], [232.0, 1059.7], [233.0, 652.0], [234.0, 961.75], [235.0, 1224.75], [236.0, 1860.0], [239.0, 1323.0], [238.0, 1745.8], [237.0, 811.0], [240.0, 752.0], [243.0, 565.0], [247.0, 502.0], [250.0, 565.5], [252.0, 582.0], [255.0, 697.0], [253.0, 2484.25], [258.0, 1609.5714285714284], [259.0, 616.8], [268.0, 767.0], [270.0, 956.9999999999999], [271.0, 569.0], [269.0, 738.25], [257.0, 1720.0], [260.0, 777.3333333333334], [261.0, 750.0], [262.0, 1076.0], [263.0, 738.0], [264.0, 844.0], [266.0, 770.6666666666666], [267.0, 783.3333333333334], [274.0, 2266.6666666666665], [272.0, 777.0], [273.0, 2428.0], [275.0, 1557.0], [276.0, 778.3333333333334], [277.0, 655.25], [278.0, 709.0], [279.0, 2746.0], [280.0, 1456.3333333333335], [282.0, 1396.75], [281.0, 833.0], [283.0, 835.0], [284.0, 709.0], [287.0, 2124.6666666666665], [286.0, 3210.5], [290.0, 1116.5], [291.0, 1062.6666666666667], [301.0, 1854.5], [302.0, 765.5], [303.0, 765.0], [292.0, 1549.4], [293.0, 1064.5], [294.0, 724.0], [295.0, 918.5], [288.0, 2771.0], [296.0, 2073.3333333333335], [299.0, 1062.0], [298.0, 616.0], [307.0, 744.5], [304.0, 855.6666666666666], [309.0, 2331.0], [308.0, 3305.0], [305.0, 737.0], [306.0, 1552.4], [312.0, 449.5], [314.0, 1976.0], [313.0, 2995.0], [317.0, 846.0], [316.0, 3229.0], [319.0, 633.0], [318.0, 2279.8], [327.0, 1099.125], [322.0, 2329.6666666666665], [321.0, 2936.6666666666665], [323.0, 2298.0], [324.0, 848.5], [325.0, 1182.5], [326.0, 839.3333333333334], [328.0, 943.1666666666666], [329.0, 2389.8333333333335], [330.0, 2757.5], [332.0, 885.6], [333.0, 2638.0], [338.0, 1766.0], [336.0, 681.25], [337.0, 847.0], [343.0, 1176.6666666666667], [342.0, 837.3333333333334], [341.0, 940.3333333333333], [339.0, 818.0], [349.0, 1031.8], [348.0, 2773.0], [351.0, 1116.8333333333335], [350.0, 885.7500000000001], [344.0, 1035.0], [345.0, 1002.0], [346.0, 1758.5], [347.0, 2164.0], [364.0, 1183.0], [354.0, 1871.0], [352.0, 2020.5], [355.0, 1003.0], [359.0, 1606.6], [358.0, 1182.75], [357.0, 2609.0], [356.0, 2822.75], [360.0, 2057.5], [361.0, 1306.25], [363.0, 1057.0], [366.0, 3026.5], [365.0, 3127.0], [362.0, 895.25], [382.0, 1238.75], [369.0, 1837.8], [370.0, 981.6666666666666], [371.0, 3517.0], [373.0, 2212.6666666666665], [372.0, 3234.0], [374.0, 2624.75], [375.0, 1979.6666666666667], [376.0, 1015.0], [383.0, 889.5], [380.0, 1398.0], [381.0, 1738.4], [379.0, 1699.4], [378.0, 2751.0], [377.0, 903.0], [385.0, 1352.0], [384.0, 1041.2222222222222], [387.0, 1553.0], [396.0, 2262.75], [398.0, 1270.2222222222222], [397.0, 1653.0], [399.0, 1953.4285714285716], [389.0, 1152.0], [390.0, 2712.5], [391.0, 1043.0], [392.0, 1013.0], [393.0, 2031.25], [394.0, 957.0], [395.0, 1079.0], [401.0, 1243.0], [400.0, 623.0], [402.0, 1256.0], [403.0, 2295.0], [405.0, 1846.4545454545455], [406.0, 1381.0], [407.0, 897.0], [410.0, 1763.5], [411.0, 1501.0], [409.0, 681.0], [414.0, 2289.6666666666665], [413.0, 1879.0], [417.0, 1954.4], [416.0, 2432.0], [418.0, 1564.25], [419.0, 1453.0], [420.0, 1450.0], [422.0, 944.0], [429.0, 1251.0], [430.0, 1582.0], [431.0, 1143.8], [428.0, 2524.5], [426.0, 1284.1666666666667], [427.0, 1654.0], [423.0, 1615.0], [435.0, 966.0], [433.0, 1063.0], [432.0, 1817.3333333333335], [434.0, 1630.3333333333333], [437.0, 1439.75], [436.0, 2689.0], [439.0, 1828.5], [440.0, 1060.0], [441.0, 2863.0], [446.0, 2044.0], [447.0, 2071.5], [444.0, 2375.111111111111], [445.0, 1095.0], [442.0, 2183.0], [443.0, 1893.1666666666665], [450.0, 1904.6666666666667], [449.0, 1549.0], [451.0, 699.0], [460.0, 1620.090909090909], [463.0, 2418.0], [462.0, 2990.8], [453.0, 1367.4], [454.0, 1457.7142857142858], [456.0, 1308.5], [457.0, 1769.1666666666667], [455.0, 1178.0], [448.0, 2594.0], [458.0, 1992.0], [459.0, 1286.8], [476.0, 1655.0], [465.0, 1849.75], [464.0, 1645.5], [467.0, 1697.5], [466.0, 2615.0], [468.0, 1780.6], [470.0, 2234.0], [469.0, 2439.0], [471.0, 1811.5], [475.0, 1201.0], [474.0, 2955.0], [472.0, 1296.5], [478.0, 940.0], [492.0, 2054.3333333333335], [481.0, 1113.5], [482.0, 1197.5], [484.0, 1341.0], [486.0, 2656.0], [480.0, 2490.0], [488.0, 1159.0], [493.0, 1400.75], [495.0, 1277.6999999999998], [494.0, 1361.0], [489.0, 2955.4], [499.0, 1862.5], [497.0, 1526.8], [496.0, 1384.25], [498.0, 1453.75], [503.0, 1800.5], [504.0, 1324.0], [510.0, 2290.0], [511.0, 1699.0], [508.0, 1688.0], [509.0, 2140.6666666666665], [502.0, 2186.5], [501.0, 3051.0], [505.0, 2688.2], [506.0, 1785.0], [507.0, 3101.0], [513.0, 2378.833333333333], [523.0, 1176.6666666666667], [512.0, 1833.0], [526.0, 2203.5], [527.0, 1624.0], [517.0, 1406.0], [514.0, 3410.0], [518.0, 1391.0], [533.0, 1439.375], [534.0, 2070.1666666666665], [535.0, 1608.0], [530.0, 1848.5], [536.0, 1735.5], [519.0, 2674.25], [538.0, 3270.0], [539.0, 1392.5], [540.0, 2243.0], [542.0, 3770.0], [529.0, 3103.0], [528.0, 3075.0], [531.0, 1659.8181818181818], [532.0, 1835.7777777777778], [520.0, 2358.5], [521.0, 1274.0], [522.0, 2367.0], [524.0, 1237.5], [525.0, 800.0], [558.0, 2160.0], [546.0, 2192.0], [545.0, 2297.5], [559.0, 2553.5], [547.0, 2829.0], [549.0, 3055.0], [548.0, 2573.0], [550.0, 1799.0], [551.0, 1946.0], [568.0, 1371.0], [569.0, 2914.0], [571.0, 1312.0], [575.0, 2015.0], [574.0, 1408.0], [570.0, 2479.0], [561.0, 2043.0], [562.0, 2084.0], [564.0, 2037.0], [565.0, 1572.0], [567.0, 2318.5], [552.0, 1374.3333333333333], [553.0, 2632.0], [556.0, 2129.0], [555.0, 2505.0], [557.0, 2303.0], [580.0, 1328.0], [585.0, 2639.0], [584.0, 2469.0], [587.0, 1836.3333333333333], [591.0, 2026.0], [576.0, 3018.0], [589.0, 2871.0], [594.0, 2169.0], [593.0, 2642.3333333333335], [592.0, 2321.0], [602.0, 2507.0], [604.0, 2487.0], [606.0, 2703.0], [605.0, 2689.0], [607.0, 2704.0], [595.0, 1983.0], [598.0, 1984.5], [596.0, 2557.0], [600.0, 2116.5], [583.0, 2820.0], [581.0, 2710.5], [601.0, 2475.6666666666665], [599.0, 2006.75], [622.0, 2493.75], [611.0, 2417.6666666666665], [613.0, 2454.5], [614.0, 1740.0], [615.0, 1794.0], [626.0, 1623.0], [639.0, 3058.0], [638.0, 2697.0], [636.0, 3115.0], [632.0, 2641.1428571428573], [634.0, 1851.0], [628.0, 2023.0], [630.0, 1561.0], [631.0, 2948.0], [617.0, 1110.0], [616.0, 2955.0], [618.0, 3554.0], [620.0, 1921.0], [621.0, 2122.0], [623.0, 2402.0], [647.0, 2865.6666666666665], [642.0, 1630.5], [640.0, 2782.4285714285716], [644.0, 1666.0], [641.0, 2135.0], [643.0, 2325.0], [646.0, 2091.0], [656.0, 2641.75], [670.0, 2335.6666666666665], [671.0, 1854.0], [669.0, 2553.5], [668.0, 2153.0], [664.0, 2283.0], [665.0, 2213.5], [666.0, 3062.5], [667.0, 2178.666666666667], [657.0, 1805.0], [658.0, 2781.3846153846157], [659.0, 2635.0], [660.0, 2378.777777777778], [661.0, 2448.571428571429], [662.0, 2183.6666666666665], [663.0, 2331.6666666666665], [648.0, 2503.6666666666665], [649.0, 2555.5], [650.0, 2634.6666666666665], [651.0, 2043.0], [655.0, 2059.5], [652.0, 2769.0], [696.0, 2274.75], [673.0, 1715.0], [672.0, 2451.0], [674.0, 2254.0], [675.0, 2434.272727272727], [676.0, 2217.6666666666665], [679.0, 3390.0], [697.0, 2364.5], [698.0, 2286.0], [700.0, 1850.0], [699.0, 2690.5], [701.0, 2425.0], [702.0, 2426.0], [703.0, 2338.6666666666665], [688.0, 2229.0], [689.0, 1971.25], [690.0, 2190.5], [691.0, 2475.0], [692.0, 2618.5], [693.0, 2322.0], [694.0, 2569.0], [695.0, 2350.0], [683.0, 2014.5], [682.0, 2911.75], [681.0, 2743.0], [684.0, 2383.0], [685.0, 2295.5], [686.0, 2517.0], [708.0, 2334.4], [704.0, 2432.8571428571427], [706.0, 2516.0], [705.0, 2095.3333333333335], [707.0, 2427.5], [711.0, 2640.6666666666665], [710.0, 2890.0], [731.0, 2655.0], [733.0, 2641.0], [732.0, 2273.0], [735.0, 2721.5], [734.0, 2594.0], [720.0, 2300.6666666666665], [722.0, 2444.25], [724.0, 2248.5], [725.0, 2455.875], [723.0, 2474.3333333333335], [712.0, 2573.75], [714.0, 2996.0], [715.0, 2375.0], [716.0, 2278.0], [718.0, 2272.0], [719.0, 2155.0], [740.0, 2569.5], [747.0, 2675.0], [738.0, 2385.5], [737.0, 2147.0], [736.0, 2916.0], [748.0, 2595.0], [750.0, 2439.0], [739.0, 2590.2], [744.0, 2164.0], [742.0, 2307.0], [760.0, 2695.0000000000005], [761.0, 2537.3333333333335], [762.0, 2461.1333333333328], [763.0, 2458.777777777778], [765.0, 2090.0], [767.0, 1817.5], [766.0, 3883.0], [764.0, 2761.5], [752.0, 2561.0], [753.0, 2621.6666666666665], [754.0, 2443.0], [755.0, 2387.0], [756.0, 2170.833333333333], [757.0, 2601.0], [758.0, 2139.0], [759.0, 2228.5], [745.0, 2614.0], [746.0, 2509.5], [775.0, 2492.0], [771.0, 2484.5], [768.0, 2359.0], [783.0, 2389.0], [782.0, 2892.5], [781.0, 3126.0], [780.0, 1925.0], [779.0, 3215.0], [776.0, 3555.0], [769.0, 2912.5], [770.0, 2639.0], [772.0, 2979.6666666666665], [773.0, 3188.5], [774.0, 2996.3333333333335], [785.0, 2459.0], [784.0, 2530.1666666666665], [792.0, 1156.0000000000002], [793.0, 2464.6], [794.0, 2040.2857142857142], [795.0, 1966.111111111111], [796.0, 1694.25], [797.0, 2871.0], [798.0, 2402.0], [799.0, 1.0], [786.0, 2691.6666666666665], [787.0, 2830.375], [788.0, 2814.75], [790.0, 2015.2857142857144], [789.0, 2962.2500000000005], [791.0, 3014.5], [800.0, 2663.5], [802.0, 2433.6249999999995], [803.0, 2070.1666666666665], [804.0, 834.4], [805.0, 855.6666666666666], [807.0, 2160.3333333333335], [824.0, 2715.0], [825.0, 2363.0], [806.0, 1643.4444444444443], [817.0, 1608.25], [816.0, 997.4999999999999], [820.0, 2089.0], [822.0, 2558.0], [821.0, 2849.0], [823.0, 2207.0], [819.0, 2189.5555555555557], [818.0, 2268.375], [801.0, 2069.7], [808.0, 1342.6666666666667], [809.0, 2618.0], [810.0, 2693.5], [811.0, 1640.6666666666665], [812.0, 2107.8333333333335], [813.0, 2310.625], [814.0, 2782.5], [815.0, 2522.5999999999995]], "isOverall": false, "label": "Get drug suggestions", "isController": false}, {"data": [[475.1495000000001, 1707.0294999999996]], "isOverall": false, "label": "Get drug suggestions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 825.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 51372.63333333333, "minX": 1.71673494E12, "maxY": 144889.25, "series": [{"data": [[1.71673494E12, 51372.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71673494E12, 144889.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673494E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1014.2724999999987, "minX": 1.71673494E12, "maxY": 1707.0294999999996, "series": [{"data": [[1.71673494E12, 1014.2724999999987]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673494E12, 1707.0294999999996]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673494E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1008.7620000000005, "minX": 1.71673494E12, "maxY": 1685.2974999999985, "series": [{"data": [[1.71673494E12, 1008.7620000000005]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673494E12, 1685.2974999999985]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673494E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.025499999999999988, "minX": 1.71673494E12, "maxY": 0.5989999999999995, "series": [{"data": [[1.71673494E12, 0.025499999999999988]], "isOverall": false, "label": "Create pharmacy", "isController": false}, {"data": [[1.71673494E12, 0.5989999999999995]], "isOverall": false, "label": "Get drug suggestions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673494E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.71673494E12, "maxY": 4337.0, "series": [{"data": [[1.71673494E12, 4337.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71673494E12, 16.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71673494E12, 2750.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71673494E12, 3478.600000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71673494E12, 1260.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.71673494E12, 3055.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673494E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 135.0, "maxY": 2203.0, "series": [{"data": [[135.0, 70.0], [192.0, 621.0], [204.0, 1674.0], [282.0, 1187.5], [285.0, 1997.0], [296.0, 246.5], [302.0, 528.0], [305.0, 751.0], [309.0, 1015.0], [355.0, 2013.0], [404.0, 2203.0], [438.0, 1856.5], [493.0, 1305.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[355.0, 1.0], [404.0, 1.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 493.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 135.0, "maxY": 2191.5, "series": [{"data": [[135.0, 65.0], [192.0, 619.0], [204.0, 1648.0], [282.0, 1177.5], [285.0, 1962.0], [296.0, 239.0], [302.0, 519.0], [305.0, 744.0], [309.0, 998.0], [355.0, 1996.0], [404.0, 2191.5], [438.0, 1853.0], [493.0, 1301.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[355.0, 0.0], [404.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 493.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 66.66666666666667, "minX": 1.71673494E12, "maxY": 66.66666666666667, "series": [{"data": [[1.71673494E12, 66.66666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673494E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.71673494E12, "maxY": 64.9, "series": [{"data": [[1.71673494E12, 64.9]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.71673494E12, 1.7666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71673494E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.71673494E12, "maxY": 32.45, "series": [{"data": [[1.71673494E12, 32.45]], "isOverall": false, "label": "Create pharmacy-success", "isController": false}, {"data": [[1.71673494E12, 32.45]], "isOverall": false, "label": "Get drug suggestions-success", "isController": false}, {"data": [[1.71673494E12, 0.8833333333333333]], "isOverall": false, "label": "Get drug suggestions-failure", "isController": false}, {"data": [[1.71673494E12, 0.8833333333333333]], "isOverall": false, "label": "Create pharmacy-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673494E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.7666666666666666, "minX": 1.71673494E12, "maxY": 64.9, "series": [{"data": [[1.71673494E12, 64.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.71673494E12, 1.7666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71673494E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

